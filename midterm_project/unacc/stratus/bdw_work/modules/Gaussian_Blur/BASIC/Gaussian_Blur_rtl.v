// Generated by stratus_hls 19.12-s100  (91710.131054)
// Thu May  6 05:53:37 2021
// from ../Gaussian_Blur.cpp

`timescale 1ps / 1ps

      
module Gaussian_Blur(i_clk, i_rst, i_rgb_busy, i_rgb_vld, i_rgb_data, o_result_busy, o_result_vld, o_result_data);

      input i_clk;
      input i_rst;
      input i_rgb_vld;
      input [24:0] i_rgb_data;
      input o_result_busy;
      output i_rgb_busy;
      output o_result_vld;
      output [31:0] o_result_data;
      reg o_result_m_req_m_prev_trig_req;
      reg o_result_m_unacked_req;
      wire Gaussian_Blur_Xor_1Ux1U_1U_1_1_out1;
      wire Gaussian_Blur_Or_1Ux1U_1U_4_2_out1;
      reg Gaussian_Blur_N_Muxb_1_2_1_4_4_out1;
      reg i_rgb_m_unvalidated_req;
      wire Gaussian_Blur_gen_busy_r_4_28_gnew_req;
      wire Gaussian_Blur_gen_busy_r_4_28_gdiv;
      wire Gaussian_Blur_gen_busy_r_4_28_gen_busy_i_rgb_m_data_is_invalid_next;
      reg[8:0] Gaussian_Blur_N_Mux_9_2_2_4_31_out1;
      reg[8:0] stall_fifo_1_stall_fifo_1_0;
      reg active_0;
      wire Gaussian_Blur_gen_fifo_addr_alt0_4_29_amtmp003;
      wire Gaussian_Blur_gen_fifo_addr_alt0_4_29_amtmp004;
      reg Gaussian_Blur_gen_fifo_addr_alt0_4_29_out1;
      reg fifo_dsel;
      reg[2:0] global_state_next;
      reg r_busy;
      reg gs_ctrl9;
      wire Gaussian_Blur_N_Mux_11_2_0_4_25_ctrl1;
      /*signed*/wire[10:0] Gaussian_Blur_Minus_11U_11S_4_23_out1;
      wire[10:0] Gaussian_Blur_Abs_11S_11U_4_20_out1;
      /*signed*/reg[8:0] Gaussian_Blur_Add_9Sx9S_10S_4_13_in2;
      reg gs_ctrl8;
      /*signed*/reg[8:0] Gaussian_Blur_Add_10Sx9S_11S_4_12_in1;
      reg gs_ctrl7;
      /*signed*/reg[9:0] Gaussian_Blur_Add_10Sx9S_11S_4_12_in2;
      reg gs_ctrl6;
      /*signed*/wire[8:0] Gaussian_Blur_Mul_9Sx8U_9S_4_11_out1;
      wire[7:0] Gaussian_Blur_Mul_9Sx8U_9S_4_11_in1;
      /*signed*/wire[8:0] Gaussian_Blur_Mul_9Sx8U_9S_4_10_out1;
      reg[7:0] Gaussian_Blur_Mul_9Sx8U_9S_4_10_in1;
      /*signed*/reg[8:0] Gaussian_Blur_Mul_9Sx8U_9S_4_10_in2;
      reg[1:0] Gaussian_Blur_Add_2Ux1U_2U_4_9_in2;
      wire[3:0] Gaussian_Blur_Add_4Ux2U_4U_4_8_out1;
      reg[1:0] Gaussian_Blur_Add_4Ux2U_4U_4_8_in1;
      wire[3:0] Gaussian_Blur_Mul_2Ux2U_4U_4_7_out1;
      reg[1:0] Gaussian_Blur_Mul_2Ux2U_4U_4_7_in2;
      reg[1:0] Gaussian_Blur_Add_2Ux1U_2U_4_6_in2;
      reg gs_ctrl0;
      wire[10:0] Gaussian_Blur_Div_11Ux2U_11U_4_21_out1;
      reg[10:0] s_reg_27;
      reg[8:0] Gaussian_Blur_N_Mux_9_2_2_1_30_out1;
      reg[9:0] s_reg_26;
      wire[1:0] Gaussian_Blur_Add_2Ux1U_2U_4_9_out1;
      reg[1:0] s_reg_25;
      reg[8:0] s_reg_24;
      /*signed*/wire[9:0] Gaussian_Blur_Add_9Sx9S_10S_4_13_out1;
      reg[8:0] s_reg_23;
      /*signed*/wire[10:0] Gaussian_Blur_Add_10Sx9S_11S_4_12_out1;
      reg[8:0] s_reg_22;
      wire[1:0] Gaussian_Blur_Add_2Ux1U_2U_4_6_out1;
      reg[1:0] s_reg_21;
      reg[1:0] s_reg_20;
      wire Gaussian_Blur_And_1Ux1U_1U_4_26_out1;
      wire[2:0] Gaussian_Blur_gen_busy_r_4_28_out1;
      wire Gaussian_Blur_Not_1U_1U_1_3_out1;
      reg o_result_m_req_m_trig_req;
      wire Gaussian_Blur_LessThan_2Ux2U_1U_4_16_out1;
      wire Gaussian_Blur_LessThan_2Ux2U_1U_4_17_out1;
      reg i_rgb_m_busy_req_0;
      reg[10:0] Gaussian_Blur_N_Mux_11_2_0_4_25_out1;
      /*signed*/reg[23:0] o_result_data_slice;
      reg[2:0] global_state;
      reg stall0;
      wire[3:0] filter_in1;
      wire[8:0] filter_out1;

         Gaussian_Blur_ROM_9X9_filter filter(
                                        .in1( filter_in1 ),
                                        .out1( filter_out1 ),
                                        .clk( i_clk )
                                      );

         // resource: mux_24bx2i0c
         // resource: regr_en_24
         always @(posedge i_clk)
          begin :drive_o_result_data_slice
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     3'd1:                      begin
                        o_result_data_slice <= i_rgb_data[23:0];
                     end
                     
                     3'd5:                      begin
                        o_result_data_slice <= {{ 13 {Gaussian_Blur_N_Mux_11_2_0_4_25_out1[10]}}, Gaussian_Blur_N_Mux_11_2_0_4_25_out1};
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         // resource: regr_en_ss_1
         always @(posedge i_clk)
          begin :drive_i_rgb_m_busy_req_0
            if (i_rst == 1'b0) begin
               i_rgb_m_busy_req_0 <= 1'd1;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        3'd0, 3'd7:                         begin
                           i_rgb_m_busy_req_0 <= 1'd0;
                        end
                        
                        3'd1:                         begin
                           i_rgb_m_busy_req_0 <= 1'd1;
                        end
                        
                        3'd2:                         begin
                           if (Gaussian_Blur_LessThan_2Ux2U_1U_4_17_out1) begin
                              i_rgb_m_busy_req_0 <= 1'd0;
                           end
                           else begin
                              if (Gaussian_Blur_LessThan_2Ux2U_1U_4_16_out1) begin
                                 i_rgb_m_busy_req_0 <= 1'd0;
                              end
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_m_req_m_trig_req
            if (i_rst == 1'b0) begin
               o_result_m_req_m_trig_req <= 1'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        3'd5:                         begin
                           o_result_m_req_m_trig_req <= Gaussian_Blur_Not_1U_1U_1_3_out1;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx3i1c
         always @(Gaussian_Blur_And_1Ux1U_1U_4_26_out1 or Gaussian_Blur_gen_busy_r_4_28_out1[0] or global_state)
          begin :drive_stall0
            case (global_state) 

               3'd1:                begin
                  stall0 = Gaussian_Blur_gen_busy_r_4_28_out1[0];
               end
               
               3'd6:                begin
                  stall0 = Gaussian_Blur_And_1Ux1U_1U_4_26_out1;
               end
               
               default:                begin
                  stall0 = 1'b0;
               end
               
            endcase

         end

         // resource: mux_2bx2i1c
         // resource: regr_en_2
         always @(posedge i_clk)
          begin :drive_s_reg_20
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     3'd0, 3'd7:                      begin
                        s_reg_20 <= 2'd0;
                     end
                     
                     3'd2:                      begin
                        if (Gaussian_Blur_LessThan_2Ux2U_1U_4_17_out1) begin
                        end
                        else begin
                           s_reg_20 <= s_reg_21;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_2
         always @(posedge i_clk)
          begin :drive_s_reg_21
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     3'd0, 3'd7:                      begin
                        s_reg_21 <= Gaussian_Blur_Add_2Ux1U_2U_4_6_out1;
                     end
                     
                     3'd2:                      begin
                        if (Gaussian_Blur_LessThan_2Ux2U_1U_4_17_out1) begin
                        end
                        else begin
                           s_reg_21 <= Gaussian_Blur_Add_2Ux1U_2U_4_6_out1;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_9bx2i1c
         // resource: regr_en_9
         always @(posedge i_clk)
          begin :drive_s_reg_22
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     3'd0, 3'd7:                      begin
                        s_reg_22 <= 9'd000;
                     end
                     
                     3'd1:                      begin
                        s_reg_22 <= Gaussian_Blur_Add_10Sx9S_11S_4_12_out1[8:0];
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_9bx2i1c
         // resource: regr_en_9
         always @(posedge i_clk)
          begin :drive_s_reg_23
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     3'd0, 3'd7:                      begin
                        s_reg_23 <= 9'd000;
                     end
                     
                     3'd1:                      begin
                        s_reg_23 <= Gaussian_Blur_Add_9Sx9S_10S_4_13_out1[8:0];
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_9bx2i1c
         // resource: regr_en_9
         always @(posedge i_clk)
          begin :drive_s_reg_24
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     3'd0, 3'd7:                      begin
                        s_reg_24 <= 9'd000;
                     end
                     
                     3'd2:                      begin
                        s_reg_24 <= Gaussian_Blur_Add_10Sx9S_11S_4_12_out1[8:0];
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_2
         always @(posedge i_clk)
          begin :drive_s_reg_25
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     3'd0, 3'd2, 3'd7:                      begin
                        s_reg_25 <= Gaussian_Blur_Add_2Ux1U_2U_4_9_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_10bx2i0c
         // resource: regr_en_10
         always @(posedge i_clk)
          begin :drive_s_reg_26
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     3'd1:                      begin
                        s_reg_26 <= {Gaussian_Blur_N_Mux_9_2_2_1_30_out1[8], Gaussian_Blur_N_Mux_9_2_2_1_30_out1};
                     end
                     
                     3'd2, 3'd4:                      begin
                        s_reg_26 <= Gaussian_Blur_Add_9Sx9S_10S_4_13_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_11
         always @(posedge i_clk)
          begin :drive_s_reg_27
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     3'd3:                      begin
                        s_reg_27 <= Gaussian_Blur_Div_11Ux2U_11U_4_21_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_2bx2i1c
         always @(s_reg_21 or gs_ctrl0)
          begin :drive_Gaussian_Blur_Add_2Ux1U_2U_4_6_in2
            if (gs_ctrl0) begin
               Gaussian_Blur_Add_2Ux1U_2U_4_6_in2 = s_reg_21;
            end
            else begin
               Gaussian_Blur_Add_2Ux1U_2U_4_6_in2 = 2'd0;
            end
         end

         // resource: Gaussian_Blur_Add_2Ux1U_2U_4  instance: Gaussian_Blur_Add_2Ux1U_2U_4_6
         assign Gaussian_Blur_Add_2Ux1U_2U_4_6_out1 = Gaussian_Blur_Add_2Ux1U_2U_4_6_in2 + 2'd1;

         // resource: mux_2bx2i1c
         always @(s_reg_25 or Gaussian_Blur_LessThan_2Ux2U_1U_4_17_out1 or gs_ctrl0)
          begin :drive_Gaussian_Blur_Mul_2Ux2U_4U_4_7_in2
            if (gs_ctrl0) begin
               if (Gaussian_Blur_LessThan_2Ux2U_1U_4_17_out1) begin
                  Gaussian_Blur_Mul_2Ux2U_4U_4_7_in2 = s_reg_25;
               end
               else begin
                  Gaussian_Blur_Mul_2Ux2U_4U_4_7_in2 = 2'd0;
               end
            end
            else begin
               Gaussian_Blur_Mul_2Ux2U_4U_4_7_in2 = 2'd0;
            end
         end

         // resource: Gaussian_Blur_Mul_2Ux2U_4U_4  instance: Gaussian_Blur_Mul_2Ux2U_4U_4_7
         assign Gaussian_Blur_Mul_2Ux2U_4U_4_7_out1 = {2'b00, Gaussian_Blur_Mul_2Ux2U_4U_4_7_in2}*4'd03;

         // resource: mux_2bx3i1c
         always @(s_reg_20 or s_reg_21 or Gaussian_Blur_LessThan_2Ux2U_1U_4_17_out1 or gs_ctrl0)
          begin :drive_Gaussian_Blur_Add_4Ux2U_4U_4_8_in1
            if (gs_ctrl0) begin
               if (Gaussian_Blur_LessThan_2Ux2U_1U_4_17_out1) begin
                  Gaussian_Blur_Add_4Ux2U_4U_4_8_in1 = s_reg_20;
               end
               else begin
                  Gaussian_Blur_Add_4Ux2U_4U_4_8_in1 = s_reg_21;
               end
            end
            else begin
               Gaussian_Blur_Add_4Ux2U_4U_4_8_in1 = 2'd0;
            end
         end

         // resource: Gaussian_Blur_Add_4Ux2U_4U_4  instance: Gaussian_Blur_Add_4Ux2U_4U_4_8
         assign Gaussian_Blur_Add_4Ux2U_4U_4_8_out1 = Gaussian_Blur_Mul_2Ux2U_4U_4_7_out1 + {2'b00, Gaussian_Blur_Add_4Ux2U_4U_4_8_in1};

         // resource: mux_2bx2i1c
         always @(s_reg_25 or Gaussian_Blur_LessThan_2Ux2U_1U_4_17_out1 or gs_ctrl0)
          begin :drive_Gaussian_Blur_Add_2Ux1U_2U_4_9_in2
            if (gs_ctrl0) begin
               if (Gaussian_Blur_LessThan_2Ux2U_1U_4_17_out1) begin
                  Gaussian_Blur_Add_2Ux1U_2U_4_9_in2 = s_reg_25;
               end
               else begin
                  Gaussian_Blur_Add_2Ux1U_2U_4_9_in2 = 2'd0;
               end
            end
            else begin
               Gaussian_Blur_Add_2Ux1U_2U_4_9_in2 = 2'd0;
            end
         end

         // resource: Gaussian_Blur_Add_2Ux1U_2U_4  instance: Gaussian_Blur_Add_2Ux1U_2U_4_9
         assign Gaussian_Blur_Add_2Ux1U_2U_4_9_out1 = Gaussian_Blur_Add_2Ux1U_2U_4_9_in2 + 2'd1;

         // instance: drive_filter_in1
         assign filter_in1 = Gaussian_Blur_Add_4Ux2U_4U_4_8_out1;

         // resource: mux_9bx2i0c
         always @(s_reg_26[8:0] or Gaussian_Blur_N_Mux_9_2_2_1_30_out1 or gs_ctrl0)
          begin :drive_Gaussian_Blur_Mul_9Sx8U_9S_4_10_in2
            if (gs_ctrl0) begin
               Gaussian_Blur_Mul_9Sx8U_9S_4_10_in2 = s_reg_26[8:0];
            end
            else begin
               Gaussian_Blur_Mul_9Sx8U_9S_4_10_in2 = Gaussian_Blur_N_Mux_9_2_2_1_30_out1;
            end
         end

         // resource: mux_8bx2i0c
         always @(i_rgb_data[7:0] or gs_ctrl0 or o_result_data_slice[23:16])
          begin :drive_Gaussian_Blur_Mul_9Sx8U_9S_4_10_in1
            if (gs_ctrl0) begin
               Gaussian_Blur_Mul_9Sx8U_9S_4_10_in1 = o_result_data_slice[23:16];
            end
            else begin
               Gaussian_Blur_Mul_9Sx8U_9S_4_10_in1 = i_rgb_data[7:0];
            end
         end

         // resource: Gaussian_Blur_Mul_9Sx8U_9S_4  instance: Gaussian_Blur_Mul_9Sx8U_9S_4_10
         assign Gaussian_Blur_Mul_9Sx8U_9S_4_10_out1 = Gaussian_Blur_Mul_9Sx8U_9S_4_10_in2*{1'b0, Gaussian_Blur_Mul_9Sx8U_9S_4_10_in1};

         // instance: drive_Gaussian_Blur_Mul_9Sx8U_9S_4_11_in1
         assign Gaussian_Blur_Mul_9Sx8U_9S_4_11_in1 = i_rgb_data[15:8];

         // resource: Gaussian_Blur_Mul_9Sx8U_9S_4  instance: Gaussian_Blur_Mul_9Sx8U_9S_4_11
         assign Gaussian_Blur_Mul_9Sx8U_9S_4_11_out1 = Gaussian_Blur_N_Mux_9_2_2_1_30_out1*{1'b0, Gaussian_Blur_Mul_9Sx8U_9S_4_11_in1};

         // resource: mux_10bx2i0c
         always @(s_reg_26 or Gaussian_Blur_Mul_9Sx8U_9S_4_10_out1 or gs_ctrl6)
          begin :drive_Gaussian_Blur_Add_10Sx9S_11S_4_12_in2
            if (gs_ctrl6) begin
               Gaussian_Blur_Add_10Sx9S_11S_4_12_in2 = s_reg_26;
            end
            else begin
               Gaussian_Blur_Add_10Sx9S_11S_4_12_in2 = {1'b0, Gaussian_Blur_Mul_9Sx8U_9S_4_10_out1};
            end
         end

         // resource: mux_9bx2i0c
         always @(s_reg_22 or s_reg_24 or gs_ctrl7)
          begin :drive_Gaussian_Blur_Add_10Sx9S_11S_4_12_in1
            if (gs_ctrl7) begin
               Gaussian_Blur_Add_10Sx9S_11S_4_12_in1 = s_reg_24;
            end
            else begin
               Gaussian_Blur_Add_10Sx9S_11S_4_12_in1 = s_reg_22;
            end
         end

         // resource: Gaussian_Blur_Add_10Sx9S_11S_4  instance: Gaussian_Blur_Add_10Sx9S_11S_4_12
         assign Gaussian_Blur_Add_10Sx9S_11S_4_12_out1 = {Gaussian_Blur_Add_10Sx9S_11S_4_12_in2[9], Gaussian_Blur_Add_10Sx9S_11S_4_12_in2} + {{ 2 {Gaussian_Blur_Add_10Sx9S_11S_4_12_in1[8]}}, Gaussian_Blur_Add_10Sx9S_11S_4_12_in1};

         // resource: mux_9bx2i0c
         always @(s_reg_22 or Gaussian_Blur_Mul_9Sx8U_9S_4_11_out1 or gs_ctrl8)
          begin :drive_Gaussian_Blur_Add_9Sx9S_10S_4_13_in2
            if (gs_ctrl8) begin
               /* state8 */
               Gaussian_Blur_Add_9Sx9S_10S_4_13_in2 = s_reg_22;
            end
            else begin
               Gaussian_Blur_Add_9Sx9S_10S_4_13_in2 = Gaussian_Blur_Mul_9Sx8U_9S_4_11_out1;
            end
         end

         // resource: Gaussian_Blur_Add_9Sx9S_10S_4  instance: Gaussian_Blur_Add_9Sx9S_10S_4_13
         assign Gaussian_Blur_Add_9Sx9S_10S_4_13_out1 = {Gaussian_Blur_Add_9Sx9S_10S_4_13_in2[8], Gaussian_Blur_Add_9Sx9S_10S_4_13_in2} + {s_reg_23[8], s_reg_23};

         // resource: Gaussian_Blur_LessThan_2Ux2U_1U_4  instance: Gaussian_Blur_LessThan_2Ux2U_1U_4_16
         assign Gaussian_Blur_LessThan_2Ux2U_1U_4_16_out1 = s_reg_21 < 2'd3;

         // resource: Gaussian_Blur_LessThan_2Ux2U_1U_4  instance: Gaussian_Blur_LessThan_2Ux2U_1U_4_17
         assign Gaussian_Blur_LessThan_2Ux2U_1U_4_17_out1 = s_reg_25 < 2'd3;

         // resource: Gaussian_Blur_Abs_11S_11U_4  instance: Gaussian_Blur_Abs_11S_11U_4_20
         assign Gaussian_Blur_Abs_11S_11U_4_20_out1 = Gaussian_Blur_Add_10Sx9S_11S_4_12_out1[10] ^ Gaussian_Blur_Add_10Sx9S_11S_4_12_out1 < 11'd0000 ? -Gaussian_Blur_Add_10Sx9S_11S_4_12_out1 : Gaussian_Blur_Add_10Sx9S_11S_4_12_out1;

         // resource: Gaussian_Blur_Div_11Ux2U_11U_4  instance: Gaussian_Blur_Div_11Ux2U_11U_4_21
         assign Gaussian_Blur_Div_11Ux2U_11U_4_21_out1 = Gaussian_Blur_Abs_11S_11U_4_20_out1 / 2'd3;

         // resource: Gaussian_Blur_Minus_11U_11S_4  instance: Gaussian_Blur_Minus_11U_11S_4_23
         assign Gaussian_Blur_Minus_11U_11S_4_23_out1 = -s_reg_27;

         // instance: drive_Gaussian_Blur_N_Mux_11_2_0_4_25_ctrl1
         assign Gaussian_Blur_N_Mux_11_2_0_4_25_ctrl1 = Gaussian_Blur_Add_10Sx9S_11S_4_12_out1[10];

         // resource: Gaussian_Blur_N_Mux_11_2_0_4
         always @(s_reg_27 or Gaussian_Blur_Minus_11U_11S_4_23_out1 or Gaussian_Blur_N_Mux_11_2_0_4_25_ctrl1)
          begin :Gaussian_Blur_N_Mux_11_2_0_4_25
            if (Gaussian_Blur_N_Mux_11_2_0_4_25_ctrl1) begin
               Gaussian_Blur_N_Mux_11_2_0_4_25_out1 = Gaussian_Blur_Minus_11U_11S_4_23_out1;
            end
            else begin
               Gaussian_Blur_N_Mux_11_2_0_4_25_out1 = s_reg_27;
            end
         end

         // resource: mux_1bx2i2c
         always @(stall0 or gs_ctrl9)
          begin :drive_r_busy
            if (stall0) begin
               r_busy = 1'b1;
            end
            else begin
               if (gs_ctrl9) begin
                  r_busy = 1'b0;
               end
               else begin
                  r_busy = 1'b1;
               end
            end
         end

         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_global_state
            if (i_rst == 1'b0) begin
               global_state <= 3'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     global_state <= global_state_next;
                  end
                  
               endcase

            end
         end

         // resource: mux_3bx2i1c
         always @(Gaussian_Blur_LessThan_2Ux2U_1U_4_16_out1 or Gaussian_Blur_LessThan_2Ux2U_1U_4_17_out1 or global_state)
          begin :drive_global_state_next
            case (global_state) 

               3'd0, 3'd7:                begin
                  global_state_next = 3'd1;
               end
               
               3'd2:                begin
                  if (Gaussian_Blur_LessThan_2Ux2U_1U_4_17_out1) begin
                     global_state_next = 3'd1;
                  end
                  else begin
                     if (Gaussian_Blur_LessThan_2Ux2U_1U_4_16_out1) begin
                        global_state_next = 3'd1;
                     end
                     else begin
                        global_state_next = global_state + 3'd1;
                     end
                  end
               end
               
               default:                begin
                  global_state_next = global_state + 3'd1;
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl0
            if (i_rst == 1'b0) begin
               gs_ctrl0 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        3'd2:                         begin
                           gs_ctrl0 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl0 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl6
            if (i_rst == 1'b0) begin
               gs_ctrl6 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        3'd3, 3'd5:                         begin
                           gs_ctrl6 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl6 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl7
            if (i_rst == 1'b0) begin
               gs_ctrl7 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        3'd2, 3'd3, 3'd5:                         begin
                           gs_ctrl7 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl7 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl8
            if (i_rst == 1'b0) begin
               gs_ctrl8 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        3'd2, 3'd4:                         begin
                           gs_ctrl8 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl8 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl9
            if (i_rst == 1'b0) begin
               gs_ctrl9 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        3'd1:                         begin
                           gs_ctrl9 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl9 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_fifo_dsel
            if (i_rst == 1'b0) begin
               fifo_dsel <= 1'b0;
            end
            else begin
               fifo_dsel <= Gaussian_Blur_gen_fifo_addr_alt0_4_29_out1;
            end
         end

         // resource: Gaussian_Blur_gen_fifo_addr_alt0_4  instance: Gaussian_Blur_gen_fifo_addr_alt0_4_29
         always @(fifo_dsel or Gaussian_Blur_gen_fifo_addr_alt0_4_29_amtmp003 or Gaussian_Blur_gen_fifo_addr_alt0_4_29_amtmp004)
          begin :Gaussian_Blur_gen_fifo_addr_alt0_4_29_p4
            if (Gaussian_Blur_gen_fifo_addr_alt0_4_29_amtmp004) begin
               Gaussian_Blur_gen_fifo_addr_alt0_4_29_out1 = fifo_dsel + 1'b1;
            end
            else begin
               if (Gaussian_Blur_gen_fifo_addr_alt0_4_29_amtmp003) begin
                  Gaussian_Blur_gen_fifo_addr_alt0_4_29_out1 = fifo_dsel - 1'b1;
               end
               else begin
                  Gaussian_Blur_gen_fifo_addr_alt0_4_29_out1 = fifo_dsel;
               end
            end
         end

         // resource: Gaussian_Blur_gen_fifo_addr_alt0_4  instance: Gaussian_Blur_gen_fifo_addr_alt0_4_29
         assign Gaussian_Blur_gen_fifo_addr_alt0_4_29_amtmp003 = !active_0 & (!r_busy & fifo_dsel);

         // resource: Gaussian_Blur_gen_fifo_addr_alt0_4  instance: Gaussian_Blur_gen_fifo_addr_alt0_4_29
         assign Gaussian_Blur_gen_fifo_addr_alt0_4_29_amtmp004 = active_0 & (r_busy & !fifo_dsel);

         // resource: Gaussian_Blur_N_Mux_9_2_2_1
         always @(filter_out1 or fifo_dsel or stall_fifo_1_stall_fifo_1_0)
          begin :Gaussian_Blur_N_Mux_9_2_2_1_30
            if (fifo_dsel) begin
               Gaussian_Blur_N_Mux_9_2_2_1_30_out1 = stall_fifo_1_stall_fifo_1_0;
            end
            else begin
               Gaussian_Blur_N_Mux_9_2_2_1_30_out1 = filter_out1;
            end
         end

         // resource: regr_9
         always @(posedge i_clk)
          begin :drive_stall_fifo_1_stall_fifo_1_0
            stall_fifo_1_stall_fifo_1_0 <= Gaussian_Blur_N_Mux_9_2_2_4_31_out1;
         end

         // resource: Gaussian_Blur_N_Mux_9_2_2_4
         always @(filter_out1 or stall_fifo_1_stall_fifo_1_0 or active_0)
          begin :Gaussian_Blur_N_Mux_9_2_2_4_31
            if (active_0) begin
               Gaussian_Blur_N_Mux_9_2_2_4_31_out1 = filter_out1;
            end
            else begin
               Gaussian_Blur_N_Mux_9_2_2_4_31_out1 = stall_fifo_1_stall_fifo_1_0;
            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_active_0
            if (i_rst == 1'b0) begin
               active_0 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                     active_0 <= 1'b0;
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        3'd0, 3'd7:                         begin
                           active_0 <= 1'b1;
                        end
                        
                        3'd2:                         begin
                           if (Gaussian_Blur_LessThan_2Ux2U_1U_4_17_out1) begin
                              active_0 <= 1'b1;
                           end
                           else begin
                              if (Gaussian_Blur_LessThan_2Ux2U_1U_4_16_out1) begin
                                 active_0 <= 1'b1;
                              end
                              else begin
                                 active_0 <= 1'b0;
                              end
                           end
                        end
                        
                        default:                         begin
                           active_0 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // instance: drive_i_rgb_busy
         assign i_rgb_busy = Gaussian_Blur_gen_busy_r_4_28_out1[2];

         // resource: Gaussian_Blur_gen_busy_r_4  instance: Gaussian_Blur_gen_busy_r_4_28
         assign Gaussian_Blur_gen_busy_r_4_28_out1 = {Gaussian_Blur_gen_busy_r_4_28_gnew_req, {Gaussian_Blur_gen_busy_r_4_28_gdiv, Gaussian_Blur_gen_busy_r_4_28_gen_busy_i_rgb_m_data_is_invalid_next}};

         // resource: Gaussian_Blur_gen_busy_r_4  instance: Gaussian_Blur_gen_busy_r_4_28
         assign Gaussian_Blur_gen_busy_r_4_28_gen_busy_i_rgb_m_data_is_invalid_next = ~Gaussian_Blur_gen_busy_r_4_28_gdiv;

         // resource: Gaussian_Blur_gen_busy_r_4  instance: Gaussian_Blur_gen_busy_r_4_28
         assign Gaussian_Blur_gen_busy_r_4_28_gdiv = i_rgb_vld & !Gaussian_Blur_gen_busy_r_4_28_gnew_req;

         // resource: Gaussian_Blur_gen_busy_r_4  instance: Gaussian_Blur_gen_busy_r_4_28
         assign Gaussian_Blur_gen_busy_r_4_28_gnew_req = i_rgb_m_busy_req_0 & (i_rgb_m_unvalidated_req | i_rgb_vld);

         // resource: regr_ss_1
         always @(posedge i_clk)
          begin :drive_i_rgb_m_unvalidated_req
            if (i_rst == 1'b0) begin
               i_rgb_m_unvalidated_req <= 1'd1;
            end
            else begin
               i_rgb_m_unvalidated_req <= Gaussian_Blur_N_Muxb_1_2_1_4_4_out1;
            end
         end

         // resource: Gaussian_Blur_N_Muxb_1_2_1_4
         always @(i_rgb_vld or i_rgb_m_busy_req_0 or i_rgb_m_unvalidated_req)
          begin :Gaussian_Blur_N_Muxb_1_2_1_4_4
            if (i_rgb_m_busy_req_0) begin
               Gaussian_Blur_N_Muxb_1_2_1_4_4_out1 = i_rgb_m_unvalidated_req;
            end
            else begin
               Gaussian_Blur_N_Muxb_1_2_1_4_4_out1 = i_rgb_vld;
            end
         end

         // instance: drive_o_result_vld
         assign o_result_vld = Gaussian_Blur_Or_1Ux1U_1U_4_2_out1;

         // resource: Gaussian_Blur_Or_1Ux1U_1U_4  instance: Gaussian_Blur_Or_1Ux1U_1U_4_2
         assign Gaussian_Blur_Or_1Ux1U_1U_4_2_out1 = o_result_m_unacked_req | Gaussian_Blur_Xor_1Ux1U_1U_1_1_out1;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_m_unacked_req
            if (i_rst == 1'b0) begin
               o_result_m_unacked_req <= 1'd0;
            end
            else begin
               o_result_m_unacked_req <= Gaussian_Blur_And_1Ux1U_1U_4_26_out1;
            end
         end

         // resource: Gaussian_Blur_And_1Ux1U_1U_4  instance: Gaussian_Blur_And_1Ux1U_1U_4_26
         assign Gaussian_Blur_And_1Ux1U_1U_4_26_out1 = o_result_busy & o_result_vld;

         // resource: Gaussian_Blur_Xor_1Ux1U_1U_1  instance: Gaussian_Blur_Xor_1Ux1U_1U_1_1
         assign Gaussian_Blur_Xor_1Ux1U_1U_1_1_out1 = o_result_m_req_m_trig_req ^ o_result_m_req_m_prev_trig_req;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_m_req_m_prev_trig_req
            if (i_rst == 1'b0) begin
               o_result_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               o_result_m_req_m_prev_trig_req <= o_result_m_req_m_trig_req;
            end
         end

         // resource: Gaussian_Blur_Not_1U_1U_1  instance: Gaussian_Blur_Not_1U_1U_1_3
         assign Gaussian_Blur_Not_1U_1U_1_3_out1 = !o_result_m_req_m_trig_req;

         // instance: drive_o_result_data
         assign o_result_data = {{ 8 {o_result_data_slice[23]}}, o_result_data_slice};


endmodule

