// Generated by stratus_hls 19.12-s100  (91710.131054)
// Thu May  6 05:34:07 2021
// from ../Gaussian_Blur.cpp

`timescale 1ps / 1ps

      
module Gaussian_Blur(i_clk, i_rst, i_rgb_busy, i_rgb_vld, i_rgb_data, o_result_busy, o_result_vld, o_result_data);

      input i_clk;
      input i_rst;
      input i_rgb_vld;
      input [24:0] i_rgb_data;
      input o_result_busy;
      output i_rgb_busy;
      output o_result_vld;
      output [31:0] o_result_data;
      reg o_result_m_req_m_prev_trig_req;
      reg o_result_m_unacked_req;
      wire Gaussian_Blur_Xor_1Ux1U_1U_1_1_out1;
      wire Gaussian_Blur_Or_1Ux1U_1U_4_2_out1;
      reg Gaussian_Blur_N_Muxb_1_2_28_4_4_out1;
      reg i_rgb_m_unvalidated_req;
      wire Gaussian_Blur_gen_busy_r_4_52_gnew_req;
      wire Gaussian_Blur_gen_busy_r_4_52_gdiv;
      wire Gaussian_Blur_gen_busy_r_4_52_gen_busy_i_rgb_m_data_is_invalid_next;
      reg[8:0] global_state_next;
      /*signed*/wire[10:0] Gaussian_Blur_Minus_11U_11S_4_46_out1;
      wire Gaussian_Blur_R10_10Add3s9s9s9_4_45_out1;
      /*signed*/wire[10:0] bits_001;
      wire[10:0] Gaussian_Blur_Div_11U_29_4_44_out1;
      wire[10:0] Gaussian_Blur_AbsAdd3s9s9s9_4_43_out1;
      /*signed*/wire[10:0] t_2;
      wire[7:0] Gaussian_Blur_Add2Mul2s9u8s9_4_41_in2;
      wire[7:0] Gaussian_Blur_Add2Mul2s9u8s9_4_40_in2;
      reg[1:0] Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_in1;
      reg[7:0] Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_in2;
      reg[1:0] gs_ctrl19;
      reg[1:0] Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_in3;
      reg[1:0] Gaussian_Blur_Add2i1u2_4_34_in1;
      reg gs_ctrl17;
      reg[1:0] Gaussian_Blur_Add2i6u2_4_28_in1;
      reg gs_ctrl16;
      reg Gaussian_Blur_N_Mux_2_2_35_4_24_ctrl1;
      /*signed*/wire[1:0] Gaussian_Blur_Minus_2U_2S_1_23_out1;
      wire[1:0] Gaussian_Blur_Mod_2U_32_4_22_out1;
      wire[31:0] Gaussian_Blur_Abs_32S_32U_1_21_out1;
      wire Gaussian_Blur_Nen1s32_4_19_out1;
      wire Gaussian_Blur_Nei254s32_4_18_out1;
      /*signed*/reg[31:0] Gaussian_Blur_Nei254s32_4_18_in1;
      reg[1:0] Gaussian_Blur_Mul2i258u2_4_15_in1;
      reg gs_ctrl11;
      reg[2:0] gs_ctrl10;
      reg[2:0] gs_ctrl9;
      reg gs_ctrl8;
      wire[9:0] Gaussian_Blur_Mul2i258u2_4_15_out1;
      wire[9:0] Gaussian_Blur_Add2i257Mul2i258u2_4_16_out1;
      wire[9:0] Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_out1;
      wire[9:0] Gaussian_Blur_Add2Add2i1u8Mul2i258u2_1_12_out1;
      reg[7:0] Gaussian_Blur_Add2Add2i1u8Mul2i258u2_1_12_in1;
      reg[1:0] Gaussian_Blur_Add2Add2i1u8Mul2i258u2_1_12_in2;
      reg gs_ctrl6;
      reg gs_ctrl5;
      reg[2:0] gs_ctrl4;
      reg[1:0] gs_ctrl3;
      wire[3:0] Gaussian_Blur_Add2i6u2_4_28_out1;
      wire[2:0] Gaussian_Blur_Add2i3u2_4_32_out1;
      wire[3:0] Gaussian_Blur_Add2i6u2_4_31_out1;
      wire[3:0] Gaussian_Blur_Add2u2Mul2i3u2_4_36_out1;
      reg[3:0] gs_ctrl2;
      wire[3:0] Gaussian_Blur_Add2u2Mul2i3u2_4_9_out1;
      wire[3:0] Gaussian_Blur_Add2u2Mul2i3u2_4_6_out1;
      reg[1:0] Gaussian_Blur_Add2u2Mul2i3u2_4_6_in1;
      reg[1:0] Gaussian_Blur_Add2u2Mul2i3u2_4_6_in2;
      reg gs_ctrl0;
      /*signed*/wire[8:0] Gaussian_Blur_Add2Mul2s9u8s9_4_41_out1;
      reg[8:0] s_reg_54;
      /*signed*/wire[8:0] Gaussian_Blur_Add2Mul2s9u8s9_4_40_out1;
      reg[8:0] s_reg_53;
      /*signed*/wire[8:0] Gaussian_Blur_Add2Mul2s9u8s9_4_39_out1;
      reg[8:0] s_reg_52;
      reg[31:0] s_reg_51;
      /*signed*/wire[9:0] Gaussian_Blur_Add2i1u8_4_48_out1;
      /*signed*/wire[9:0] Gaussian_Blur_Add2i1u8_4_30_out1;
      wire Gaussian_Blur_Lti3s4_4_10_out1;
      /*signed*/wire[3:0] Gaussian_Blur_Add2i1u2_4_34_out1;
      /*signed*/wire[3:0] Gaussian_Blur_Add2i1u2_4_7_out1;
      /*signed*/wire[3:0] Gaussian_Blur_Add2i1u2_4_33_out1;
      /*signed*/wire[9:0] Gaussian_Blur_Add2i1u8_4_26_out1;
      reg[1:0] Gaussian_Blur_N_Mux_2_2_35_4_24_out1;
      /*signed*/wire[3:0] Gaussian_Blur_Add2i1u2_4_8_out1;
      /*signed*/reg[1:0] s_reg_47_slice1;
      /*signed*/wire[31:0] Gaussian_Blur_Add2i1s32_4_49_out1;
      /*signed*/wire[3:0] Gaussian_Blur_Add2i1u2_4_37_out1;
      reg[3:0] s_reg_48;
      /*signed*/reg[1:0] s_reg_46_slice1;
      wire Gaussian_Blur_And_1Ux1U_1U_4_50_out1;
      wire[2:0] Gaussian_Blur_gen_busy_r_4_52_out1;
      wire Gaussian_Blur_Not_1U_1U_1_3_out1;
      wire Gaussian_Blur_Lti3s4_4_38_out1;
      wire Gaussian_Blur_Lti3s4_4_42_out1;
      reg o_result_m_req_m_trig_req;
      reg[9:0] s_reg_50;
      /*signed*/wire[3:0] Gaussian_Blur_Add2i1u2_4_17_out1;
      wire Gaussian_Blur_And_1Ux1U_1U_4_20_out1;
      /*signed*/wire[3:0] Gaussian_Blur_Add2i1u2_4_14_out1;
      /*signed*/wire[9:0] Gaussian_Blur_Add2i1u8_4_13_out1;
      reg s_reg_49;
      wire Gaussian_Blur_Lti3s4_4_11_out1;
      reg[8:0] global_state;
      reg i_rgb_m_busy_req_0;
      reg[10:0] Gaussian_Blur_N_Mux_11_2_36_4_47_out1;
      /*signed*/reg[10:0] o_result_data_slice;
      reg stall0;
      reg[8:0] filter_DIN;
      reg filter_CE;
      reg filter_RW;
      reg[3:0] filter_in1;
      wire[8:0] filter_out1;
      wire[3:0] filter_const_in1;
      wire[8:0] filter_const_out1;
      reg[24:0] rgb_buffer_DIN;
      reg rgb_buffer_CE;
      reg rgb_buffer_RW;
      reg[9:0] rgb_buffer_in1;
      wire[24:0] rgb_buffer_out1;

         Gaussian_Blur_RAM_774X25_3 rgb_buffer(
                                      .DIN( rgb_buffer_DIN ),
                                      .CE( rgb_buffer_CE ),
                                      .RW( rgb_buffer_RW ),
                                      .in1( rgb_buffer_in1 ),
                                      .out1( rgb_buffer_out1 ),
                                      .clk( i_clk )
                                    );

         Gaussian_Blur_ROM_9X9_filter_const filter_const(
                                              .in1( filter_const_in1 ),
                                              .out1( filter_const_out1 ),
                                              .clk( i_clk )
                                            );

         Gaussian_Blur_RAM_9X9_2 filter(
                                   .DIN( filter_DIN ),
                                   .CE( filter_CE ),
                                   .RW( filter_RW ),
                                   .in1( filter_in1 ),
                                   .out1( filter_out1 ),
                                   .clk( i_clk )
                                 );

         // resource: regr_en_11
         always @(posedge i_clk)
          begin :drive_o_result_data_slice
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  o_result_data_slice <= Gaussian_Blur_N_Mux_11_2_36_4_47_out1;
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         // resource: regr_en_ss_1
         always @(posedge i_clk)
          begin :drive_i_rgb_m_busy_req_0
            if (i_rst == 1'b0) begin
               i_rgb_m_busy_req_0 <= 1'd1;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        9'd002:                         begin
                           if (!s_reg_49 && !Gaussian_Blur_Lti3s4_4_11_out1) begin
                              i_rgb_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                        9'd003, 9'd273:                         begin
                           i_rgb_m_busy_req_0 <= 1'd1;
                        end
                        
                        9'd004:                         begin
                           case (Gaussian_Blur_Add2i1u8_4_13_out1) 

                              10'd0256:                               begin
                                 if (4'd03 != Gaussian_Blur_Add2i1u2_4_14_out1) begin
                                    i_rgb_m_busy_req_0 <= 1'd0;
                                 end
                              end
                              
                              default:                               begin
                                 i_rgb_m_busy_req_0 <= 1'd0;
                              end
                              
                           endcase

                        end
                        
                        9'd264:                         begin
                           if (4'd03 == Gaussian_Blur_Add2i1u2_4_17_out1 && Gaussian_Blur_And_1Ux1U_1U_4_20_out1) begin
                              i_rgb_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                        9'd274:                         begin
                           if (10'd0256 != s_reg_50) begin
                              i_rgb_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                        9'd294:                         begin
                           if (10'd0256 == s_reg_50 && Gaussian_Blur_And_1Ux1U_1U_4_20_out1) begin
                              i_rgb_m_busy_req_0 <= 1'd0;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_m_req_m_trig_req
            if (i_rst == 1'b0) begin
               o_result_m_req_m_trig_req <= 1'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        9'd292:                         begin
                           if (!Gaussian_Blur_Lti3s4_4_38_out1 && !Gaussian_Blur_Lti3s4_4_42_out1) begin
                              o_result_m_req_m_trig_req <= Gaussian_Blur_Not_1U_1U_1_3_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx3i1c
         always @(Gaussian_Blur_And_1Ux1U_1U_4_50_out1 or Gaussian_Blur_gen_busy_r_4_52_out1[0] or global_state)
          begin :drive_stall0
            case (global_state) 

               9'd003, 9'd273:                begin
                  stall0 = Gaussian_Blur_gen_busy_r_4_52_out1[0];
               end
               
               9'd293:                begin
                  stall0 = Gaussian_Blur_And_1Ux1U_1U_4_50_out1;
               end
               
               default:                begin
                  stall0 = 1'b0;
               end
               
            endcase

         end

         // resource: mux_2bx4i1c
         // resource: regr_en_2
         always @(posedge i_clk)
          begin :drive_s_reg_46_slice_slice
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     9'd000, 9'd262, 9'd272, 9'd291:                      begin
                        s_reg_46_slice1 <= 2'd0;
                     end
                     
                     9'd002:                      begin
                        if (s_reg_49) begin
                        end
                        else begin
                           s_reg_46_slice1 <= s_reg_48[1:0];
                        end
                     end
                     
                     9'd264:                      begin
                        case (Gaussian_Blur_Add2i1u2_4_17_out1) 

                           4'd03:                            begin
                              s_reg_46_slice1 <= 2'd0;
                           end
                           
                           default:                            begin
                              s_reg_46_slice1 <= Gaussian_Blur_Add2i1u2_4_17_out1[1:0];
                           end
                           
                        endcase

                     end
                     
                     9'd292:                      begin
                        if (Gaussian_Blur_Lti3s4_4_38_out1) begin
                           s_reg_46_slice1 <= Gaussian_Blur_Add2i1u2_4_37_out1[1:0];
                        end
                        else begin
                           s_reg_46_slice1 <= 2'd0;
                        end
                     end
                     
                     9'd294:                      begin
                        /* state322 */
                        case (s_reg_50) 

                           10'd0256:                            begin
                              if (32'd0000000254 != Gaussian_Blur_Add2i1s32_4_49_out1) begin
                                 s_reg_46_slice1 <= 2'd0;
                              end
                           end
                           
                           default:                            begin
                              s_reg_46_slice1 <= 2'd0;
                           end
                           
                        endcase

                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_2bx7i2c
         // resource: regr_en_2
         always @(posedge i_clk)
          begin :drive_s_reg_47_slice_slice
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     9'd000, 9'd291:                      begin
                        s_reg_47_slice1 <= 2'd0;
                     end
                     
                     9'd001:                      begin
                        s_reg_47_slice1 <= Gaussian_Blur_Add2i1u2_4_8_out1[1:0];
                     end
                     
                     9'd002:                      begin
                        if (s_reg_49) begin
                        end
                        else begin
                           if (Gaussian_Blur_Lti3s4_4_11_out1) begin
                              s_reg_47_slice1 <= 2'd0;
                           end
                           else begin
                              s_reg_47_slice1 <= 2'd1;
                           end
                        end
                     end
                     
                     9'd004:                      begin
                        if (10'd0256 == Gaussian_Blur_Add2i1u8_4_13_out1) begin
                           if (4'd03 != Gaussian_Blur_Add2i1u2_4_14_out1) begin
                              s_reg_47_slice1 <= Gaussian_Blur_Add2i1u2_4_14_out1[1:0];
                           end
                        end
                     end
                     
                     9'd264:                      begin
                        if (Gaussian_Blur_And_1Ux1U_1U_4_20_out1) begin
                           s_reg_47_slice1 <= Gaussian_Blur_N_Mux_2_2_35_4_24_out1;
                        end
                        else begin
                           s_reg_47_slice1 <= 2'd0;
                        end
                     end
                     
                     9'd265:                      begin
                        if (10'd0256 == Gaussian_Blur_Add2i1u8_4_26_out1) begin
                           s_reg_47_slice1 <= 2'd0;
                        end
                     end
                     
                     9'd272:                      begin
                        case (Gaussian_Blur_Add2i1u2_4_33_out1) 

                           4'd03:                            begin
                              s_reg_47_slice1 <= 2'd0;
                           end
                           
                           default:                            begin
                              s_reg_47_slice1 <= Gaussian_Blur_Add2i1u2_4_33_out1[1:0];
                           end
                           
                        endcase

                     end
                     
                     9'd292:                      begin
                        if (Gaussian_Blur_Lti3s4_4_38_out1) begin
                        end
                        else begin
                           s_reg_47_slice1 <= s_reg_48[1:0];
                        end
                     end
                     
                     9'd294:                      begin
                        /* state322 */
                        case (s_reg_50) 

                           10'd0256:                            begin
                              if (Gaussian_Blur_And_1Ux1U_1U_4_20_out1) begin
                                 s_reg_47_slice1 <= Gaussian_Blur_N_Mux_2_2_35_4_24_out1;
                              end
                              else begin
                                 case (Gaussian_Blur_Add2i1s32_4_49_out1) 

                                    32'd0000000254:                                     begin
                                       s_reg_47_slice1 <= Gaussian_Blur_N_Mux_2_2_35_4_24_out1;
                                    end
                                    
                                    default:                                     begin
                                       s_reg_47_slice1 <= 2'd0;
                                    end
                                    
                                 endcase

                              end
                           end
                           
                           default:                            begin
                              s_reg_47_slice1 <= 2'd0;
                           end
                           
                        endcase

                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_4bx2i0c
         // resource: regr_en_4
         always @(posedge i_clk)
          begin :drive_s_reg_48
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     9'd001:                      begin
                        s_reg_48 <= Gaussian_Blur_Add2i1u2_4_7_out1;
                     end
                     
                     9'd264, 9'd272, 9'd291:                      begin
                        s_reg_48 <= Gaussian_Blur_Add2i1u2_4_34_out1;
                     end
                     
                     9'd292:                      begin
                        if (Gaussian_Blur_Lti3s4_4_38_out1) begin
                        end
                        else begin
                           s_reg_48 <= Gaussian_Blur_Add2i1u2_4_34_out1;
                        end
                     end
                     
                     9'd294:                      begin
                        /* state322 */
                        case (s_reg_50) 

                           10'd0256:                            begin
                              if (32'd0000000254 != Gaussian_Blur_Add2i1s32_4_49_out1) begin
                                 s_reg_48 <= Gaussian_Blur_Add2i1u2_4_34_out1;
                              end
                           end
                           
                           default:                            begin
                              s_reg_48 <= Gaussian_Blur_Add2i1u2_4_34_out1;
                           end
                           
                        endcase

                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: regr_en_1
         always @(posedge i_clk)
          begin :drive_s_reg_49
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  s_reg_49 <= Gaussian_Blur_Lti3s4_4_10_out1;
               end
               
            endcase

         end

         // resource: mux_10bx5i1c
         // resource: regr_en_10
         always @(posedge i_clk)
          begin :drive_s_reg_50
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     9'd002, 9'd264, 9'd272, 9'd291:                      begin
                        s_reg_50 <= 10'd0000;
                     end
                     
                     9'd004:                      begin
                        case (Gaussian_Blur_Add2i1u8_4_13_out1) 

                           10'd0256:                            begin
                              if (4'd03 != Gaussian_Blur_Add2i1u2_4_14_out1) begin
                                 s_reg_50 <= 10'd0000;
                              end
                           end
                           
                           default:                            begin
                              s_reg_50 <= Gaussian_Blur_Add2i1u8_4_13_out1;
                           end
                           
                        endcase

                     end
                     
                     9'd265:                      begin
                        if (10'd0256 != Gaussian_Blur_Add2i1u8_4_26_out1) begin
                           /* state281 */
                           s_reg_50 <= Gaussian_Blur_Add2i1u8_4_26_out1;
                        end
                     end
                     
                     9'd273:                      begin
                        s_reg_50 <= Gaussian_Blur_Add2i1u8_4_30_out1;
                     end
                     
                     9'd293:                      begin
                        s_reg_50 <= Gaussian_Blur_Add2i1u8_4_48_out1;
                     end
                     
                     9'd294:                      begin
                        if (10'd0256 == s_reg_50) begin
                           s_reg_50 <= 10'd0000;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_32bx2i1c
         // resource: regr_en_32
         always @(posedge i_clk)
          begin :drive_s_reg_51
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     9'd264:                      begin
                        s_reg_51 <= 32'd4294967295;
                     end
                     
                     9'd294:                      begin
                        if (10'd0256 == s_reg_50) begin
                           s_reg_51 <= Gaussian_Blur_Add2i1s32_4_49_out1;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_9bx3i1c
         // resource: regr_en_9
         always @(posedge i_clk)
          begin :drive_s_reg_52
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     9'd264, 9'd272, 9'd291:                      begin
                        s_reg_52 <= 9'd000;
                     end
                     
                     9'd267, 9'd274, 9'd280, 9'd286:                      begin
                        s_reg_52 <= filter_out1;
                     end
                     
                     9'd292:                      begin
                        s_reg_52 <= Gaussian_Blur_Add2Mul2s9u8s9_4_39_out1;
                     end
                     
                     9'd294:                      begin
                        /* state322 */
                        case (s_reg_50) 

                           10'd0256:                            begin
                              if (32'd0000000254 != Gaussian_Blur_Add2i1s32_4_49_out1) begin
                                 s_reg_52 <= 9'd000;
                              end
                           end
                           
                           default:                            begin
                              s_reg_52 <= 9'd000;
                           end
                           
                        endcase

                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_9bx2i1c
         // resource: regr_en_9
         always @(posedge i_clk)
          begin :drive_s_reg_53
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     9'd264, 9'd272, 9'd291:                      begin
                        s_reg_53 <= 9'd000;
                     end
                     
                     9'd292:                      begin
                        s_reg_53 <= Gaussian_Blur_Add2Mul2s9u8s9_4_40_out1;
                     end
                     
                     9'd294:                      begin
                        /* state322 */
                        case (s_reg_50) 

                           10'd0256:                            begin
                              if (32'd0000000254 != Gaussian_Blur_Add2i1s32_4_49_out1) begin
                                 s_reg_53 <= 9'd000;
                              end
                           end
                           
                           default:                            begin
                              s_reg_53 <= 9'd000;
                           end
                           
                        endcase

                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_9bx2i1c
         // resource: regr_en_9
         always @(posedge i_clk)
          begin :drive_s_reg_54
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     9'd264, 9'd272, 9'd291:                      begin
                        s_reg_54 <= 9'd000;
                     end
                     
                     9'd292:                      begin
                        s_reg_54 <= Gaussian_Blur_Add2Mul2s9u8s9_4_41_out1;
                     end
                     
                     9'd294:                      begin
                        /* state322 */
                        case (s_reg_50) 

                           10'd0256:                            begin
                              if (32'd0000000254 != Gaussian_Blur_Add2i1s32_4_49_out1) begin
                                 s_reg_54 <= 9'd000;
                              end
                           end
                           
                           default:                            begin
                              s_reg_54 <= 9'd000;
                           end
                           
                        endcase

                     end
                     
                  endcase

               end
               
            endcase

         end

         // resource: mux_2bx3i1c
         always @(s_reg_48[1:0] or s_reg_49 or gs_ctrl0 or s_reg_46_slice1)
          begin :drive_Gaussian_Blur_Add2u2Mul2i3u2_4_6_in2
            if (gs_ctrl0) begin
               if (s_reg_49) begin
                  Gaussian_Blur_Add2u2Mul2i3u2_4_6_in2 = s_reg_46_slice1;
               end
               else begin
                  Gaussian_Blur_Add2u2Mul2i3u2_4_6_in2 = s_reg_48[1:0];
               end
            end
            else begin
               Gaussian_Blur_Add2u2Mul2i3u2_4_6_in2 = 2'd0;
            end
         end

         // resource: mux_2bx2i1c
         always @(s_reg_49 or gs_ctrl0 or s_reg_47_slice1)
          begin :drive_Gaussian_Blur_Add2u2Mul2i3u2_4_6_in1
            if (gs_ctrl0) begin
               if (s_reg_49) begin
                  Gaussian_Blur_Add2u2Mul2i3u2_4_6_in1 = s_reg_47_slice1;
               end
               else begin
                  Gaussian_Blur_Add2u2Mul2i3u2_4_6_in1 = 2'd0;
               end
            end
            else begin
               Gaussian_Blur_Add2u2Mul2i3u2_4_6_in1 = 2'd0;
            end
         end

         // resource: Gaussian_Blur_Add2u2Mul2i3u2_4  instance: Gaussian_Blur_Add2u2Mul2i3u2_4_6
         assign Gaussian_Blur_Add2u2Mul2i3u2_4_6_out1 = {2'b00, Gaussian_Blur_Add2u2Mul2i3u2_4_6_in2}*4'd03 + {2'b00, Gaussian_Blur_Add2u2Mul2i3u2_4_6_in1};

         // resource: Gaussian_Blur_Add2i1u2_4  instance: Gaussian_Blur_Add2i1u2_4_7
         assign Gaussian_Blur_Add2i1u2_4_7_out1 = {2'b00, s_reg_46_slice1} + 4'd01;

         // resource: Gaussian_Blur_Add2i1u2_4  instance: Gaussian_Blur_Add2i1u2_4_8
         assign Gaussian_Blur_Add2i1u2_4_8_out1 = {2'b00, s_reg_47_slice1} + 4'd01;

         // resource: Gaussian_Blur_Add2u2Mul2i3u2_4  instance: Gaussian_Blur_Add2u2Mul2i3u2_4_9
         assign Gaussian_Blur_Add2u2Mul2i3u2_4_9_out1 = {2'b00, s_reg_46_slice1}*4'd03 + {2'b00, s_reg_47_slice1};

         // resource: Gaussian_Blur_Lti3s4_4  instance: Gaussian_Blur_Lti3s4_4_10
         assign Gaussian_Blur_Lti3s4_4_10_out1 = Gaussian_Blur_Add2i1u2_4_8_out1[3] ^ Gaussian_Blur_Add2i1u2_4_8_out1 < 4'd03;

         // instance: drive_filter_const_in1
         assign filter_const_in1 = Gaussian_Blur_Add2u2Mul2i3u2_4_6_out1;

         // resource: mux_4bx15i9c
         always @(Gaussian_Blur_Add2u2Mul2i3u2_4_9_out1 or Gaussian_Blur_Add2i6u2_4_28_out1 or Gaussian_Blur_Add2i3u2_4_32_out1 or Gaussian_Blur_Add2i6u2_4_31_out1 or Gaussian_Blur_Add2i1u2_4_33_out1 or Gaussian_Blur_Add2u2Mul2i3u2_4_36_out1 or gs_ctrl2 or s_reg_47_slice1)
          begin :drive_filter_in1
            case (gs_ctrl2) 

               4'd01:                begin
                  filter_in1 = Gaussian_Blur_Add2u2Mul2i3u2_4_36_out1;
               end
               
               4'd02:                begin
                  filter_in1 = Gaussian_Blur_Add2i6u2_4_28_out1;
               end
               
               4'd03:                begin
                  filter_in1 = {1'b0, Gaussian_Blur_Add2i3u2_4_32_out1};
               end
               
               4'd04:                begin
                  filter_in1 = Gaussian_Blur_Add2i6u2_4_31_out1;
               end
               
               4'd05:                begin
                  filter_in1 = {2'b00, s_reg_47_slice1};
               end
               
               4'd06:                begin
                  case (Gaussian_Blur_Add2i1u2_4_33_out1) 

                     4'd03:                      begin
                        filter_in1 = Gaussian_Blur_Add2u2Mul2i3u2_4_36_out1;
                     end
                     
                     default:                      begin
                        filter_in1 = Gaussian_Blur_Add2i6u2_4_28_out1;
                     end
                     
                  endcase

               end
               
               4'd07:                begin
                  filter_in1 = 4'd06;
               end
               
               4'd08:                begin
                  filter_in1 = 4'd03;
               end
               
               4'd09:                begin
                  filter_in1 = 4'd00;
               end
               
               4'd10:                begin
                  filter_in1 = 4'd07;
               end
               
               4'd11:                begin
                  filter_in1 = 4'd04;
               end
               
               4'd12:                begin
                  filter_in1 = 4'd01;
               end
               
               4'd13:                begin
                  filter_in1 = 4'd08;
               end
               
               4'd14:                begin
                  filter_in1 = 4'd05;
               end
               
               4'd15:                begin
                  filter_in1 = 4'd02;
               end
               
               default:                begin
                  filter_in1 = Gaussian_Blur_Add2u2Mul2i3u2_4_9_out1;
               end
               
            endcase

         end

         // resource: mux_9bx3i0c
         always @(s_reg_52 or filter_const_out1 or filter_out1 or gs_ctrl3)
          begin :drive_filter_DIN
            case (gs_ctrl3) 

               2'd1:                begin
                  filter_DIN = filter_out1;
               end
               
               2'd2:                begin
                  filter_DIN = s_reg_52;
               end
               
               default:                begin
                  filter_DIN = filter_const_out1;
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         always @(stall0 or s_reg_50 or Gaussian_Blur_Add2i1u2_4_17_out1 or Gaussian_Blur_And_1Ux1U_1U_4_20_out1 or Gaussian_Blur_Add2i1u8_4_26_out1 or Gaussian_Blur_Lti3s4_4_38_out1 or Gaussian_Blur_Lti3s4_4_42_out1 or Gaussian_Blur_Add2i1s32_4_49_out1 or gs_ctrl4)
          begin :drive_filter_CE
            if (stall0) begin
               filter_CE = 1'b0;
            end
            else begin
               case (gs_ctrl4) 

                  3'd1:                   begin
                     filter_CE = 1'b1;
                  end
                  
                  3'd2:                   begin
                     if (4'd03 == Gaussian_Blur_Add2i1u2_4_17_out1 && !Gaussian_Blur_And_1Ux1U_1U_4_20_out1) begin
                        filter_CE = 1'b1;
                     end
                     else begin
                        filter_CE = 1'b0;
                     end
                  end
                  
                  3'd3:                   begin
                     if (10'd0256 == Gaussian_Blur_Add2i1u8_4_26_out1) begin
                        filter_CE = 1'b1;
                     end
                     else begin
                        filter_CE = 1'b0;
                     end
                  end
                  
                  3'd4:                   begin
                     if (10'd0256 == s_reg_50) begin
                        filter_CE = 1'b1;
                     end
                     else begin
                        filter_CE = 1'b0;
                     end
                  end
                  
                  3'd5:                   begin
                     if (Gaussian_Blur_Lti3s4_4_38_out1) begin
                        filter_CE = 1'b1;
                     end
                     else begin
                        if (Gaussian_Blur_Lti3s4_4_42_out1) begin
                           filter_CE = 1'b1;
                        end
                        else begin
                           filter_CE = 1'b0;
                        end
                     end
                  end
                  
                  3'd6:                   begin
                     /* state322 */
                     case (s_reg_50) 

                        10'd0256:                         begin
                           if (!Gaussian_Blur_And_1Ux1U_1U_4_20_out1 && 32'd0000000254 != Gaussian_Blur_Add2i1s32_4_49_out1) begin
                              filter_CE = 1'b1;
                           end
                           else begin
                              filter_CE = 1'b0;
                           end
                        end
                        
                        default:                         begin
                           filter_CE = 1'b1;
                        end
                        
                     endcase

                  end
                  
                  default:                   begin
                     filter_CE = 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         always @(stall0 or gs_ctrl5)
          begin :drive_filter_RW
            if (stall0) begin
               filter_RW = 1'b0;
            end
            else begin
               if (gs_ctrl5) begin
                  filter_RW = 1'b1;
               end
               else begin
                  filter_RW = 1'b0;
               end
            end
         end

         // resource: Gaussian_Blur_Lti3s4_4  instance: Gaussian_Blur_Lti3s4_4_11
         assign Gaussian_Blur_Lti3s4_4_11_out1 = s_reg_48[3] ^ s_reg_48 < 4'd03;

         // resource: mux_2bx2i0c
         always @(Gaussian_Blur_N_Mux_2_2_35_4_24_out1 or gs_ctrl6 or s_reg_47_slice1)
          begin :drive_Gaussian_Blur_Add2Add2i1u8Mul2i258u2_1_12_in2
            if (gs_ctrl6) begin
               Gaussian_Blur_Add2Add2i1u8Mul2i258u2_1_12_in2 = Gaussian_Blur_N_Mux_2_2_35_4_24_out1;
            end
            else begin
               Gaussian_Blur_Add2Add2i1u8Mul2i258u2_1_12_in2 = s_reg_47_slice1;
            end
         end

         // resource: mux_8bx2i1c
         always @(s_reg_50[7:0] or gs_ctrl6)
          begin :drive_Gaussian_Blur_Add2Add2i1u8Mul2i258u2_1_12_in1
            if (gs_ctrl6) begin
               Gaussian_Blur_Add2Add2i1u8Mul2i258u2_1_12_in1 = 8'd000;
            end
            else begin
               Gaussian_Blur_Add2Add2i1u8Mul2i258u2_1_12_in1 = s_reg_50[7:0];
            end
         end

         // resource: Gaussian_Blur_Add2Add2i1u8Mul2i258u2_1  instance: Gaussian_Blur_Add2Add2i1u8Mul2i258u2_1_12
         assign Gaussian_Blur_Add2Add2i1u8Mul2i258u2_1_12_out1 = {8'b00000000, Gaussian_Blur_Add2Add2i1u8Mul2i258u2_1_12_in2}*10'd0258 + ({2'b00, Gaussian_Blur_Add2Add2i1u8Mul2i258u2_1_12_in1} + 10'd0001);

         // resource: mux_10bx262i258c
         always @(s_reg_50 or Gaussian_Blur_Add2Add2i1u8Mul2i258u2_1_12_out1 or Gaussian_Blur_Mul2i258u2_4_15_out1 or Gaussian_Blur_Add2i257Mul2i258u2_4_16_out1 or Gaussian_Blur_Add2i1u2_4_17_out1 or Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_out1 or Gaussian_Blur_Add2i1s32_4_49_out1 or global_state)
          begin :drive_rgb_buffer_in1
            case (global_state) 

               9'd004:                begin
                  /* state13 */
                  rgb_buffer_in1 = 10'd0000;
               end
               
               9'd005:                begin
                  rgb_buffer_in1 = 10'd0001;
               end
               
               9'd006:                begin
                  rgb_buffer_in1 = 10'd0002;
               end
               
               9'd007:                begin
                  rgb_buffer_in1 = 10'd0003;
               end
               
               9'd008:                begin
                  rgb_buffer_in1 = 10'd0004;
               end
               
               9'd009:                begin
                  rgb_buffer_in1 = 10'd0005;
               end
               
               9'd010:                begin
                  rgb_buffer_in1 = 10'd0006;
               end
               
               9'd011:                begin
                  rgb_buffer_in1 = 10'd0007;
               end
               
               9'd012:                begin
                  rgb_buffer_in1 = 10'd0008;
               end
               
               9'd013:                begin
                  rgb_buffer_in1 = 10'd0009;
               end
               
               9'd014:                begin
                  rgb_buffer_in1 = 10'd0010;
               end
               
               9'd015:                begin
                  rgb_buffer_in1 = 10'd0011;
               end
               
               9'd016:                begin
                  rgb_buffer_in1 = 10'd0012;
               end
               
               9'd017:                begin
                  rgb_buffer_in1 = 10'd0013;
               end
               
               9'd018:                begin
                  rgb_buffer_in1 = 10'd0014;
               end
               
               9'd019:                begin
                  rgb_buffer_in1 = 10'd0015;
               end
               
               9'd020:                begin
                  rgb_buffer_in1 = 10'd0016;
               end
               
               9'd021:                begin
                  rgb_buffer_in1 = 10'd0017;
               end
               
               9'd022:                begin
                  rgb_buffer_in1 = 10'd0018;
               end
               
               9'd023:                begin
                  rgb_buffer_in1 = 10'd0019;
               end
               
               9'd024:                begin
                  rgb_buffer_in1 = 10'd0020;
               end
               
               9'd025:                begin
                  rgb_buffer_in1 = 10'd0021;
               end
               
               9'd026:                begin
                  rgb_buffer_in1 = 10'd0022;
               end
               
               9'd027:                begin
                  rgb_buffer_in1 = 10'd0023;
               end
               
               9'd028:                begin
                  rgb_buffer_in1 = 10'd0024;
               end
               
               9'd029:                begin
                  rgb_buffer_in1 = 10'd0025;
               end
               
               9'd030:                begin
                  rgb_buffer_in1 = 10'd0026;
               end
               
               9'd031:                begin
                  rgb_buffer_in1 = 10'd0027;
               end
               
               9'd032:                begin
                  rgb_buffer_in1 = 10'd0028;
               end
               
               9'd033:                begin
                  rgb_buffer_in1 = 10'd0029;
               end
               
               9'd034:                begin
                  rgb_buffer_in1 = 10'd0030;
               end
               
               9'd035:                begin
                  rgb_buffer_in1 = 10'd0031;
               end
               
               9'd036:                begin
                  rgb_buffer_in1 = 10'd0032;
               end
               
               9'd037:                begin
                  rgb_buffer_in1 = 10'd0033;
               end
               
               9'd038:                begin
                  rgb_buffer_in1 = 10'd0034;
               end
               
               9'd039:                begin
                  rgb_buffer_in1 = 10'd0035;
               end
               
               9'd040:                begin
                  rgb_buffer_in1 = 10'd0036;
               end
               
               9'd041:                begin
                  rgb_buffer_in1 = 10'd0037;
               end
               
               9'd042:                begin
                  rgb_buffer_in1 = 10'd0038;
               end
               
               9'd043:                begin
                  rgb_buffer_in1 = 10'd0039;
               end
               
               9'd044:                begin
                  rgb_buffer_in1 = 10'd0040;
               end
               
               9'd045:                begin
                  rgb_buffer_in1 = 10'd0041;
               end
               
               9'd046:                begin
                  rgb_buffer_in1 = 10'd0042;
               end
               
               9'd047:                begin
                  rgb_buffer_in1 = 10'd0043;
               end
               
               9'd048:                begin
                  rgb_buffer_in1 = 10'd0044;
               end
               
               9'd049:                begin
                  rgb_buffer_in1 = 10'd0045;
               end
               
               9'd050:                begin
                  rgb_buffer_in1 = 10'd0046;
               end
               
               9'd051:                begin
                  rgb_buffer_in1 = 10'd0047;
               end
               
               9'd052:                begin
                  rgb_buffer_in1 = 10'd0048;
               end
               
               9'd053:                begin
                  rgb_buffer_in1 = 10'd0049;
               end
               
               9'd054:                begin
                  rgb_buffer_in1 = 10'd0050;
               end
               
               9'd055:                begin
                  rgb_buffer_in1 = 10'd0051;
               end
               
               9'd056:                begin
                  rgb_buffer_in1 = 10'd0052;
               end
               
               9'd057:                begin
                  rgb_buffer_in1 = 10'd0053;
               end
               
               9'd058:                begin
                  rgb_buffer_in1 = 10'd0054;
               end
               
               9'd059:                begin
                  rgb_buffer_in1 = 10'd0055;
               end
               
               9'd060:                begin
                  rgb_buffer_in1 = 10'd0056;
               end
               
               9'd061:                begin
                  rgb_buffer_in1 = 10'd0057;
               end
               
               9'd062:                begin
                  rgb_buffer_in1 = 10'd0058;
               end
               
               9'd063:                begin
                  rgb_buffer_in1 = 10'd0059;
               end
               
               9'd064:                begin
                  rgb_buffer_in1 = 10'd0060;
               end
               
               9'd065:                begin
                  rgb_buffer_in1 = 10'd0061;
               end
               
               9'd066:                begin
                  rgb_buffer_in1 = 10'd0062;
               end
               
               9'd067:                begin
                  rgb_buffer_in1 = 10'd0063;
               end
               
               9'd068:                begin
                  rgb_buffer_in1 = 10'd0064;
               end
               
               9'd069:                begin
                  rgb_buffer_in1 = 10'd0065;
               end
               
               9'd070:                begin
                  rgb_buffer_in1 = 10'd0066;
               end
               
               9'd071:                begin
                  rgb_buffer_in1 = 10'd0067;
               end
               
               9'd072:                begin
                  rgb_buffer_in1 = 10'd0068;
               end
               
               9'd073:                begin
                  rgb_buffer_in1 = 10'd0069;
               end
               
               9'd074:                begin
                  rgb_buffer_in1 = 10'd0070;
               end
               
               9'd075:                begin
                  rgb_buffer_in1 = 10'd0071;
               end
               
               9'd076:                begin
                  rgb_buffer_in1 = 10'd0072;
               end
               
               9'd077:                begin
                  rgb_buffer_in1 = 10'd0073;
               end
               
               9'd078:                begin
                  rgb_buffer_in1 = 10'd0074;
               end
               
               9'd079:                begin
                  rgb_buffer_in1 = 10'd0075;
               end
               
               9'd080:                begin
                  rgb_buffer_in1 = 10'd0076;
               end
               
               9'd081:                begin
                  rgb_buffer_in1 = 10'd0077;
               end
               
               9'd082:                begin
                  rgb_buffer_in1 = 10'd0078;
               end
               
               9'd083:                begin
                  rgb_buffer_in1 = 10'd0079;
               end
               
               9'd084:                begin
                  rgb_buffer_in1 = 10'd0080;
               end
               
               9'd085:                begin
                  rgb_buffer_in1 = 10'd0081;
               end
               
               9'd086:                begin
                  rgb_buffer_in1 = 10'd0082;
               end
               
               9'd087:                begin
                  rgb_buffer_in1 = 10'd0083;
               end
               
               9'd088:                begin
                  rgb_buffer_in1 = 10'd0084;
               end
               
               9'd089:                begin
                  rgb_buffer_in1 = 10'd0085;
               end
               
               9'd090:                begin
                  rgb_buffer_in1 = 10'd0086;
               end
               
               9'd091:                begin
                  rgb_buffer_in1 = 10'd0087;
               end
               
               9'd092:                begin
                  rgb_buffer_in1 = 10'd0088;
               end
               
               9'd093:                begin
                  rgb_buffer_in1 = 10'd0089;
               end
               
               9'd094:                begin
                  rgb_buffer_in1 = 10'd0090;
               end
               
               9'd095:                begin
                  rgb_buffer_in1 = 10'd0091;
               end
               
               9'd096:                begin
                  rgb_buffer_in1 = 10'd0092;
               end
               
               9'd097:                begin
                  rgb_buffer_in1 = 10'd0093;
               end
               
               9'd098:                begin
                  rgb_buffer_in1 = 10'd0094;
               end
               
               9'd099:                begin
                  rgb_buffer_in1 = 10'd0095;
               end
               
               9'd100:                begin
                  rgb_buffer_in1 = 10'd0096;
               end
               
               9'd101:                begin
                  rgb_buffer_in1 = 10'd0097;
               end
               
               9'd102:                begin
                  rgb_buffer_in1 = 10'd0098;
               end
               
               9'd103:                begin
                  rgb_buffer_in1 = 10'd0099;
               end
               
               9'd104:                begin
                  rgb_buffer_in1 = 10'd0100;
               end
               
               9'd105:                begin
                  rgb_buffer_in1 = 10'd0101;
               end
               
               9'd106:                begin
                  rgb_buffer_in1 = 10'd0102;
               end
               
               9'd107:                begin
                  rgb_buffer_in1 = 10'd0103;
               end
               
               9'd108:                begin
                  rgb_buffer_in1 = 10'd0104;
               end
               
               9'd109:                begin
                  rgb_buffer_in1 = 10'd0105;
               end
               
               9'd110:                begin
                  rgb_buffer_in1 = 10'd0106;
               end
               
               9'd111:                begin
                  rgb_buffer_in1 = 10'd0107;
               end
               
               9'd112:                begin
                  rgb_buffer_in1 = 10'd0108;
               end
               
               9'd113:                begin
                  rgb_buffer_in1 = 10'd0109;
               end
               
               9'd114:                begin
                  rgb_buffer_in1 = 10'd0110;
               end
               
               9'd115:                begin
                  rgb_buffer_in1 = 10'd0111;
               end
               
               9'd116:                begin
                  rgb_buffer_in1 = 10'd0112;
               end
               
               9'd117:                begin
                  rgb_buffer_in1 = 10'd0113;
               end
               
               9'd118:                begin
                  rgb_buffer_in1 = 10'd0114;
               end
               
               9'd119:                begin
                  rgb_buffer_in1 = 10'd0115;
               end
               
               9'd120:                begin
                  rgb_buffer_in1 = 10'd0116;
               end
               
               9'd121:                begin
                  rgb_buffer_in1 = 10'd0117;
               end
               
               9'd122:                begin
                  rgb_buffer_in1 = 10'd0118;
               end
               
               9'd123:                begin
                  rgb_buffer_in1 = 10'd0119;
               end
               
               9'd124:                begin
                  rgb_buffer_in1 = 10'd0120;
               end
               
               9'd125:                begin
                  rgb_buffer_in1 = 10'd0121;
               end
               
               9'd126:                begin
                  rgb_buffer_in1 = 10'd0122;
               end
               
               9'd127:                begin
                  rgb_buffer_in1 = 10'd0123;
               end
               
               9'd128:                begin
                  rgb_buffer_in1 = 10'd0124;
               end
               
               9'd129:                begin
                  rgb_buffer_in1 = 10'd0125;
               end
               
               9'd130:                begin
                  rgb_buffer_in1 = 10'd0126;
               end
               
               9'd131:                begin
                  rgb_buffer_in1 = 10'd0127;
               end
               
               9'd132:                begin
                  rgb_buffer_in1 = 10'd0128;
               end
               
               9'd133:                begin
                  rgb_buffer_in1 = 10'd0129;
               end
               
               9'd134:                begin
                  rgb_buffer_in1 = 10'd0130;
               end
               
               9'd135:                begin
                  rgb_buffer_in1 = 10'd0131;
               end
               
               9'd136:                begin
                  rgb_buffer_in1 = 10'd0132;
               end
               
               9'd137:                begin
                  rgb_buffer_in1 = 10'd0133;
               end
               
               9'd138:                begin
                  rgb_buffer_in1 = 10'd0134;
               end
               
               9'd139:                begin
                  rgb_buffer_in1 = 10'd0135;
               end
               
               9'd140:                begin
                  rgb_buffer_in1 = 10'd0136;
               end
               
               9'd141:                begin
                  rgb_buffer_in1 = 10'd0137;
               end
               
               9'd142:                begin
                  rgb_buffer_in1 = 10'd0138;
               end
               
               9'd143:                begin
                  rgb_buffer_in1 = 10'd0139;
               end
               
               9'd144:                begin
                  rgb_buffer_in1 = 10'd0140;
               end
               
               9'd145:                begin
                  rgb_buffer_in1 = 10'd0141;
               end
               
               9'd146:                begin
                  rgb_buffer_in1 = 10'd0142;
               end
               
               9'd147:                begin
                  rgb_buffer_in1 = 10'd0143;
               end
               
               9'd148:                begin
                  rgb_buffer_in1 = 10'd0144;
               end
               
               9'd149:                begin
                  rgb_buffer_in1 = 10'd0145;
               end
               
               9'd150:                begin
                  rgb_buffer_in1 = 10'd0146;
               end
               
               9'd151:                begin
                  rgb_buffer_in1 = 10'd0147;
               end
               
               9'd152:                begin
                  rgb_buffer_in1 = 10'd0148;
               end
               
               9'd153:                begin
                  rgb_buffer_in1 = 10'd0149;
               end
               
               9'd154:                begin
                  rgb_buffer_in1 = 10'd0150;
               end
               
               9'd155:                begin
                  rgb_buffer_in1 = 10'd0151;
               end
               
               9'd156:                begin
                  rgb_buffer_in1 = 10'd0152;
               end
               
               9'd157:                begin
                  rgb_buffer_in1 = 10'd0153;
               end
               
               9'd158:                begin
                  rgb_buffer_in1 = 10'd0154;
               end
               
               9'd159:                begin
                  rgb_buffer_in1 = 10'd0155;
               end
               
               9'd160:                begin
                  rgb_buffer_in1 = 10'd0156;
               end
               
               9'd161:                begin
                  rgb_buffer_in1 = 10'd0157;
               end
               
               9'd162:                begin
                  rgb_buffer_in1 = 10'd0158;
               end
               
               9'd163:                begin
                  rgb_buffer_in1 = 10'd0159;
               end
               
               9'd164:                begin
                  rgb_buffer_in1 = 10'd0160;
               end
               
               9'd165:                begin
                  rgb_buffer_in1 = 10'd0161;
               end
               
               9'd166:                begin
                  rgb_buffer_in1 = 10'd0162;
               end
               
               9'd167:                begin
                  rgb_buffer_in1 = 10'd0163;
               end
               
               9'd168:                begin
                  rgb_buffer_in1 = 10'd0164;
               end
               
               9'd169:                begin
                  rgb_buffer_in1 = 10'd0165;
               end
               
               9'd170:                begin
                  rgb_buffer_in1 = 10'd0166;
               end
               
               9'd171:                begin
                  rgb_buffer_in1 = 10'd0167;
               end
               
               9'd172:                begin
                  rgb_buffer_in1 = 10'd0168;
               end
               
               9'd173:                begin
                  rgb_buffer_in1 = 10'd0169;
               end
               
               9'd174:                begin
                  rgb_buffer_in1 = 10'd0170;
               end
               
               9'd175:                begin
                  rgb_buffer_in1 = 10'd0171;
               end
               
               9'd176:                begin
                  rgb_buffer_in1 = 10'd0172;
               end
               
               9'd177:                begin
                  rgb_buffer_in1 = 10'd0173;
               end
               
               9'd178:                begin
                  rgb_buffer_in1 = 10'd0174;
               end
               
               9'd179:                begin
                  rgb_buffer_in1 = 10'd0175;
               end
               
               9'd180:                begin
                  rgb_buffer_in1 = 10'd0176;
               end
               
               9'd181:                begin
                  rgb_buffer_in1 = 10'd0177;
               end
               
               9'd182:                begin
                  rgb_buffer_in1 = 10'd0178;
               end
               
               9'd183:                begin
                  rgb_buffer_in1 = 10'd0179;
               end
               
               9'd184:                begin
                  rgb_buffer_in1 = 10'd0180;
               end
               
               9'd185:                begin
                  rgb_buffer_in1 = 10'd0181;
               end
               
               9'd186:                begin
                  rgb_buffer_in1 = 10'd0182;
               end
               
               9'd187:                begin
                  rgb_buffer_in1 = 10'd0183;
               end
               
               9'd188:                begin
                  rgb_buffer_in1 = 10'd0184;
               end
               
               9'd189:                begin
                  rgb_buffer_in1 = 10'd0185;
               end
               
               9'd190:                begin
                  rgb_buffer_in1 = 10'd0186;
               end
               
               9'd191:                begin
                  rgb_buffer_in1 = 10'd0187;
               end
               
               9'd192:                begin
                  rgb_buffer_in1 = 10'd0188;
               end
               
               9'd193:                begin
                  rgb_buffer_in1 = 10'd0189;
               end
               
               9'd194:                begin
                  rgb_buffer_in1 = 10'd0190;
               end
               
               9'd195:                begin
                  rgb_buffer_in1 = 10'd0191;
               end
               
               9'd196:                begin
                  rgb_buffer_in1 = 10'd0192;
               end
               
               9'd197:                begin
                  rgb_buffer_in1 = 10'd0193;
               end
               
               9'd198:                begin
                  rgb_buffer_in1 = 10'd0194;
               end
               
               9'd199:                begin
                  rgb_buffer_in1 = 10'd0195;
               end
               
               9'd200:                begin
                  rgb_buffer_in1 = 10'd0196;
               end
               
               9'd201:                begin
                  rgb_buffer_in1 = 10'd0197;
               end
               
               9'd202:                begin
                  rgb_buffer_in1 = 10'd0198;
               end
               
               9'd203:                begin
                  rgb_buffer_in1 = 10'd0199;
               end
               
               9'd204:                begin
                  rgb_buffer_in1 = 10'd0200;
               end
               
               9'd205:                begin
                  rgb_buffer_in1 = 10'd0201;
               end
               
               9'd206:                begin
                  rgb_buffer_in1 = 10'd0202;
               end
               
               9'd207:                begin
                  rgb_buffer_in1 = 10'd0203;
               end
               
               9'd208:                begin
                  rgb_buffer_in1 = 10'd0204;
               end
               
               9'd209:                begin
                  rgb_buffer_in1 = 10'd0205;
               end
               
               9'd210:                begin
                  rgb_buffer_in1 = 10'd0206;
               end
               
               9'd211:                begin
                  rgb_buffer_in1 = 10'd0207;
               end
               
               9'd212:                begin
                  rgb_buffer_in1 = 10'd0208;
               end
               
               9'd213:                begin
                  rgb_buffer_in1 = 10'd0209;
               end
               
               9'd214:                begin
                  rgb_buffer_in1 = 10'd0210;
               end
               
               9'd215:                begin
                  rgb_buffer_in1 = 10'd0211;
               end
               
               9'd216:                begin
                  rgb_buffer_in1 = 10'd0212;
               end
               
               9'd217:                begin
                  rgb_buffer_in1 = 10'd0213;
               end
               
               9'd218:                begin
                  rgb_buffer_in1 = 10'd0214;
               end
               
               9'd219:                begin
                  rgb_buffer_in1 = 10'd0215;
               end
               
               9'd220:                begin
                  rgb_buffer_in1 = 10'd0216;
               end
               
               9'd221:                begin
                  rgb_buffer_in1 = 10'd0217;
               end
               
               9'd222:                begin
                  rgb_buffer_in1 = 10'd0218;
               end
               
               9'd223:                begin
                  rgb_buffer_in1 = 10'd0219;
               end
               
               9'd224:                begin
                  rgb_buffer_in1 = 10'd0220;
               end
               
               9'd225:                begin
                  rgb_buffer_in1 = 10'd0221;
               end
               
               9'd226:                begin
                  rgb_buffer_in1 = 10'd0222;
               end
               
               9'd227:                begin
                  rgb_buffer_in1 = 10'd0223;
               end
               
               9'd228:                begin
                  rgb_buffer_in1 = 10'd0224;
               end
               
               9'd229:                begin
                  rgb_buffer_in1 = 10'd0225;
               end
               
               9'd230:                begin
                  rgb_buffer_in1 = 10'd0226;
               end
               
               9'd231:                begin
                  rgb_buffer_in1 = 10'd0227;
               end
               
               9'd232:                begin
                  rgb_buffer_in1 = 10'd0228;
               end
               
               9'd233:                begin
                  rgb_buffer_in1 = 10'd0229;
               end
               
               9'd234:                begin
                  rgb_buffer_in1 = 10'd0230;
               end
               
               9'd235:                begin
                  rgb_buffer_in1 = 10'd0231;
               end
               
               9'd236:                begin
                  rgb_buffer_in1 = 10'd0232;
               end
               
               9'd237:                begin
                  rgb_buffer_in1 = 10'd0233;
               end
               
               9'd238:                begin
                  rgb_buffer_in1 = 10'd0234;
               end
               
               9'd239:                begin
                  rgb_buffer_in1 = 10'd0235;
               end
               
               9'd240:                begin
                  rgb_buffer_in1 = 10'd0236;
               end
               
               9'd241:                begin
                  rgb_buffer_in1 = 10'd0237;
               end
               
               9'd242:                begin
                  rgb_buffer_in1 = 10'd0238;
               end
               
               9'd243:                begin
                  rgb_buffer_in1 = 10'd0239;
               end
               
               9'd244:                begin
                  rgb_buffer_in1 = 10'd0240;
               end
               
               9'd245:                begin
                  rgb_buffer_in1 = 10'd0241;
               end
               
               9'd246:                begin
                  rgb_buffer_in1 = 10'd0242;
               end
               
               9'd247:                begin
                  rgb_buffer_in1 = 10'd0243;
               end
               
               9'd248:                begin
                  rgb_buffer_in1 = 10'd0244;
               end
               
               9'd249:                begin
                  rgb_buffer_in1 = 10'd0245;
               end
               
               9'd250:                begin
                  rgb_buffer_in1 = 10'd0246;
               end
               
               9'd251:                begin
                  rgb_buffer_in1 = 10'd0247;
               end
               
               9'd252:                begin
                  rgb_buffer_in1 = 10'd0248;
               end
               
               9'd253:                begin
                  rgb_buffer_in1 = 10'd0249;
               end
               
               9'd254:                begin
                  rgb_buffer_in1 = 10'd0250;
               end
               
               9'd255:                begin
                  rgb_buffer_in1 = 10'd0251;
               end
               
               9'd256:                begin
                  rgb_buffer_in1 = 10'd0252;
               end
               
               9'd257:                begin
                  rgb_buffer_in1 = 10'd0253;
               end
               
               9'd258:                begin
                  rgb_buffer_in1 = 10'd0254;
               end
               
               9'd259:                begin
                  rgb_buffer_in1 = 10'd0255;
               end
               
               9'd260:                begin
                  rgb_buffer_in1 = 10'd0256;
               end
               
               9'd261:                begin
                  rgb_buffer_in1 = 10'd0257;
               end
               
               9'd262:                begin
                  rgb_buffer_in1 = Gaussian_Blur_Mul2i258u2_4_15_out1;
               end
               
               9'd263:                begin
                  rgb_buffer_in1 = Gaussian_Blur_Add2i257Mul2i258u2_4_16_out1;
               end
               
               9'd264:                begin
                  case (Gaussian_Blur_Add2i1u2_4_17_out1) 

                     4'd03:                      begin
                        rgb_buffer_in1 = Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_out1;
                     end
                     
                     default:                      begin
                        rgb_buffer_in1 = Gaussian_Blur_Mul2i258u2_4_15_out1;
                     end
                     
                  endcase

               end
               
               9'd272, 9'd291, 9'd292:                begin
                  rgb_buffer_in1 = Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_out1;
               end
               
               9'd294:                begin
                  /* state322 */
                  case (s_reg_50) 

                     10'd0256:                      begin
                        case (Gaussian_Blur_Add2i1s32_4_49_out1) 

                           32'd0000000254:                            begin
                              rgb_buffer_in1 = Gaussian_Blur_Add2Add2i1u8Mul2i258u2_1_12_out1;
                           end
                           
                           default:                            begin
                              rgb_buffer_in1 = Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_out1;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        rgb_buffer_in1 = Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_out1;
                     end
                     
                  endcase

               end
               
               default:                begin
                  rgb_buffer_in1 = Gaussian_Blur_Add2Add2i1u8Mul2i258u2_1_12_out1;
               end
               
            endcase

         end

         // resource: mux_25bx2i1c
         always @(i_rgb_data or gs_ctrl8)
          begin :drive_rgb_buffer_DIN
            if (gs_ctrl8) begin
               rgb_buffer_DIN = 25'd00000000;
            end
            else begin
               rgb_buffer_DIN = i_rgb_data;
            end
         end

         // resource: mux_1bx2i2c
         always @(stall0 or s_reg_50 or Gaussian_Blur_Add2i1u8_4_13_out1 or Gaussian_Blur_Add2i1u2_4_14_out1 or Gaussian_Blur_Add2i1u2_4_17_out1 or Gaussian_Blur_And_1Ux1U_1U_4_20_out1 or Gaussian_Blur_Add2i1u2_4_33_out1 or Gaussian_Blur_Lti3s4_4_38_out1 or Gaussian_Blur_Lti3s4_4_42_out1 or gs_ctrl9)
          begin :drive_rgb_buffer_CE
            if (stall0) begin
               rgb_buffer_CE = 1'b0;
            end
            else begin
               case (gs_ctrl9) 

                  3'd1:                   begin
                     rgb_buffer_CE = 1'b1;
                  end
                  
                  3'd2:                   begin
                     if (10'd0256 == Gaussian_Blur_Add2i1u8_4_13_out1 && 4'd03 == Gaussian_Blur_Add2i1u2_4_14_out1) begin
                        rgb_buffer_CE = 1'b1;
                     end
                     else begin
                        rgb_buffer_CE = 1'b0;
                     end
                  end
                  
                  3'd3:                   begin
                     case (Gaussian_Blur_Add2i1u2_4_17_out1) 

                        4'd03:                         begin
                           if (Gaussian_Blur_And_1Ux1U_1U_4_20_out1) begin
                              rgb_buffer_CE = 1'b0;
                           end
                           else begin
                              rgb_buffer_CE = 1'b1;
                           end
                        end
                        
                        default:                         begin
                           rgb_buffer_CE = 1'b1;
                        end
                        
                     endcase

                  end
                  
                  3'd4:                   begin
                     if (4'd03 == Gaussian_Blur_Add2i1u2_4_33_out1) begin
                        rgb_buffer_CE = 1'b1;
                     end
                     else begin
                        rgb_buffer_CE = 1'b0;
                     end
                  end
                  
                  3'd5:                   begin
                     if (Gaussian_Blur_Lti3s4_4_38_out1) begin
                        rgb_buffer_CE = 1'b1;
                     end
                     else begin
                        if (Gaussian_Blur_Lti3s4_4_42_out1) begin
                           rgb_buffer_CE = 1'b1;
                        end
                        else begin
                           rgb_buffer_CE = 1'b0;
                        end
                     end
                  end
                  
                  3'd6:                   begin
                     /* state322 */
                     case (s_reg_50) 

                        10'd0256:                         begin
                           if (Gaussian_Blur_And_1Ux1U_1U_4_20_out1) begin
                              rgb_buffer_CE = 1'b0;
                           end
                           else begin
                              rgb_buffer_CE = 1'b1;
                           end
                        end
                        
                        default:                         begin
                           rgb_buffer_CE = 1'b1;
                        end
                        
                     endcase

                  end
                  
                  default:                   begin
                     rgb_buffer_CE = 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         always @(stall0 or s_reg_50 or Gaussian_Blur_Add2i1u8_4_13_out1 or Gaussian_Blur_Add2i1u2_4_14_out1 or Gaussian_Blur_Add2i1u2_4_17_out1 or Gaussian_Blur_And_1Ux1U_1U_4_20_out1 or Gaussian_Blur_Add2i1s32_4_49_out1 or gs_ctrl10)
          begin :drive_rgb_buffer_RW
            if (stall0) begin
               rgb_buffer_RW = 1'b0;
            end
            else begin
               case (gs_ctrl10) 

                  3'd1:                   begin
                     rgb_buffer_RW = 1'b1;
                  end
                  
                  3'd2:                   begin
                     if (10'd0256 == Gaussian_Blur_Add2i1u8_4_13_out1 && 4'd03 == Gaussian_Blur_Add2i1u2_4_14_out1) begin
                        rgb_buffer_RW = 1'b1;
                     end
                     else begin
                        rgb_buffer_RW = 1'b0;
                     end
                  end
                  
                  3'd3:                   begin
                     case (Gaussian_Blur_Add2i1u2_4_17_out1) 

                        4'd03:                         begin
                           rgb_buffer_RW = 1'b0;
                        end
                        
                        default:                         begin
                           rgb_buffer_RW = 1'b1;
                        end
                        
                     endcase

                  end
                  
                  3'd4:                   begin
                     /* state322 */
                     case (s_reg_50) 

                        10'd0256:                         begin
                           if (Gaussian_Blur_And_1Ux1U_1U_4_20_out1) begin
                              rgb_buffer_RW = 1'b0;
                           end
                           else begin
                              case (Gaussian_Blur_Add2i1s32_4_49_out1) 

                                 32'd0000000254:                                  begin
                                    rgb_buffer_RW = 1'b1;
                                 end
                                 
                                 default:                                  begin
                                    rgb_buffer_RW = 1'b0;
                                 end
                                 
                              endcase

                           end
                        end
                        
                        default:                         begin
                           rgb_buffer_RW = 1'b0;
                        end
                        
                     endcase

                  end
                  
                  default:                   begin
                     rgb_buffer_RW = 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: Gaussian_Blur_Add2i1u8_4  instance: Gaussian_Blur_Add2i1u8_4_13
         assign Gaussian_Blur_Add2i1u8_4_13_out1 = {2'b00, s_reg_50[7:0]} + 10'd0001;

         // resource: Gaussian_Blur_Add2i1u2_4  instance: Gaussian_Blur_Add2i1u2_4_14
         assign Gaussian_Blur_Add2i1u2_4_14_out1 = {2'b00, s_reg_47_slice1} + 4'd01;

         // resource: mux_2bx2i1c
         always @(Gaussian_Blur_Add2i1u2_4_17_out1[1:0] or gs_ctrl11)
          begin :drive_Gaussian_Blur_Mul2i258u2_4_15_in1
            if (gs_ctrl11) begin
               Gaussian_Blur_Mul2i258u2_4_15_in1 = Gaussian_Blur_Add2i1u2_4_17_out1[1:0];
            end
            else begin
               Gaussian_Blur_Mul2i258u2_4_15_in1 = 2'd0;
            end
         end

         // resource: Gaussian_Blur_Mul2i258u2_4  instance: Gaussian_Blur_Mul2i258u2_4_15
         assign Gaussian_Blur_Mul2i258u2_4_15_out1 = {8'b00000000, Gaussian_Blur_Mul2i258u2_4_15_in1}*10'd0258;

         // resource: Gaussian_Blur_Add2i257Mul2i258u2_4  instance: Gaussian_Blur_Add2i257Mul2i258u2_4_16
         assign Gaussian_Blur_Add2i257Mul2i258u2_4_16_out1 = {8'b00000000, s_reg_46_slice1}*10'd0258 + 10'd0257;

         // resource: Gaussian_Blur_Add2i1u2_4  instance: Gaussian_Blur_Add2i1u2_4_17
         assign Gaussian_Blur_Add2i1u2_4_17_out1 = {2'b00, s_reg_46_slice1} + 4'd01;

         // resource: mux_32bx2i1c
         always @(Gaussian_Blur_Add2i1s32_4_49_out1 or gs_ctrl6)
          begin :drive_Gaussian_Blur_Nei254s32_4_18_in1
            if (gs_ctrl6) begin
               Gaussian_Blur_Nei254s32_4_18_in1 = Gaussian_Blur_Add2i1s32_4_49_out1;
            end
            else begin
               Gaussian_Blur_Nei254s32_4_18_in1 = 32'd4294967295;
            end
         end

         // resource: Gaussian_Blur_Nei254s32_4  instance: Gaussian_Blur_Nei254s32_4_18
         assign Gaussian_Blur_Nei254s32_4_18_out1 = Gaussian_Blur_Nei254s32_4_18_in1 != 32'd0000000254;

         // resource: Gaussian_Blur_Nen1s32_4  instance: Gaussian_Blur_Nen1s32_4_19
         assign Gaussian_Blur_Nen1s32_4_19_out1 = Gaussian_Blur_Nei254s32_4_18_in1 != 32'd4294967295;

         // resource: Gaussian_Blur_And_1Ux1U_1U_4  instance: Gaussian_Blur_And_1Ux1U_1U_4_20
         assign Gaussian_Blur_And_1Ux1U_1U_4_20_out1 = Gaussian_Blur_Nen1s32_4_19_out1 & Gaussian_Blur_Nei254s32_4_18_out1;

         // resource: Gaussian_Blur_Abs_32S_32U_1  instance: Gaussian_Blur_Abs_32S_32U_1_21
         assign Gaussian_Blur_Abs_32S_32U_1_21_out1 = Gaussian_Blur_Nei254s32_4_18_in1[31] ^ Gaussian_Blur_Nei254s32_4_18_in1 < 32'd0000000000 ? -Gaussian_Blur_Nei254s32_4_18_in1 : Gaussian_Blur_Nei254s32_4_18_in1;

         // resource: Gaussian_Blur_Mod_2U_32_4  instance: Gaussian_Blur_Mod_2U_32_4_22
         assign Gaussian_Blur_Mod_2U_32_4_22_out1 = Gaussian_Blur_Abs_32S_32U_1_21_out1 % 2'd3;

         // resource: Gaussian_Blur_Minus_2U_2S_1  instance: Gaussian_Blur_Minus_2U_2S_1_23
         assign Gaussian_Blur_Minus_2U_2S_1_23_out1 = -Gaussian_Blur_Mod_2U_32_4_22_out1;

         // resource: mux_1bx2i1c
         always @(Gaussian_Blur_Add2i1s32_4_49_out1[31] or gs_ctrl6)
          begin :drive_Gaussian_Blur_N_Mux_2_2_35_4_24_ctrl1
            if (gs_ctrl6) begin
               Gaussian_Blur_N_Mux_2_2_35_4_24_ctrl1 = Gaussian_Blur_Add2i1s32_4_49_out1[31];
            end
            else begin
               Gaussian_Blur_N_Mux_2_2_35_4_24_ctrl1 = 1'b1;
            end
         end

         // resource: Gaussian_Blur_N_Mux_2_2_35_4
         always @(Gaussian_Blur_Mod_2U_32_4_22_out1 or Gaussian_Blur_Minus_2U_2S_1_23_out1 or Gaussian_Blur_N_Mux_2_2_35_4_24_ctrl1)
          begin :Gaussian_Blur_N_Mux_2_2_35_4_24
            if (Gaussian_Blur_N_Mux_2_2_35_4_24_ctrl1) begin
               Gaussian_Blur_N_Mux_2_2_35_4_24_out1 = Gaussian_Blur_Minus_2U_2S_1_23_out1;
            end
            else begin
               Gaussian_Blur_N_Mux_2_2_35_4_24_out1 = Gaussian_Blur_Mod_2U_32_4_22_out1;
            end
         end

         // resource: Gaussian_Blur_Add2i1u8_4  instance: Gaussian_Blur_Add2i1u8_4_26
         assign Gaussian_Blur_Add2i1u8_4_26_out1 = {2'b00, s_reg_50[7:0]} + 10'd0001;

         // resource: mux_2bx2i1c
         always @(Gaussian_Blur_Add2i1u2_4_33_out1[1:0] or gs_ctrl16)
          begin :drive_Gaussian_Blur_Add2i6u2_4_28_in1
            if (gs_ctrl16) begin
               Gaussian_Blur_Add2i6u2_4_28_in1 = Gaussian_Blur_Add2i1u2_4_33_out1[1:0];
            end
            else begin
               Gaussian_Blur_Add2i6u2_4_28_in1 = 2'd0;
            end
         end

         // resource: Gaussian_Blur_Add2i6u2_4  instance: Gaussian_Blur_Add2i6u2_4_28
         assign Gaussian_Blur_Add2i6u2_4_28_out1 = {2'b00, Gaussian_Blur_Add2i6u2_4_28_in1} + 4'd06;

         // resource: Gaussian_Blur_Add2i3u2_4  instance: Gaussian_Blur_Add2i3u2_4_32
         assign Gaussian_Blur_Add2i3u2_4_32_out1 = {1'b0, s_reg_47_slice1} + 3'd3;

         // resource: Gaussian_Blur_Add2i1u8_4  instance: Gaussian_Blur_Add2i1u8_4_30
         assign Gaussian_Blur_Add2i1u8_4_30_out1 = {2'b00, s_reg_50[7:0]} + 10'd0001;

         // resource: Gaussian_Blur_Add2i6u2_4  instance: Gaussian_Blur_Add2i6u2_4_31
         assign Gaussian_Blur_Add2i6u2_4_31_out1 = {2'b00, s_reg_47_slice1} + 4'd06;

         // resource: Gaussian_Blur_Add2i1u2_4  instance: Gaussian_Blur_Add2i1u2_4_33
         assign Gaussian_Blur_Add2i1u2_4_33_out1 = {2'b00, s_reg_47_slice1} + 4'd01;

         // resource: mux_2bx2i1c
         always @(s_reg_48[1:0] or gs_ctrl17)
          begin :drive_Gaussian_Blur_Add2i1u2_4_34_in1
            if (gs_ctrl17) begin
               Gaussian_Blur_Add2i1u2_4_34_in1 = s_reg_48[1:0];
            end
            else begin
               Gaussian_Blur_Add2i1u2_4_34_in1 = 2'd0;
            end
         end

         // resource: Gaussian_Blur_Add2i1u2_4  instance: Gaussian_Blur_Add2i1u2_4_34
         assign Gaussian_Blur_Add2i1u2_4_34_out1 = {2'b00, Gaussian_Blur_Add2i1u2_4_34_in1} + 4'd01;

         // resource: mux_2bx3i1c
         always @(s_reg_48[1:0] or Gaussian_Blur_Lti3s4_4_38_out1 or gs_ctrl17 or s_reg_47_slice1)
          begin :drive_Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_in3
            if (gs_ctrl17) begin
               if (Gaussian_Blur_Lti3s4_4_38_out1) begin
                  Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_in3 = s_reg_47_slice1;
               end
               else begin
                  Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_in3 = s_reg_48[1:0];
               end
            end
            else begin
               Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_in3 = 2'd0;
            end
         end

         // resource: mux_8bx2i1c
         always @(s_reg_50 or gs_ctrl19)
          begin :drive_Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_in2
            case (gs_ctrl19) 

               2'd1:                begin
                  Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_in2 = s_reg_50[7:0];
               end
               
               2'd2:                begin
                  /* state322 */
                  case (s_reg_50) 

                     10'd0256:                      begin
                        Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_in2 = 8'd000;
                     end
                     
                     default:                      begin
                        Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_in2 = s_reg_50[7:0];
                     end
                     
                  endcase

               end
               
               default:                begin
                  Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_in2 = 8'd000;
               end
               
            endcase

         end

         // resource: mux_2bx2i1c
         always @(Gaussian_Blur_Add2i1u2_4_37_out1[1:0] or Gaussian_Blur_Lti3s4_4_38_out1 or gs_ctrl17)
          begin :drive_Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_in1
            if (gs_ctrl17) begin
               if (Gaussian_Blur_Lti3s4_4_38_out1) begin
                  Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_in1 = Gaussian_Blur_Add2i1u2_4_37_out1[1:0];
               end
               else begin
                  Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_in1 = 2'd0;
               end
            end
            else begin
               Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_in1 = 2'd0;
            end
         end

         // resource: Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4  instance: Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35
         assign Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_out1 = {8'b00000000, Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_in3}*10'd0258 + {1'b0, {1'b0, Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_in2} + {7'b0000000, Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_in1}};

         // resource: Gaussian_Blur_Add2u2Mul2i3u2_4  instance: Gaussian_Blur_Add2u2Mul2i3u2_4_36
         assign Gaussian_Blur_Add2u2Mul2i3u2_4_36_out1 = {2'b00, Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_in3}*4'd03 + {2'b00, Gaussian_Blur_Add2Add2u2u8Mul2i258u2_4_35_in1};

         // resource: Gaussian_Blur_Add2i1u2_4  instance: Gaussian_Blur_Add2i1u2_4_37
         assign Gaussian_Blur_Add2i1u2_4_37_out1 = {2'b00, s_reg_46_slice1} + 4'd01;

         // resource: Gaussian_Blur_Lti3s4_4  instance: Gaussian_Blur_Lti3s4_4_38
         assign Gaussian_Blur_Lti3s4_4_38_out1 = Gaussian_Blur_Add2i1u2_4_37_out1[3] ^ Gaussian_Blur_Add2i1u2_4_37_out1 < 4'd03;

         // resource: Gaussian_Blur_Add2Mul2s9u8s9_4  instance: Gaussian_Blur_Add2Mul2s9u8s9_4_39
         assign Gaussian_Blur_Add2Mul2s9u8s9_4_39_out1 = s_reg_52 + {1'b0, rgb_buffer_out1[7:0]}*filter_out1;

         // instance: drive_Gaussian_Blur_Add2Mul2s9u8s9_4_40_in2
         assign Gaussian_Blur_Add2Mul2s9u8s9_4_40_in2 = rgb_buffer_out1[15:8];

         // resource: Gaussian_Blur_Add2Mul2s9u8s9_4  instance: Gaussian_Blur_Add2Mul2s9u8s9_4_40
         assign Gaussian_Blur_Add2Mul2s9u8s9_4_40_out1 = s_reg_53 + {1'b0, Gaussian_Blur_Add2Mul2s9u8s9_4_40_in2}*filter_out1;

         // instance: drive_Gaussian_Blur_Add2Mul2s9u8s9_4_41_in2
         assign Gaussian_Blur_Add2Mul2s9u8s9_4_41_in2 = rgb_buffer_out1[23:16];

         // resource: Gaussian_Blur_Add2Mul2s9u8s9_4  instance: Gaussian_Blur_Add2Mul2s9u8s9_4_41
         assign Gaussian_Blur_Add2Mul2s9u8s9_4_41_out1 = s_reg_54 + {1'b0, Gaussian_Blur_Add2Mul2s9u8s9_4_41_in2}*filter_out1;

         // resource: Gaussian_Blur_Lti3s4_4  instance: Gaussian_Blur_Lti3s4_4_42
         assign Gaussian_Blur_Lti3s4_4_42_out1 = s_reg_48[3] ^ s_reg_48 < 4'd03;

         assign t_2 = {{ 2 {Gaussian_Blur_Add2Mul2s9u8s9_4_39_out1[8]}}, Gaussian_Blur_Add2Mul2s9u8s9_4_39_out1} + {{ 2 {Gaussian_Blur_Add2Mul2s9u8s9_4_40_out1[8]}}, Gaussian_Blur_Add2Mul2s9u8s9_4_40_out1} + {{ 2 {Gaussian_Blur_Add2Mul2s9u8s9_4_41_out1[8]}}, Gaussian_Blur_Add2Mul2s9u8s9_4_41_out1};

         // resource: Gaussian_Blur_AbsAdd3s9s9s9_4  instance: Gaussian_Blur_AbsAdd3s9s9s9_4_43
         assign Gaussian_Blur_AbsAdd3s9s9s9_4_43_out1 = t_2[10] ^ t_2 < 11'd0000 ? - ({{ 2 {Gaussian_Blur_Add2Mul2s9u8s9_4_39_out1[8]}}, Gaussian_Blur_Add2Mul2s9u8s9_4_39_out1} + {{ 2 {Gaussian_Blur_Add2Mul2s9u8s9_4_40_out1[8]}}, Gaussian_Blur_Add2Mul2s9u8s9_4_40_out1} + {{ 2 {Gaussian_Blur_Add2Mul2s9u8s9_4_41_out1[8]}}, Gaussian_Blur_Add2Mul2s9u8s9_4_41_out1}) : {{ 2 {Gaussian_Blur_Add2Mul2s9u8s9_4_39_out1[8]}}, Gaussian_Blur_Add2Mul2s9u8s9_4_39_out1} + 
             {{ 2 {Gaussian_Blur_Add2Mul2s9u8s9_4_40_out1[8]}}, Gaussian_Blur_Add2Mul2s9u8s9_4_40_out1} + {{ 2 {Gaussian_Blur_Add2Mul2s9u8s9_4_41_out1[8]}}, Gaussian_Blur_Add2Mul2s9u8s9_4_41_out1};

         // resource: Gaussian_Blur_Div_11U_29_4  instance: Gaussian_Blur_Div_11U_29_4_44
         assign Gaussian_Blur_Div_11U_29_4_44_out1 = Gaussian_Blur_AbsAdd3s9s9s9_4_43_out1 / 2'd3;

         // resource: Gaussian_Blur_R10_10Add3s9s9s9_4  instance: Gaussian_Blur_R10_10Add3s9s9s9_4_45
         assign bits_001 = {{ 2 {Gaussian_Blur_Add2Mul2s9u8s9_4_39_out1[8]}}, Gaussian_Blur_Add2Mul2s9u8s9_4_39_out1} + {{ 2 {Gaussian_Blur_Add2Mul2s9u8s9_4_40_out1[8]}}, Gaussian_Blur_Add2Mul2s9u8s9_4_40_out1} + {{ 2 {Gaussian_Blur_Add2Mul2s9u8s9_4_41_out1[8]}}, Gaussian_Blur_Add2Mul2s9u8s9_4_41_out1};

         // resource: Gaussian_Blur_R10_10Add3s9s9s9_4  instance: Gaussian_Blur_R10_10Add3s9s9s9_4_45
         assign Gaussian_Blur_R10_10Add3s9s9s9_4_45_out1 = bits_001[10];

         // resource: Gaussian_Blur_Minus_11U_11S_4  instance: Gaussian_Blur_Minus_11U_11S_4_46
         assign Gaussian_Blur_Minus_11U_11S_4_46_out1 = -Gaussian_Blur_Div_11U_29_4_44_out1;

         // resource: Gaussian_Blur_N_Mux_11_2_36_4
         always @(Gaussian_Blur_Div_11U_29_4_44_out1 or Gaussian_Blur_R10_10Add3s9s9s9_4_45_out1 or Gaussian_Blur_Minus_11U_11S_4_46_out1)
          begin :Gaussian_Blur_N_Mux_11_2_36_4_47
            if (Gaussian_Blur_R10_10Add3s9s9s9_4_45_out1) begin
               Gaussian_Blur_N_Mux_11_2_36_4_47_out1 = Gaussian_Blur_Minus_11U_11S_4_46_out1;
            end
            else begin
               Gaussian_Blur_N_Mux_11_2_36_4_47_out1 = Gaussian_Blur_Div_11U_29_4_44_out1;
            end
         end

         // resource: Gaussian_Blur_Add2i1u8_4  instance: Gaussian_Blur_Add2i1u8_4_48
         assign Gaussian_Blur_Add2i1u8_4_48_out1 = {2'b00, s_reg_50[7:0]} + 10'd0001;

         // resource: Gaussian_Blur_Add2i1s32_4  instance: Gaussian_Blur_Add2i1s32_4_49
         assign Gaussian_Blur_Add2i1s32_4_49_out1 = s_reg_51 + 32'd0000000001;

         // resource: regr_en_sc_9
         always @(posedge i_clk)
          begin :drive_global_state
            if (i_rst == 1'b0) begin
               global_state <= 9'd000;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     global_state <= global_state_next;
                  end
                  
               endcase

            end
         end

         // resource: mux_9bx8i7c
         always @(s_reg_49 or s_reg_50 or Gaussian_Blur_Lti3s4_4_11_out1 or Gaussian_Blur_Add2i1u8_4_13_out1 or Gaussian_Blur_Add2i1u2_4_14_out1 or Gaussian_Blur_Add2i1u2_4_17_out1 or Gaussian_Blur_And_1Ux1U_1U_4_20_out1 or Gaussian_Blur_Add2i1u8_4_26_out1 or Gaussian_Blur_Add2i1u2_4_33_out1 or Gaussian_Blur_Lti3s4_4_38_out1 or Gaussian_Blur_Lti3s4_4_42_out1 or Gaussian_Blur_Add2i1s32_4_49_out1 or global_state)
          begin :drive_global_state_next
            case (global_state) 

               9'd002:                begin
                  if (s_reg_49) begin
                     global_state_next = 9'd001;
                  end
                  else begin
                     if (Gaussian_Blur_Lti3s4_4_11_out1) begin
                        global_state_next = 9'd001;
                     end
                     else begin
                        global_state_next = global_state + 9'd001;
                     end
                  end
               end
               
               9'd004:                begin
                  case (Gaussian_Blur_Add2i1u8_4_13_out1) 

                     10'd0256:                      begin
                        case (Gaussian_Blur_Add2i1u2_4_14_out1) 

                           4'd03:                            begin
                              global_state_next = global_state + 9'd001;
                           end
                           
                           default:                            begin
                              global_state_next = 9'd003;
                           end
                           
                        endcase

                     end
                     
                     default:                      begin
                        global_state_next = 9'd003;
                     end
                     
                  endcase

               end
               
               9'd264:                begin
                  case (Gaussian_Blur_Add2i1u2_4_17_out1) 

                     4'd03:                      begin
                        if (Gaussian_Blur_And_1Ux1U_1U_4_20_out1) begin
                           global_state_next = 9'd273;
                        end
                        else begin
                           global_state_next = 9'd292;
                        end
                     end
                     
                     default:                      begin
                        global_state_next = 9'd263;
                     end
                     
                  endcase

               end
               
               9'd265:                begin
                  case (Gaussian_Blur_Add2i1u8_4_26_out1) 

                     10'd0256:                      begin
                        global_state_next = 9'd267;
                     end
                     
                     default:                      begin
                        global_state_next = global_state + 9'd001;
                     end
                     
                  endcase

               end
               
               9'd266:                begin
                  global_state_next = 9'd265;
               end
               
               9'd272:                begin
                  case (Gaussian_Blur_Add2i1u2_4_33_out1) 

                     4'd03:                      begin
                        global_state_next = 9'd292;
                     end
                     
                     default:                      begin
                        global_state_next = 9'd267;
                     end
                     
                  endcase

               end
               
               9'd274:                begin
                  case (s_reg_50) 

                     10'd0256:                      begin
                        global_state_next = global_state + 9'd001;
                     end
                     
                     default:                      begin
                        global_state_next = 9'd273;
                     end
                     
                  endcase

               end
               
               9'd292:                begin
                  if (Gaussian_Blur_Lti3s4_4_38_out1) begin
                     global_state_next = 9'd292;
                  end
                  else begin
                     if (Gaussian_Blur_Lti3s4_4_42_out1) begin
                        global_state_next = 9'd292;
                     end
                     else begin
                        global_state_next = global_state + 9'd001;
                     end
                  end
               end
               
               9'd294:                begin
                  /* state322 */
                  case (s_reg_50) 

                     10'd0256:                      begin
                        if (Gaussian_Blur_And_1Ux1U_1U_4_20_out1) begin
                           global_state_next = 9'd273;
                        end
                        else begin
                           case (Gaussian_Blur_Add2i1s32_4_49_out1) 

                              32'd0000000254:                               begin
                                 global_state_next = 9'd265;
                              end
                              
                              default:                               begin
                                 global_state_next = 9'd292;
                              end
                              
                           endcase

                        end
                     end
                     
                     default:                      begin
                        global_state_next = 9'd292;
                     end
                     
                  endcase

               end
               
               default:                begin
                  global_state_next = global_state + 9'd001;
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl0
            if (i_rst == 1'b0) begin
               gs_ctrl0 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        9'd002:                         begin
                           gs_ctrl0 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl0 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_4bx16i16c
         // resource: regr_en_sc_4
         always @(posedge i_clk)
          begin :drive_gs_ctrl2
            if (i_rst == 1'b0) begin
               gs_ctrl2 <= 4'd00;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        9'd264, 9'd291, 9'd292, 9'd294:                         begin
                           gs_ctrl2 <= 4'd01;
                        end
                        
                        9'd265:                         begin
                           gs_ctrl2 <= 4'd02;
                        end
                        
                        9'd267, 9'd270:                         begin
                           gs_ctrl2 <= 4'd03;
                        end
                        
                        9'd268:                         begin
                           gs_ctrl2 <= 4'd04;
                        end
                        
                        9'd269, 9'd271:                         begin
                           gs_ctrl2 <= 4'd05;
                        end
                        
                        9'd272:                         begin
                           gs_ctrl2 <= 4'd06;
                        end
                        
                        9'd273, 9'd275:                         begin
                           gs_ctrl2 <= 4'd07;
                        end
                        
                        9'd274, 9'd277:                         begin
                           gs_ctrl2 <= 4'd08;
                        end
                        
                        9'd276, 9'd278:                         begin
                           gs_ctrl2 <= 4'd09;
                        end
                        
                        9'd279, 9'd281:                         begin
                           gs_ctrl2 <= 4'd10;
                        end
                        
                        9'd280, 9'd283:                         begin
                           gs_ctrl2 <= 4'd11;
                        end
                        
                        9'd282, 9'd284:                         begin
                           gs_ctrl2 <= 4'd12;
                        end
                        
                        9'd285, 9'd287:                         begin
                           gs_ctrl2 <= 4'd13;
                        end
                        
                        9'd286, 9'd289:                         begin
                           gs_ctrl2 <= 4'd14;
                        end
                        
                        9'd288, 9'd290:                         begin
                           gs_ctrl2 <= 4'd15;
                        end
                        
                        default:                         begin
                           gs_ctrl2 <= 4'd00;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl3
            if (i_rst == 1'b0) begin
               gs_ctrl3 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        9'd268, 9'd270, 9'd275, 9'd277, 9'd281, 9'd283, 9'd287, 9'd289:                         begin
                           gs_ctrl3 <= 2'd1;
                        end
                        
                        9'd271, 9'd278, 9'd284, 9'd290:                         begin
                           gs_ctrl3 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl3 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx7i7c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl4
            if (i_rst == 1'b0) begin
               gs_ctrl4 <= 3'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        9'd001, 9'd267, 9'd268, 9'd269, 9'd270, 9'd271, 9'd272, 9'd273, 9'd275, 9'd276, 9'd277, 9'd278, 9'd279, 9'd280, 9'd281, 9'd282, 9'd283, 9'd284, 9'd285, 9'd286, 9'd287, 9'd288, 9'd289, 9'd290, 9'd291:                         begin
                           gs_ctrl4 <= 3'd1;
                        end
                        
                        9'd264:                         begin
                           gs_ctrl4 <= 3'd2;
                        end
                        
                        9'd265:                         begin
                           gs_ctrl4 <= 3'd3;
                        end
                        
                        9'd274:                         begin
                           gs_ctrl4 <= 3'd4;
                        end
                        
                        9'd292:                         begin
                           gs_ctrl4 <= 3'd5;
                        end
                        
                        9'd294:                         begin
                           gs_ctrl4 <= 3'd6;
                        end
                        
                        default:                         begin
                           gs_ctrl4 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl5
            if (i_rst == 1'b0) begin
               gs_ctrl5 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        9'd001, 9'd268, 9'd270, 9'd271, 9'd275, 9'd277, 9'd278, 9'd281, 9'd283, 9'd284, 9'd287, 9'd289, 9'd290:                         begin
                           gs_ctrl5 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl5 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl6
            if (i_rst == 1'b0) begin
               gs_ctrl6 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        9'd294:                         begin
                           gs_ctrl6 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl6 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl8
            if (i_rst == 1'b0) begin
               gs_ctrl8 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        9'd004, 9'd005, 9'd006, 9'd007, 9'd008, 9'd009, 9'd010, 9'd011, 9'd012, 9'd013, 9'd014, 9'd015, 9'd016, 9'd017, 9'd018, 9'd019, 9'd020, 9'd021, 9'd022, 9'd023, 9'd024, 9'd025, 9'd026, 9'd027, 9'd028, 9'd029, 9'd030, 9'd031, 9'd032, 9'd033, 9'd034, 9'd035, 9'd036, 9'd037, 9'd038, 9'd039, 9'd040, 9'd041, 9'd042, 9'd043, 9'd044, 9'd045, 9'd046, 9'd047, 9'd048, 9'd049, 9'd050, 9'd051, 9'd052, 9'd053, 9'd054, 9'd055, 9'd056, 9'd057, 9'd058, 9'd059, 9'd060, 9'd061, 9'd062, 
9'd063
                        , 9'd064, 9'd065, 9'd066, 9'd067, 9'd068, 9'd069, 9'd070, 9'd071, 9'd072, 9'd073, 9'd074, 9'd075, 9'd076, 9'd077, 9'd078, 9'd079, 9'd080, 9'd081, 9'd082, 9'd083, 9'd084, 9'd085, 9'd086, 9'd087, 9'd088, 9'd089, 9'd090, 9'd091, 9'd092, 9'd093, 9'd094, 9'd095, 9'd096, 9'd097, 9'd098, 9'd099, 9'd100, 9'd101, 9'd102, 9'd103, 9'd104, 9'd105, 9'd106, 9'd107, 9'd108, 9'd109, 9'd110, 9'd111, 9'd112, 9'd113, 9'd114, 9'd115, 9'd116, 9'd117, 9'd118, 9'd119, 9'd120, 9'd121, 9'd122, 
9'd123
                        , 9'd124, 9'd125, 9'd126, 9'd127, 9'd128, 9'd129, 9'd130, 9'd131, 9'd132, 9'd133, 9'd134, 9'd135, 9'd136, 9'd137, 9'd138, 9'd139, 9'd140, 9'd141, 9'd142, 9'd143, 9'd144, 9'd145, 9'd146, 9'd147, 9'd148, 9'd149, 9'd150, 9'd151, 9'd152, 9'd153, 9'd154, 9'd155, 9'd156, 9'd157, 9'd158, 9'd159, 9'd160, 9'd161, 9'd162, 9'd163, 9'd164, 9'd165, 9'd166, 9'd167, 9'd168, 9'd169, 9'd170, 9'd171, 9'd172, 9'd173, 9'd174, 9'd175, 9'd176, 9'd177, 9'd178, 9'd179, 9'd180, 9'd181, 9'd182, 
9'd183
                        , 9'd184, 9'd185, 9'd186, 9'd187, 9'd188, 9'd189, 9'd190, 9'd191, 9'd192, 9'd193, 9'd194, 9'd195, 9'd196, 9'd197, 9'd198, 9'd199, 9'd200, 9'd201, 9'd202, 9'd203, 9'd204, 9'd205, 9'd206, 9'd207, 9'd208, 9'd209, 9'd210, 9'd211, 9'd212, 9'd213, 9'd214, 9'd215, 9'd216, 9'd217, 9'd218, 9'd219, 9'd220, 9'd221, 9'd222, 9'd223, 9'd224, 9'd225, 9'd226, 9'd227, 9'd228, 9'd229, 9'd230, 9'd231, 9'd232, 9'd233, 9'd234, 9'd235, 9'd236, 9'd237, 9'd238, 9'd239, 9'd240, 9'd241, 9'd242, 
9'd243
                        , 9'd244, 9'd245, 9'd246, 9'd247, 9'd248, 9'd249, 9'd250, 9'd251, 9'd252, 9'd253, 9'd254, 9'd255, 9'd256, 9'd257, 9'd258, 9'd259, 9'd260, 9'd261, 9'd262, 9'd263, 9'd264, 9'd266, 9'd294:                         begin
                           gs_ctrl8 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl8 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx7i7c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl9
            if (i_rst == 1'b0) begin
               gs_ctrl9 <= 3'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        9'd003, 9'd005, 9'd006, 9'd007, 9'd008, 9'd009, 9'd010, 9'd011, 9'd012, 9'd013, 9'd014, 9'd015, 9'd016, 9'd017, 9'd018, 9'd019, 9'd020, 9'd021, 9'd022, 9'd023, 9'd024, 9'd025, 9'd026, 9'd027, 9'd028, 9'd029, 9'd030, 9'd031, 9'd032, 9'd033, 9'd034, 9'd035, 9'd036, 9'd037, 9'd038, 9'd039, 9'd040, 9'd041, 9'd042, 9'd043, 9'd044, 9'd045, 9'd046, 9'd047, 9'd048, 9'd049, 9'd050, 9'd051, 9'd052, 9'd053, 9'd054, 9'd055, 9'd056, 9'd057, 9'd058, 9'd059, 9'd060, 9'd061, 9'd062, 
9'd063
                        , 9'd064, 9'd065, 9'd066, 9'd067, 9'd068, 9'd069, 9'd070, 9'd071, 9'd072, 9'd073, 9'd074, 9'd075, 9'd076, 9'd077, 9'd078, 9'd079, 9'd080, 9'd081, 9'd082, 9'd083, 9'd084, 9'd085, 9'd086, 9'd087, 9'd088, 9'd089, 9'd090, 9'd091, 9'd092, 9'd093, 9'd094, 9'd095, 9'd096, 9'd097, 9'd098, 9'd099, 9'd100, 9'd101, 9'd102, 9'd103, 9'd104, 9'd105, 9'd106, 9'd107, 9'd108, 9'd109, 9'd110, 9'd111, 9'd112, 9'd113, 9'd114, 9'd115, 9'd116, 9'd117, 9'd118, 9'd119, 9'd120, 9'd121, 9'd122, 
9'd123
                        , 9'd124, 9'd125, 9'd126, 9'd127, 9'd128, 9'd129, 9'd130, 9'd131, 9'd132, 9'd133, 9'd134, 9'd135, 9'd136, 9'd137, 9'd138, 9'd139, 9'd140, 9'd141, 9'd142, 9'd143, 9'd144, 9'd145, 9'd146, 9'd147, 9'd148, 9'd149, 9'd150, 9'd151, 9'd152, 9'd153, 9'd154, 9'd155, 9'd156, 9'd157, 9'd158, 9'd159, 9'd160, 9'd161, 9'd162, 9'd163, 9'd164, 9'd165, 9'd166, 9'd167, 9'd168, 9'd169, 9'd170, 9'd171, 9'd172, 9'd173, 9'd174, 9'd175, 9'd176, 9'd177, 9'd178, 9'd179, 9'd180, 9'd181, 9'd182, 
9'd183
                        , 9'd184, 9'd185, 9'd186, 9'd187, 9'd188, 9'd189, 9'd190, 9'd191, 9'd192, 9'd193, 9'd194, 9'd195, 9'd196, 9'd197, 9'd198, 9'd199, 9'd200, 9'd201, 9'd202, 9'd203, 9'd204, 9'd205, 9'd206, 9'd207, 9'd208, 9'd209, 9'd210, 9'd211, 9'd212, 9'd213, 9'd214, 9'd215, 9'd216, 9'd217, 9'd218, 9'd219, 9'd220, 9'd221, 9'd222, 9'd223, 9'd224, 9'd225, 9'd226, 9'd227, 9'd228, 9'd229, 9'd230, 9'd231, 9'd232, 9'd233, 9'd234, 9'd235, 9'd236, 9'd237, 9'd238, 9'd239, 9'd240, 9'd241, 9'd242, 
9'd243
                        , 9'd244, 9'd245, 9'd246, 9'd247, 9'd248, 9'd249, 9'd250, 9'd251, 9'd252, 9'd253, 9'd254, 9'd255, 9'd256, 9'd257, 9'd258, 9'd259, 9'd260, 9'd261, 9'd262, 9'd263, 9'd266, 9'd273, 9'd291:                         begin
                           gs_ctrl9 <= 3'd1;
                        end
                        
                        9'd004:                         begin
                           gs_ctrl9 <= 3'd2;
                        end
                        
                        9'd264:                         begin
                           gs_ctrl9 <= 3'd3;
                        end
                        
                        9'd272:                         begin
                           gs_ctrl9 <= 3'd4;
                        end
                        
                        9'd292:                         begin
                           gs_ctrl9 <= 3'd5;
                        end
                        
                        9'd294:                         begin
                           gs_ctrl9 <= 3'd6;
                        end
                        
                        default:                         begin
                           gs_ctrl9 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_3bx5i5c
         // resource: regr_en_sc_3
         always @(posedge i_clk)
          begin :drive_gs_ctrl10
            if (i_rst == 1'b0) begin
               gs_ctrl10 <= 3'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        9'd003, 9'd005, 9'd006, 9'd007, 9'd008, 9'd009, 9'd010, 9'd011, 9'd012, 9'd013, 9'd014, 9'd015, 9'd016, 9'd017, 9'd018, 9'd019, 9'd020, 9'd021, 9'd022, 9'd023, 9'd024, 9'd025, 9'd026, 9'd027, 9'd028, 9'd029, 9'd030, 9'd031, 9'd032, 9'd033, 9'd034, 9'd035, 9'd036, 9'd037, 9'd038, 9'd039, 9'd040, 9'd041, 9'd042, 9'd043, 9'd044, 9'd045, 9'd046, 9'd047, 9'd048, 9'd049, 9'd050, 9'd051, 9'd052, 9'd053, 9'd054, 9'd055, 9'd056, 9'd057, 9'd058, 9'd059, 9'd060, 9'd061, 9'd062, 
9'd063
                        , 9'd064, 9'd065, 9'd066, 9'd067, 9'd068, 9'd069, 9'd070, 9'd071, 9'd072, 9'd073, 9'd074, 9'd075, 9'd076, 9'd077, 9'd078, 9'd079, 9'd080, 9'd081, 9'd082, 9'd083, 9'd084, 9'd085, 9'd086, 9'd087, 9'd088, 9'd089, 9'd090, 9'd091, 9'd092, 9'd093, 9'd094, 9'd095, 9'd096, 9'd097, 9'd098, 9'd099, 9'd100, 9'd101, 9'd102, 9'd103, 9'd104, 9'd105, 9'd106, 9'd107, 9'd108, 9'd109, 9'd110, 9'd111, 9'd112, 9'd113, 9'd114, 9'd115, 9'd116, 9'd117, 9'd118, 9'd119, 9'd120, 9'd121, 9'd122, 
9'd123
                        , 9'd124, 9'd125, 9'd126, 9'd127, 9'd128, 9'd129, 9'd130, 9'd131, 9'd132, 9'd133, 9'd134, 9'd135, 9'd136, 9'd137, 9'd138, 9'd139, 9'd140, 9'd141, 9'd142, 9'd143, 9'd144, 9'd145, 9'd146, 9'd147, 9'd148, 9'd149, 9'd150, 9'd151, 9'd152, 9'd153, 9'd154, 9'd155, 9'd156, 9'd157, 9'd158, 9'd159, 9'd160, 9'd161, 9'd162, 9'd163, 9'd164, 9'd165, 9'd166, 9'd167, 9'd168, 9'd169, 9'd170, 9'd171, 9'd172, 9'd173, 9'd174, 9'd175, 9'd176, 9'd177, 9'd178, 9'd179, 9'd180, 9'd181, 9'd182, 
9'd183
                        , 9'd184, 9'd185, 9'd186, 9'd187, 9'd188, 9'd189, 9'd190, 9'd191, 9'd192, 9'd193, 9'd194, 9'd195, 9'd196, 9'd197, 9'd198, 9'd199, 9'd200, 9'd201, 9'd202, 9'd203, 9'd204, 9'd205, 9'd206, 9'd207, 9'd208, 9'd209, 9'd210, 9'd211, 9'd212, 9'd213, 9'd214, 9'd215, 9'd216, 9'd217, 9'd218, 9'd219, 9'd220, 9'd221, 9'd222, 9'd223, 9'd224, 9'd225, 9'd226, 9'd227, 9'd228, 9'd229, 9'd230, 9'd231, 9'd232, 9'd233, 9'd234, 9'd235, 9'd236, 9'd237, 9'd238, 9'd239, 9'd240, 9'd241, 9'd242, 
9'd243
                        , 9'd244, 9'd245, 9'd246, 9'd247, 9'd248, 9'd249, 9'd250, 9'd251, 9'd252, 9'd253, 9'd254, 9'd255, 9'd256, 9'd257, 9'd258, 9'd259, 9'd260, 9'd261, 9'd262, 9'd263, 9'd266, 9'd273:                         begin
                           gs_ctrl10 <= 3'd1;
                        end
                        
                        9'd004:                         begin
                           gs_ctrl10 <= 3'd2;
                        end
                        
                        9'd264:                         begin
                           gs_ctrl10 <= 3'd3;
                        end
                        
                        9'd294:                         begin
                           gs_ctrl10 <= 3'd4;
                        end
                        
                        default:                         begin
                           gs_ctrl10 <= 3'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl11
            if (i_rst == 1'b0) begin
               gs_ctrl11 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        9'd264:                         begin
                           gs_ctrl11 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl11 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl16
            if (i_rst == 1'b0) begin
               gs_ctrl16 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        9'd272:                         begin
                           gs_ctrl16 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl16 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_sc_1
         always @(posedge i_clk)
          begin :drive_gs_ctrl17
            if (i_rst == 1'b0) begin
               gs_ctrl17 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        9'd292:                         begin
                           gs_ctrl17 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl17 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_en_sc_2
         always @(posedge i_clk)
          begin :drive_gs_ctrl19
            if (i_rst == 1'b0) begin
               gs_ctrl19 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        9'd292:                         begin
                           gs_ctrl19 <= 2'd1;
                        end
                        
                        9'd294:                         begin
                           gs_ctrl19 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl19 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // instance: drive_i_rgb_busy
         assign i_rgb_busy = Gaussian_Blur_gen_busy_r_4_52_out1[2];

         // resource: Gaussian_Blur_gen_busy_r_4  instance: Gaussian_Blur_gen_busy_r_4_52
         assign Gaussian_Blur_gen_busy_r_4_52_out1 = {Gaussian_Blur_gen_busy_r_4_52_gnew_req, {Gaussian_Blur_gen_busy_r_4_52_gdiv, Gaussian_Blur_gen_busy_r_4_52_gen_busy_i_rgb_m_data_is_invalid_next}};

         // resource: Gaussian_Blur_gen_busy_r_4  instance: Gaussian_Blur_gen_busy_r_4_52
         assign Gaussian_Blur_gen_busy_r_4_52_gen_busy_i_rgb_m_data_is_invalid_next = ~Gaussian_Blur_gen_busy_r_4_52_gdiv;

         // resource: Gaussian_Blur_gen_busy_r_4  instance: Gaussian_Blur_gen_busy_r_4_52
         assign Gaussian_Blur_gen_busy_r_4_52_gdiv = i_rgb_vld & !Gaussian_Blur_gen_busy_r_4_52_gnew_req;

         // resource: Gaussian_Blur_gen_busy_r_4  instance: Gaussian_Blur_gen_busy_r_4_52
         assign Gaussian_Blur_gen_busy_r_4_52_gnew_req = i_rgb_m_busy_req_0 & (i_rgb_m_unvalidated_req | i_rgb_vld);

         // resource: regr_ss_1
         always @(posedge i_clk)
          begin :drive_i_rgb_m_unvalidated_req
            if (i_rst == 1'b0) begin
               i_rgb_m_unvalidated_req <= 1'd1;
            end
            else begin
               i_rgb_m_unvalidated_req <= Gaussian_Blur_N_Muxb_1_2_28_4_4_out1;
            end
         end

         // resource: Gaussian_Blur_N_Muxb_1_2_28_4
         always @(i_rgb_vld or i_rgb_m_busy_req_0 or i_rgb_m_unvalidated_req)
          begin :Gaussian_Blur_N_Muxb_1_2_28_4_4
            if (i_rgb_m_busy_req_0) begin
               Gaussian_Blur_N_Muxb_1_2_28_4_4_out1 = i_rgb_m_unvalidated_req;
            end
            else begin
               Gaussian_Blur_N_Muxb_1_2_28_4_4_out1 = i_rgb_vld;
            end
         end

         // instance: drive_o_result_vld
         assign o_result_vld = Gaussian_Blur_Or_1Ux1U_1U_4_2_out1;

         // resource: Gaussian_Blur_Or_1Ux1U_1U_4  instance: Gaussian_Blur_Or_1Ux1U_1U_4_2
         assign Gaussian_Blur_Or_1Ux1U_1U_4_2_out1 = o_result_m_unacked_req | Gaussian_Blur_Xor_1Ux1U_1U_1_1_out1;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_m_unacked_req
            if (i_rst == 1'b0) begin
               o_result_m_unacked_req <= 1'd0;
            end
            else begin
               o_result_m_unacked_req <= Gaussian_Blur_And_1Ux1U_1U_4_50_out1;
            end
         end

         // resource: Gaussian_Blur_And_1Ux1U_1U_4  instance: Gaussian_Blur_And_1Ux1U_1U_4_50
         assign Gaussian_Blur_And_1Ux1U_1U_4_50_out1 = o_result_busy & o_result_vld;

         // resource: Gaussian_Blur_Xor_1Ux1U_1U_1  instance: Gaussian_Blur_Xor_1Ux1U_1U_1_1
         assign Gaussian_Blur_Xor_1Ux1U_1U_1_1_out1 = o_result_m_req_m_trig_req ^ o_result_m_req_m_prev_trig_req;

         // resource: regr_sc_1
         always @(posedge i_clk)
          begin :drive_o_result_m_req_m_prev_trig_req
            if (i_rst == 1'b0) begin
               o_result_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               o_result_m_req_m_prev_trig_req <= o_result_m_req_m_trig_req;
            end
         end

         // resource: Gaussian_Blur_Not_1U_1U_1  instance: Gaussian_Blur_Not_1U_1U_1_3
         assign Gaussian_Blur_Not_1U_1U_1_3_out1 = !o_result_m_req_m_trig_req;

         // instance: drive_o_result_data
         assign o_result_data = {{ 21 {o_result_data_slice[10]}}, o_result_data_slice};


endmodule

