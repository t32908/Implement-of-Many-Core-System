// Generated by stratus_hls 19.12-s100  (91710.131054)
// Thu May  6 05:30:13 2021
// from ../Gaussian_Blur.cpp
#include "Gaussian_Blur_rtl.h"

struct Gaussian_Blur;
Gaussian_Blur::Gaussian_Blur(sc_module_name name) : sc_module(name) 
    ,i_clk("i_clk")
    ,i_rst("i_rst")
    ,i_rgb_busy("i_rgb_busy")
    ,i_rgb_vld("i_rgb_vld")
    ,i_rgb_data("i_rgb_data")
    ,o_result_busy("o_result_busy")
    ,o_result_vld("o_result_vld")
    ,o_result_data("o_result_data")
    ,o_result_m_req_m_prev_trig_req("o_result_m_req_m_prev_trig_req")
    ,Gaussian_Blur_Xor_1Ux1U_1U_1_1_out1("Gaussian_Blur_Xor_1Ux1U_1U_1_1_out1")
    ,o_result_m_unacked_req("o_result_m_unacked_req")
    ,Gaussian_Blur_Or_1Ux1U_1U_4_2_out1("Gaussian_Blur_Or_1Ux1U_1U_4_2_out1")
    ,Gaussian_Blur_N_Muxb_1_2_2_4_4_out1("Gaussian_Blur_N_Muxb_1_2_2_4_4_out1")
    ,i_rgb_m_unvalidated_req("i_rgb_m_unvalidated_req")
    ,Gaussian_Blur_gen_busy_r_4_70_gen_busy_i_rgb_m_data_is_invalid_next("Gaussian_Blur_gen_busy_r_4_70_gen_busy_i_rgb_m_data_is_invalid_next")
    ,Gaussian_Blur_gen_busy_r_4_70_gdiv("Gaussian_Blur_gen_busy_r_4_70_gdiv")
    ,Gaussian_Blur_gen_busy_r_4_70_gnew_req("Gaussian_Blur_gen_busy_r_4_70_gnew_req")
    ,global_state_next("global_state_next")
    ,Gaussian_Blur_N_Mux_11_2_1_4_65_ctrl1("Gaussian_Blur_N_Mux_11_2_1_4_65_ctrl1")
    ,Gaussian_Blur_Add_10Sx9S_11S_4_64_out1("Gaussian_Blur_Add_10Sx9S_11S_4_64_out1")
    ,Gaussian_Blur_Minus_11U_11S_4_63_out1("Gaussian_Blur_Minus_11U_11S_4_63_out1")
    ,Gaussian_Blur_Add_9Sx9S_10S_4_62_out1("Gaussian_Blur_Add_9Sx9S_10S_4_62_out1")
    ,Gaussian_Blur_Abs_11S_11U_4_60_out1("Gaussian_Blur_Abs_11S_11U_4_60_out1")
    ,Gaussian_Blur_Add_10Sx9S_11S_4_59_out1("Gaussian_Blur_Add_10Sx9S_11S_4_59_out1")
    ,Gaussian_Blur_Mul_9Sx8U_9S_4_55_out1("Gaussian_Blur_Mul_9Sx8U_9S_4_55_out1")
    ,Gaussian_Blur_Mul_9Sx8U_9S_4_55_in1("Gaussian_Blur_Mul_9Sx8U_9S_4_55_in1")
    ,Gaussian_Blur_Mul_9Sx8U_9S_4_52_out1("Gaussian_Blur_Mul_9Sx8U_9S_4_52_out1")
    ,Gaussian_Blur_Mul_9Sx8U_9S_4_52_in1("Gaussian_Blur_Mul_9Sx8U_9S_4_52_in1")
    ,Gaussian_Blur_Mul_9Sx8U_9S_4_51_out1("Gaussian_Blur_Mul_9Sx8U_9S_4_51_out1")
    ,Gaussian_Blur_Mul_2Ux2U_4U_4_44_out1("Gaussian_Blur_Mul_2Ux2U_4U_4_44_out1")
    ,Gaussian_Blur_Add_3Sx2U_4S_4_43_in1("Gaussian_Blur_Add_3Sx2U_4S_4_43_in1")
    ,Gaussian_Blur_Add_3Ux2U_4U_4_37_in1("Gaussian_Blur_Add_3Ux2U_4U_4_37_in1")
    ,gs_ctrl21("gs_ctrl21")
    ,Gaussian_Blur_Add_10Ux10U_10U_4_33_in1("Gaussian_Blur_Add_10Ux10U_10U_4_33_in1")
    ,Gaussian_Blur_Add_9Sx9S_10S_4_32_in1_slice("Gaussian_Blur_Add_9Sx9S_10S_4_32_in1_slice")
    ,gs_ctrl19("gs_ctrl19")
    ,Gaussian_Blur_Add_9Sx9S_10S_4_30_in2_slice("Gaussian_Blur_Add_9Sx9S_10S_4_30_in2_slice")
    ,gs_ctrl18("gs_ctrl18")
    ,Gaussian_Blur_N_Mux_2_2_0_4_29_ctrl1("Gaussian_Blur_N_Mux_2_2_0_4_29_ctrl1")
    ,Gaussian_Blur_Minus_2U_2S_4_28_out1("Gaussian_Blur_Minus_2U_2S_4_28_out1")
    ,Gaussian_Blur_Mod_32Ux2U_2U_4_27_out1("Gaussian_Blur_Mod_32Ux2U_2U_4_27_out1")
    ,Gaussian_Blur_Abs_32S_32U_1_26_out1("Gaussian_Blur_Abs_32S_32U_1_26_out1")
    ,Gaussian_Blur_NotEQ_32Sx1S_1U_4_24_out1("Gaussian_Blur_NotEQ_32Sx1S_1U_4_24_out1")
    ,Gaussian_Blur_NotEQ_32Sx9S_1U_4_23_out1("Gaussian_Blur_NotEQ_32Sx9S_1U_4_23_out1")
    ,Gaussian_Blur_NotEQ_32Sx9S_1U_4_23_in2("Gaussian_Blur_NotEQ_32Sx9S_1U_4_23_in2")
    ,gs_ctrl14("gs_ctrl14")
    ,Gaussian_Blur_Add_3Sx2U_4S_4_19_in1("Gaussian_Blur_Add_3Sx2U_4S_4_19_in1")
    ,gs_ctrl13("gs_ctrl13")
    ,Gaussian_Blur_Add_9Sx9S_10S_4_17_in2("Gaussian_Blur_Add_9Sx9S_10S_4_17_in2")
    ,gs_ctrl12("gs_ctrl12")
    ,gs_ctrl11("gs_ctrl11")
    ,gs_ctrl10("gs_ctrl10")
    ,Gaussian_Blur_Add_10Ux10U_10U_4_22_out1("Gaussian_Blur_Add_10Ux10U_10U_4_22_out1")
    ,Gaussian_Blur_Add_10Ux10U_10U_4_33_out1("Gaussian_Blur_Add_10Ux10U_10U_4_33_out1")
    ,Gaussian_Blur_Add_10Ux10U_10U_4_16_out1("Gaussian_Blur_Add_10Ux10U_10U_4_16_out1")
    ,Gaussian_Blur_Add_9Sx9S_10S_4_15_in2_slice("Gaussian_Blur_Add_9Sx9S_10S_4_15_in2_slice")
    ,gs_ctrl9("gs_ctrl9")
    ,Gaussian_Blur_Mul_9Ux2U_10U_4_14_in1("Gaussian_Blur_Mul_9Ux2U_10U_4_14_in1")
    ,gs_ctrl8("gs_ctrl8")
    ,gs_ctrl7("gs_ctrl7")
    ,gs_ctrl6("gs_ctrl6")
    ,gs_ctrl5("gs_ctrl5")
    ,gs_ctrl4("gs_ctrl4")
    ,Gaussian_Blur_Add_3Ux2U_4U_4_37_out1("Gaussian_Blur_Add_3Ux2U_4U_4_37_out1")
    ,Gaussian_Blur_Add_2Ux2U_3U_4_41_out1("Gaussian_Blur_Add_2Ux2U_3U_4_41_out1")
    ,Gaussian_Blur_Add_3Ux2U_4U_4_40_out1("Gaussian_Blur_Add_3Ux2U_4U_4_40_out1")
    ,Gaussian_Blur_Add_5Sx2U_5S_4_11_out1("Gaussian_Blur_Add_5Sx2U_5S_4_11_out1")
    ,Gaussian_Blur_Add_5Sx2U_5S_4_9_out1("Gaussian_Blur_Add_5Sx2U_5S_4_9_out1")
    ,Gaussian_Blur_Add_5Sx2U_5S_4_9_in1("Gaussian_Blur_Add_5Sx2U_5S_4_9_in1")
    ,Gaussian_Blur_Add_5Sx2U_5S_4_9_in2_slice("Gaussian_Blur_Add_5Sx2U_5S_4_9_in2_slice")
    ,Gaussian_Blur_Add_3Sx2U_4S_4_6_in1("Gaussian_Blur_Add_3Sx2U_4S_4_6_in1")
    ,gs_ctrl0("gs_ctrl0")
    ,Gaussian_Blur_Add_5Sx2U_5S_4_45_out1("Gaussian_Blur_Add_5Sx2U_5S_4_45_out1")
    ,s_reg_72("s_reg_72")
    ,Gaussian_Blur_Add_9Ux9U_9U_4_56_out1("Gaussian_Blur_Add_9Ux9U_9U_4_56_out1")
    ,s_reg_71("s_reg_71")
    ,Gaussian_Blur_Add_9Ux9U_9U_4_54_out1("Gaussian_Blur_Add_9Ux9U_9U_4_54_out1")
    ,s_reg_70("s_reg_70")
    ,Gaussian_Blur_Add_9Ux9U_9U_4_53_out1("Gaussian_Blur_Add_9Ux9U_9U_4_53_out1")
    ,s_reg_69("s_reg_69")
    ,s_reg_68_slice1("s_reg_68_slice1")
    ,s_reg_67("s_reg_67")
    ,Gaussian_Blur_Div_11Ux2U_11U_4_61_out1("Gaussian_Blur_Div_11Ux2U_11U_4_61_out1")
    ,Gaussian_Blur_Add_9Sx9S_10S_4_15_out1("Gaussian_Blur_Add_9Sx9S_10S_4_15_out1")
    ,s_reg_66("s_reg_66")
    ,Gaussian_Blur_Add_9Sx9S_10S_4_58_out1("Gaussian_Blur_Add_9Sx9S_10S_4_58_out1")
    ,Gaussian_Blur_Add_9Sx9S_10S_4_30_out1("Gaussian_Blur_Add_9Sx9S_10S_4_30_out1")
    ,Gaussian_Blur_Mul_9Ux2U_10U_4_14_out1("Gaussian_Blur_Mul_9Ux2U_10U_4_14_out1")
    ,Gaussian_Blur_LessThan_4Sx3S_1U_4_12_out1("Gaussian_Blur_LessThan_4Sx3S_1U_4_12_out1")
    ,Gaussian_Blur_Add_3Sx2U_4S_4_42_out1("Gaussian_Blur_Add_3Sx2U_4S_4_42_out1")
    ,Gaussian_Blur_Add_9Sx9S_10S_4_32_out1("Gaussian_Blur_Add_9Sx9S_10S_4_32_out1")
    ,Gaussian_Blur_N_Mux_2_2_0_4_29_out1("Gaussian_Blur_N_Mux_2_2_0_4_29_out1")
    ,Gaussian_Blur_Add_3Sx2U_4S_4_19_out1("Gaussian_Blur_Add_3Sx2U_4S_4_19_out1")
    ,Gaussian_Blur_Mul_2Ux2U_4U_4_8_out1("Gaussian_Blur_Mul_2Ux2U_4U_4_8_out1")
    ,s_reg_62("s_reg_62")
    ,Gaussian_Blur_Add_3Sx2U_4S_4_43_out1("Gaussian_Blur_Add_3Sx2U_4S_4_43_out1")
    ,Gaussian_Blur_Add_3Sx2U_4S_4_6_out1("Gaussian_Blur_Add_3Sx2U_4S_4_6_out1")
    ,s_reg_61("s_reg_61")
    ,Gaussian_Blur_Equal_1Ux1U_1U_1_1_out1("Gaussian_Blur_Equal_1Ux1U_1U_1_1_out1")
    ,Gaussian_Blur_Add_32Sx2S_32S_1_66_out1("Gaussian_Blur_Add_32Sx2S_32S_1_66_out1")
    ,drain("drain")
    ,u_u0_mi51("u_u0_mi51")
    ,cycle2_state("cycle2_state")
    ,cycle1_state("cycle1_state")
    ,Gaussian_Blur_Add_3Sx2U_4S_4_10_out1("Gaussian_Blur_Add_3Sx2U_4S_4_10_out1")
    ,Gaussian_Blur_gen_busy_r_4_70_out1("Gaussian_Blur_gen_busy_r_4_70_out1")
    ,Gaussian_Blur_And_1Ux1U_1U_4_68_out1("Gaussian_Blur_And_1Ux1U_1U_4_68_out1")
    ,Gaussian_Blur_Not_1U_1U_1_3_out1("Gaussian_Blur_Not_1U_1U_1_3_out1")
    ,o_result_m_req_m_trig_req("o_result_m_req_m_trig_req")
    ,Gaussian_Blur_Add_9Sx9S_10S_4_67_out1("Gaussian_Blur_Add_9Sx9S_10S_4_67_out1")
    ,s_reg_65("s_reg_65")
    ,s_reg_63("s_reg_63")
    ,Gaussian_Blur_And_1Ux1U_1U_4_25_out1("Gaussian_Blur_And_1Ux1U_1U_4_25_out1")
    ,Gaussian_Blur_Add_3Sx2U_4S_4_18_out1("Gaussian_Blur_Add_3Sx2U_4S_4_18_out1")
    ,Gaussian_Blur_Add_9Sx9S_10S_4_17_out1("Gaussian_Blur_Add_9Sx9S_10S_4_17_out1")
    ,s_reg_64("s_reg_64")
    ,Gaussian_Blur_LessThan_4Sx3S_1U_4_13_out1("Gaussian_Blur_LessThan_4Sx3S_1U_4_13_out1")
    ,global_state("global_state")
    ,i_rgb_m_busy_req_0("i_rgb_m_busy_req_0")
    ,Gaussian_Blur_N_Mux_11_2_1_4_65_out1("Gaussian_Blur_N_Mux_11_2_1_4_65_out1")
    ,o_result_data_slice("o_result_data_slice")
    ,stall0("stall0")
    ,filter_DIN("filter_DIN")
    ,filter_CE("filter_CE")
    ,filter_RW("filter_RW")
    ,filter_in1("filter_in1")
    ,filter_out1("filter_out1")
    ,filter_const_in1("filter_const_in1")
    ,filter_const_out1("filter_const_out1")
    ,rgb_buffer_DIN("rgb_buffer_DIN")
    ,rgb_buffer_CE("rgb_buffer_CE")
    ,rgb_buffer_RW("rgb_buffer_RW")
    ,rgb_buffer_in1("rgb_buffer_in1")
    ,rgb_buffer_out1("rgb_buffer_out1")
{
  rgb_buffer = new Gaussian_Blur_RAM_774X25_3("rgb_buffer");
  rgb_buffer->DIN(rgb_buffer_DIN);
  rgb_buffer->CE(rgb_buffer_CE);
  rgb_buffer->RW(rgb_buffer_RW);
  rgb_buffer->in1(rgb_buffer_in1);
  rgb_buffer->out1(rgb_buffer_out1);
  rgb_buffer->clk(i_clk);

  filter_const = new Gaussian_Blur_ROM_9X9_filter_const("filter_const");
  filter_const->in1(filter_const_in1);
  filter_const->out1(filter_const_out1);
  filter_const->clk(i_clk);

  filter = new Gaussian_Blur_RAM_9X9_2("filter");
  filter->DIN(filter_DIN);
  filter->CE(filter_CE);
  filter->RW(filter_RW);
  filter->in1(filter_in1);
  filter->out1(filter_out1);
  filter->clk(i_clk);

  SC_METHOD(drive_o_result_data_slice);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_i_rgb_m_busy_req_0);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_o_result_m_req_m_trig_req);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_stall0);
  sensitive << ( global_state );
  sensitive << ( Gaussian_Blur_gen_busy_r_4_70_out1 );
  sensitive << ( Gaussian_Blur_And_1Ux1U_1U_4_68_out1 );

  SC_METHOD(drive_u_u0_mi51);
  sensitive << ( s_reg_64 );
  sensitive << ( cycle2_state );
  sensitive << ( cycle1_state );
  sensitive << ( Gaussian_Blur_Add_3Sx2U_4S_4_10_out1 );

  SC_METHOD(drive_drain);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_61);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_62);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_63);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_64);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_65);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_66);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_67);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_68_slice_slice);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_69);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_70);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_71);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_72);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_Gaussian_Blur_Add_3Sx2U_4S_4_6_in1);
  sensitive << ( gs_ctrl0 );
  sensitive << ( s_reg_61 );

  SC_METHOD(Gaussian_Blur_Add_3Sx2U_4S_4_6);
  sensitive << ( Gaussian_Blur_Add_3Sx2U_4S_4_6_in1 );

  SC_METHOD(Gaussian_Blur_Mul_2Ux2U_4U_4_8);
  sensitive << ( Gaussian_Blur_Add_3Sx2U_4S_4_6_in1 );

  SC_METHOD(drive_Gaussian_Blur_Add_5Sx2U_5S_4_9_in2_slice);
  sensitive << ( gs_ctrl0 );
  sensitive << ( s_reg_64 );
  sensitive << ( s_reg_62 );
  sensitive << ( Gaussian_Blur_Mul_2Ux2U_4U_4_8_out1 );

  SC_METHOD(drive_Gaussian_Blur_Add_5Sx2U_5S_4_9_in1);
  sensitive << ( gs_ctrl0 );
  sensitive << ( s_reg_64 );
  sensitive << ( s_reg_63 );

  SC_METHOD(Gaussian_Blur_Add_5Sx2U_5S_4_9);
  sensitive << ( Gaussian_Blur_Add_5Sx2U_5S_4_9_in1 );
  sensitive << ( Gaussian_Blur_Add_5Sx2U_5S_4_9_in2_slice );

  SC_METHOD(Gaussian_Blur_Add_3Sx2U_4S_4_10);
  sensitive << ( s_reg_63 );

  SC_METHOD(Gaussian_Blur_Add_5Sx2U_5S_4_11);
  sensitive << ( s_reg_63 );
  sensitive << ( s_reg_62 );

  SC_METHOD(Gaussian_Blur_LessThan_4Sx3S_1U_4_12);
  sensitive << ( Gaussian_Blur_Add_3Sx2U_4S_4_10_out1 );

  SC_METHOD(drive_filter_const_in1);
  sensitive << ( Gaussian_Blur_Add_5Sx2U_5S_4_9_out1 );

  SC_METHOD(drive_filter_in1);
  sensitive << ( gs_ctrl4 );
  sensitive << ( Gaussian_Blur_Add_5Sx2U_5S_4_11_out1 );
  sensitive << ( Gaussian_Blur_Add_3Ux2U_4U_4_37_out1 );
  sensitive << ( Gaussian_Blur_Add_2Ux2U_3U_4_41_out1 );
  sensitive << ( Gaussian_Blur_Add_3Ux2U_4U_4_40_out1 );
  sensitive << ( s_reg_63 );
  sensitive << ( s_reg_72 );

  SC_METHOD(drive_filter_DIN);
  sensitive << ( gs_ctrl5 );
  sensitive << ( filter_const_out1 );
  sensitive << ( filter_out1 );
  sensitive << ( s_reg_69 );

  SC_METHOD(drive_filter_CE);
  sensitive << ( stall0 );
  sensitive << ( gs_ctrl6 );
  sensitive << ( Gaussian_Blur_Add_9Sx9S_10S_4_32_out1 );
  sensitive << ( s_reg_63 );
  sensitive << ( s_reg_65 );
  sensitive << ( s_reg_64 );
  sensitive << ( cycle2_state );
  sensitive << ( cycle1_state );

  SC_METHOD(drive_filter_RW);
  sensitive << ( stall0 );
  sensitive << ( gs_ctrl7 );

  SC_METHOD(Gaussian_Blur_LessThan_4Sx3S_1U_4_13);
  sensitive << ( s_reg_61 );

  SC_METHOD(drive_Gaussian_Blur_Mul_9Ux2U_10U_4_14_in1);
  sensitive << ( gs_ctrl8 );
  sensitive << ( Gaussian_Blur_Add_3Sx2U_4S_4_18_out1 );
  sensitive << ( s_reg_63 );
  sensitive << ( s_reg_62 );

  SC_METHOD(Gaussian_Blur_Mul_9Ux2U_10U_4_14);
  sensitive << ( Gaussian_Blur_Mul_9Ux2U_10U_4_14_in1 );

  SC_METHOD(drive_Gaussian_Blur_Add_9Sx9S_10S_4_15_in2_slice);
  sensitive << ( gs_ctrl9 );
  sensitive << ( Gaussian_Blur_Add_9Sx9S_10S_4_17_out1 );

  SC_METHOD(Gaussian_Blur_Add_9Sx9S_10S_4_15);
  sensitive << ( Gaussian_Blur_Add_9Sx9S_10S_4_15_in2_slice );

  SC_METHOD(Gaussian_Blur_Add_10Ux10U_10U_4_16);
  sensitive << ( s_reg_66 );
  sensitive << ( s_reg_65 );

  SC_METHOD(drive_rgb_buffer_in1);
  sensitive << ( global_state );
  sensitive << ( Gaussian_Blur_Add_10Ux10U_10U_4_16_out1 );
  sensitive << ( Gaussian_Blur_Mul_9Ux2U_10U_4_14_out1 );
  sensitive << ( Gaussian_Blur_Add_10Ux10U_10U_4_22_out1 );
  sensitive << ( Gaussian_Blur_Add_10Ux10U_10U_4_33_out1 );

  SC_METHOD(drive_rgb_buffer_DIN);
  sensitive << ( gs_ctrl10 );
  sensitive << ( i_rgb_data );

  SC_METHOD(drive_rgb_buffer_CE);
  sensitive << ( stall0 );
  sensitive << ( gs_ctrl11 );
  sensitive << ( Gaussian_Blur_Add_3Sx2U_4S_4_18_out1 );
  sensitive << ( Gaussian_Blur_Add_9Sx9S_10S_4_17_out1 );
  sensitive << ( s_reg_63 );
  sensitive << ( s_reg_64 );
  sensitive << ( cycle2_state );
  sensitive << ( cycle1_state );

  SC_METHOD(drive_rgb_buffer_RW);
  sensitive << ( stall0 );
  sensitive << ( gs_ctrl12 );
  sensitive << ( Gaussian_Blur_Add_3Sx2U_4S_4_18_out1 );
  sensitive << ( Gaussian_Blur_Add_9Sx9S_10S_4_17_out1 );
  sensitive << ( s_reg_63 );

  SC_METHOD(drive_Gaussian_Blur_Add_9Sx9S_10S_4_17_in2);
  sensitive << ( s_reg_68_slice1 );

  SC_METHOD(Gaussian_Blur_Add_9Sx9S_10S_4_17);
  sensitive << ( Gaussian_Blur_Add_9Sx9S_10S_4_17_in2 );

  SC_METHOD(Gaussian_Blur_Add_3Sx2U_4S_4_18);
  sensitive << ( s_reg_63 );

  SC_METHOD(drive_Gaussian_Blur_Add_3Sx2U_4S_4_19_in1);
  sensitive << ( gs_ctrl13 );
  sensitive << ( s_reg_63 );

  SC_METHOD(Gaussian_Blur_Add_3Sx2U_4S_4_19);
  sensitive << ( Gaussian_Blur_Add_3Sx2U_4S_4_19_in1 );

  SC_METHOD(Gaussian_Blur_Add_10Ux10U_10U_4_22);
  sensitive << ( s_reg_65 );

  SC_METHOD(drive_Gaussian_Blur_NotEQ_32Sx9S_1U_4_23_in2);
  sensitive << ( gs_ctrl14 );
  sensitive << ( Gaussian_Blur_Add_32Sx2S_32S_1_66_out1 );

  SC_METHOD(Gaussian_Blur_NotEQ_32Sx9S_1U_4_23);
  sensitive << ( Gaussian_Blur_NotEQ_32Sx9S_1U_4_23_in2 );

  SC_METHOD(Gaussian_Blur_NotEQ_32Sx1S_1U_4_24);
  sensitive << ( Gaussian_Blur_NotEQ_32Sx9S_1U_4_23_in2 );

  SC_METHOD(Gaussian_Blur_And_1Ux1U_1U_4_25);
  sensitive << ( Gaussian_Blur_NotEQ_32Sx9S_1U_4_23_out1 );
  sensitive << ( Gaussian_Blur_NotEQ_32Sx1S_1U_4_24_out1 );

  SC_METHOD(Gaussian_Blur_Abs_32S_32U_1_26);
  sensitive << ( Gaussian_Blur_NotEQ_32Sx9S_1U_4_23_in2 );

  SC_METHOD(Gaussian_Blur_Mod_32Ux2U_2U_4_27);
  sensitive << ( Gaussian_Blur_Abs_32S_32U_1_26_out1 );

  SC_METHOD(Gaussian_Blur_Minus_2U_2S_4_28);
  sensitive << ( Gaussian_Blur_Mod_32Ux2U_2U_4_27_out1 );

  SC_METHOD(drive_Gaussian_Blur_N_Mux_2_2_0_4_29_ctrl1);
  sensitive << ( gs_ctrl14 );
  sensitive << ( Gaussian_Blur_Add_32Sx2S_32S_1_66_out1 );

  SC_METHOD(Gaussian_Blur_N_Mux_2_2_0_4_29);
  sensitive << ( Gaussian_Blur_N_Mux_2_2_0_4_29_ctrl1 );
  sensitive << ( Gaussian_Blur_Minus_2U_2S_4_28_out1 );
  sensitive << ( Gaussian_Blur_Mod_32Ux2U_2U_4_27_out1 );

  SC_METHOD(drive_Gaussian_Blur_Add_9Sx9S_10S_4_30_in2_slice);
  sensitive << ( gs_ctrl18 );
  sensitive << ( s_reg_65 );

  SC_METHOD(Gaussian_Blur_Add_9Sx9S_10S_4_30);
  sensitive << ( Gaussian_Blur_Add_9Sx9S_10S_4_30_in2_slice );

  SC_METHOD(drive_Gaussian_Blur_Add_9Sx9S_10S_4_32_in1_slice);
  sensitive << ( gs_ctrl19 );
  sensitive << ( s_reg_63 );

  SC_METHOD(Gaussian_Blur_Add_9Sx9S_10S_4_32);
  sensitive << ( Gaussian_Blur_Add_9Sx9S_10S_4_32_in1_slice );
  sensitive << ( Gaussian_Blur_Add_9Sx9S_10S_4_17_in2 );

  SC_METHOD(drive_Gaussian_Blur_Add_10Ux10U_10U_4_33_in1);
  sensitive << ( gs_ctrl19 );
  sensitive << ( Gaussian_Blur_Add_9Sx9S_10S_4_32_out1 );

  SC_METHOD(Gaussian_Blur_Add_10Ux10U_10U_4_33);
  sensitive << ( Gaussian_Blur_Add_10Ux10U_10U_4_33_in1 );
  sensitive << ( Gaussian_Blur_Mul_9Ux2U_10U_4_14_out1 );

  SC_METHOD(drive_Gaussian_Blur_Add_3Ux2U_4U_4_37_in1);
  sensitive << ( gs_ctrl21 );
  sensitive << ( s_reg_63 );

  SC_METHOD(Gaussian_Blur_Add_3Ux2U_4U_4_37);
  sensitive << ( Gaussian_Blur_Add_3Ux2U_4U_4_37_in1 );

  SC_METHOD(Gaussian_Blur_Add_2Ux2U_3U_4_41);
  sensitive << ( s_reg_63 );

  SC_METHOD(Gaussian_Blur_Add_3Ux2U_4U_4_40);
  sensitive << ( s_reg_63 );

  SC_METHOD(Gaussian_Blur_Add_3Sx2U_4S_4_42);
  sensitive << ( s_reg_63 );

  SC_METHOD(drive_Gaussian_Blur_Add_3Sx2U_4S_4_43_in1);
  sensitive << ( gs_ctrl19 );
  sensitive << ( s_reg_61 );

  SC_METHOD(Gaussian_Blur_Add_3Sx2U_4S_4_43);
  sensitive << ( Gaussian_Blur_Add_3Sx2U_4S_4_43_in1 );

  SC_METHOD(Gaussian_Blur_Mul_2Ux2U_4U_4_44);
  sensitive << ( s_reg_62 );

  SC_METHOD(Gaussian_Blur_Add_5Sx2U_5S_4_45);
  sensitive << ( u_u0_mi51 );
  sensitive << ( Gaussian_Blur_Mul_2Ux2U_4U_4_44_out1 );

  SC_METHOD(Gaussian_Blur_Mul_9Sx8U_9S_4_51);
  sensitive << ( rgb_buffer_out1 );
  sensitive << ( filter_out1 );

  SC_METHOD(drive_Gaussian_Blur_Mul_9Sx8U_9S_4_52_in1);
  sensitive << ( rgb_buffer_out1 );

  SC_METHOD(Gaussian_Blur_Mul_9Sx8U_9S_4_52);
  sensitive << ( Gaussian_Blur_Mul_9Sx8U_9S_4_52_in1 );
  sensitive << ( filter_out1 );

  SC_METHOD(Gaussian_Blur_Add_9Ux9U_9U_4_53);
  sensitive << ( s_reg_69 );
  sensitive << ( Gaussian_Blur_Mul_9Sx8U_9S_4_51_out1 );

  SC_METHOD(Gaussian_Blur_Add_9Ux9U_9U_4_54);
  sensitive << ( s_reg_70 );
  sensitive << ( Gaussian_Blur_Mul_9Sx8U_9S_4_52_out1 );

  SC_METHOD(drive_Gaussian_Blur_Mul_9Sx8U_9S_4_55_in1);
  sensitive << ( rgb_buffer_out1 );

  SC_METHOD(Gaussian_Blur_Mul_9Sx8U_9S_4_55);
  sensitive << ( Gaussian_Blur_Mul_9Sx8U_9S_4_55_in1 );
  sensitive << ( filter_out1 );

  SC_METHOD(Gaussian_Blur_Add_9Ux9U_9U_4_56);
  sensitive << ( s_reg_71 );
  sensitive << ( Gaussian_Blur_Mul_9Sx8U_9S_4_55_out1 );

  SC_METHOD(Gaussian_Blur_Add_9Sx9S_10S_4_58);
  sensitive << ( Gaussian_Blur_Add_9Ux9U_9U_4_54_out1 );
  sensitive << ( Gaussian_Blur_Add_9Ux9U_9U_4_53_out1 );

  SC_METHOD(Gaussian_Blur_Add_10Sx9S_11S_4_59);
  sensitive << ( s_reg_71 );
  sensitive << ( s_reg_65 );

  SC_METHOD(Gaussian_Blur_Abs_11S_11U_4_60);
  sensitive << ( Gaussian_Blur_Add_10Sx9S_11S_4_59_out1 );

  SC_METHOD(Gaussian_Blur_Div_11Ux2U_11U_4_61);
  sensitive << ( Gaussian_Blur_Abs_11S_11U_4_60_out1 );

  SC_METHOD(Gaussian_Blur_Add_9Sx9S_10S_4_62);
  sensitive << ( s_reg_70 );
  sensitive << ( s_reg_69 );

  SC_METHOD(Gaussian_Blur_Minus_11U_11S_4_63);
  sensitive << ( s_reg_66 );

  SC_METHOD(Gaussian_Blur_Add_10Sx9S_11S_4_64);
  sensitive << ( s_reg_71 );
  sensitive << ( Gaussian_Blur_Add_9Sx9S_10S_4_62_out1 );

  SC_METHOD(drive_Gaussian_Blur_N_Mux_11_2_1_4_65_ctrl1);
  sensitive << ( Gaussian_Blur_Add_10Sx9S_11S_4_64_out1 );

  SC_METHOD(Gaussian_Blur_N_Mux_11_2_1_4_65);
  sensitive << ( Gaussian_Blur_N_Mux_11_2_1_4_65_ctrl1 );
  sensitive << ( Gaussian_Blur_Minus_11U_11S_4_63_out1 );
  sensitive << ( s_reg_66 );

  SC_METHOD(Gaussian_Blur_Add_32Sx2S_32S_1_66);
  sensitive << ( s_reg_67 );

  SC_METHOD(Gaussian_Blur_Add_9Sx9S_10S_4_67);
  sensitive << ( Gaussian_Blur_Add_9Sx9S_10S_4_17_in2 );

  SC_METHOD(Gaussian_Blur_Equal_1Ux1U_1U_1_1);
  sensitive << ( Gaussian_Blur_LessThan_4Sx3S_1U_4_12_out1 );

  SC_METHOD(drive_cycle1_state);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_cycle2_state);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_global_state);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_global_state_next);
  sensitive << ( global_state );
  sensitive << ( s_reg_64 );
  sensitive << ( Gaussian_Blur_LessThan_4Sx3S_1U_4_13_out1 );
  sensitive << ( Gaussian_Blur_Add_9Sx9S_10S_4_17_out1 );
  sensitive << ( Gaussian_Blur_Add_3Sx2U_4S_4_18_out1 );
  sensitive << ( s_reg_63 );
  sensitive << ( Gaussian_Blur_And_1Ux1U_1U_4_25_out1 );
  sensitive << ( Gaussian_Blur_Add_9Sx9S_10S_4_32_out1 );
  sensitive << ( s_reg_65 );
  sensitive << ( Gaussian_Blur_Add_9Sx9S_10S_4_67_out1 );
  sensitive << ( Gaussian_Blur_Add_32Sx2S_32S_1_66_out1 );
  sensitive << ( cycle2_state );

  SC_METHOD(drive_gs_ctrl0);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl4);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl5);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl6);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl7);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl8);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl9);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl10);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl11);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl12);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl13);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl14);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl18);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl19);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl21);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(drive_i_rgb_busy);
  sensitive << ( Gaussian_Blur_gen_busy_r_4_70_out1 );

  SC_METHOD(Gaussian_Blur_gen_busy_r_4_70_p8);
  sensitive << ( 
  Gaussian_Blur_gen_busy_r_4_70_gen_busy_i_rgb_m_data_is_invalid_next );
  sensitive << ( Gaussian_Blur_gen_busy_r_4_70_gdiv );
  sensitive << ( Gaussian_Blur_gen_busy_r_4_70_gnew_req );

  SC_METHOD(Gaussian_Blur_gen_busy_r_4_70_p7);
  sensitive << ( Gaussian_Blur_gen_busy_r_4_70_gdiv );

  SC_METHOD(Gaussian_Blur_gen_busy_r_4_70_p6);
  sensitive << ( Gaussian_Blur_gen_busy_r_4_70_gnew_req );
  sensitive << ( i_rgb_vld );

  SC_METHOD(Gaussian_Blur_gen_busy_r_4_70_p5);
  sensitive << ( i_rgb_vld );
  sensitive << ( i_rgb_m_unvalidated_req );
  sensitive << ( i_rgb_m_busy_req_0 );

  SC_METHOD(drive_i_rgb_m_unvalidated_req);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(Gaussian_Blur_N_Muxb_1_2_2_4_4);
  sensitive << ( i_rgb_m_busy_req_0 );
  sensitive << ( i_rgb_m_unvalidated_req );
  sensitive << ( i_rgb_vld );

  SC_METHOD(drive_o_result_vld);
  sensitive << ( Gaussian_Blur_Or_1Ux1U_1U_4_2_out1 );

  SC_METHOD(Gaussian_Blur_Or_1Ux1U_1U_4_2);
  sensitive << ( Gaussian_Blur_Xor_1Ux1U_1U_1_1_out1 );
  sensitive << ( o_result_m_unacked_req );

  SC_METHOD(drive_o_result_m_unacked_req);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(Gaussian_Blur_And_1Ux1U_1U_4_68);
  sensitive << ( o_result_vld );
  sensitive << ( o_result_busy );

  SC_METHOD(Gaussian_Blur_Xor_1Ux1U_1U_1_1);
  sensitive << ( o_result_m_req_m_prev_trig_req );
  sensitive << ( o_result_m_req_m_trig_req );

  SC_METHOD(drive_o_result_m_req_m_prev_trig_req);
  sensitive << i_clk.pos();
  dont_initialize();

  SC_METHOD(Gaussian_Blur_Not_1U_1U_1_3);
  sensitive << ( o_result_m_req_m_trig_req );

  SC_METHOD(drive_o_result_data);
  sensitive << ( o_result_data_slice );

}
// resource: regr_en_11
void Gaussian_Blur::drive_o_result_data_slice(){
  switch( (sc_uint<1>)(stall0.read()) ) {
  case 1ULL: 
    break;
  case 0ULL: 
    o_result_data_slice = (sc_int<11> ) (Gaussian_Blur_N_Mux_11_2_1_4_65_out1
                          .read());
    break;
  }
}
// resource: mux_1bx2i2c
// resource: regr_en_ss_1
void Gaussian_Blur::drive_i_rgb_m_busy_req_0(){
  if ( (i_rst.read() == 0ULL) ) {
    i_rgb_m_busy_req_0 = 1ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    case 0ULL: 
      switch( (sc_uint<9>)(global_state.read()) ) {
      case 2ULL: 
        if ( (!s_reg_64.read() && !Gaussian_Blur_LessThan_4Sx3S_1U_4_13_out1
             .read()) ) {
          i_rgb_m_busy_req_0 = 0ULL;
        } 
        break;
      case 3ULL: case 273ULL: 
        i_rgb_m_busy_req_0 = 1ULL;
        break;
      case 4ULL: 
        switch( (sc_int<10>)(Gaussian_Blur_Add_9Sx9S_10S_4_17_out1.read()) ) {
        default:
          i_rgb_m_busy_req_0 = 0ULL;
          break;
        case 256LL: 
          if ( (3LL != Gaussian_Blur_Add_3Sx2U_4S_4_18_out1.read()) ) {
            i_rgb_m_busy_req_0 = 0ULL;
          } 
          break;
        }
        break;
      case 264ULL: 
        if ( ((3ULL == s_reg_63.read()) && Gaussian_Blur_And_1Ux1U_1U_4_25_out1
             .read()) ) {
          i_rgb_m_busy_req_0 = 0ULL;
        } 
        break;
      case 274ULL: 
        if ( (256ULL != s_reg_65.read()) ) {
          i_rgb_m_busy_req_0 = 0ULL;
        } 
        break;
      case 295ULL: 
        if ( ((256LL == Gaussian_Blur_Add_9Sx9S_10S_4_67_out1.read()) && 
             Gaussian_Blur_And_1Ux1U_1U_4_25_out1.read()) ) {
          i_rgb_m_busy_req_0 = 0ULL;
        } 
        break;
      }
      break;
    }
  }
}
// resource: regr_en_sc_1
void Gaussian_Blur::drive_o_result_m_req_m_trig_req(){
  if ( (i_rst.read() == 0ULL) ) {
    o_result_m_req_m_trig_req = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    case 0ULL: 
      switch( (sc_uint<9>)(global_state.read()) ) {
      case 293ULL: 
        o_result_m_req_m_trig_req = (sc_uint<1> ) (
                                    Gaussian_Blur_Not_1U_1U_1_3_out1.read());
        break;
      }
      break;
    }
  }
}
// resource: mux_1bx3i1c
void Gaussian_Blur::drive_stall0(){
  switch( (sc_uint<9>)(global_state.read()) ) {
  default:
    stall0 = 0ULL;
    break;
  case 3ULL: case 273ULL: 
    stall0 = (sc_uint<1> )Gaussian_Blur_gen_busy_r_4_70_out1.read();
    break;
  case 294ULL: 
    stall0 = Gaussian_Blur_And_1Ux1U_1U_4_68_out1.read();
    break;
  }
}
// resource: mux_4bx2i1c
void Gaussian_Blur::drive_u_u0_mi51(){
  if ( (!cycle2_state.read() && !s_reg_64.read()) ) {
    u_u0_mi51 = 0LL;
  } else {
    if ( cycle1_state.read() ) {
      u_u0_mi51 = 0LL;
    } else {
      u_u0_mi51 = (sc_int<4> ) (Gaussian_Blur_Add_3Sx2U_4S_4_10_out1.read());
    }
  }
}
// resource: mux_1bx2i1c
// resource: regr_en_1
void Gaussian_Blur::drive_drain(){
  switch( (sc_uint<1>)(stall0.read()) ) {
  case 1ULL: 
    break;
  case 0ULL: 
    switch( (sc_uint<9>)(global_state.read()) ) {
    case 264ULL: 
      if ( ((3ULL == s_reg_63.read()) && !Gaussian_Blur_And_1Ux1U_1U_4_25_out1
           .read()) ) {
        drain = 0ULL;
      } 
      break;
    case 272ULL: 
      if ( (3ULL == s_reg_63.read()) ) {
        drain = 0ULL;
      } 
      break;
    case 291ULL: 
      drain = 0ULL;
      break;
    case 295ULL: 
      switch( (sc_int<10>)(Gaussian_Blur_Add_9Sx9S_10S_4_67_out1.read()) ) {
      default:
        drain = 0ULL;
        break;
      case 256LL: 
        if ( (!Gaussian_Blur_And_1Ux1U_1U_4_25_out1.read() && (254LL != 
             Gaussian_Blur_Add_32Sx2S_32S_1_66_out1.read())) ) {
          drain = 0ULL;
        } 
        break;
      }
      break;
    case 296ULL: 
      if ( (!cycle2_state.read() && !s_reg_64.read()) ) {
        if ( Gaussian_Blur_LessThan_4Sx3S_1U_4_13_out1.read() ) {
          drain = 0ULL;
        } else {
          }
      } else {
        if ( cycle1_state.read() );
        else {
          drain = (sc_uint<1> ) (Gaussian_Blur_Equal_1Ux1U_1U_1_1_out1.read());
        }
      }
      break;
    }
    break;
  }
}
// resource: mux_4bx2i0c
// resource: regr_en_4
void Gaussian_Blur::drive_s_reg_61(){
  switch( (sc_uint<1>)(stall0.read()) ) {
  case 1ULL: 
    break;
  case 0ULL: 
    switch( (sc_uint<9>)(global_state.read()) ) {
    case 0ULL: 
      s_reg_61 = (sc_uint<4> ) (Gaussian_Blur_Add_3Sx2U_4S_4_6_out1.read());
      break;
    case 2ULL: 
      if ( s_reg_64.read() );
      else {
        s_reg_61 = (sc_uint<4> ) (Gaussian_Blur_Add_3Sx2U_4S_4_6_out1.read());
      }
      break;
    case 264ULL: 
      if ( ((3ULL == s_reg_63.read()) && !Gaussian_Blur_And_1Ux1U_1U_4_25_out1
           .read()) ) {
        s_reg_61 = (sc_uint<4> ) (Gaussian_Blur_Add_3Sx2U_4S_4_43_out1.read());
      } 
      break;
    case 272ULL: 
      if ( (3ULL == s_reg_63.read()) ) {
        s_reg_61 = (sc_uint<4> ) (Gaussian_Blur_Add_3Sx2U_4S_4_43_out1.read());
      } 
      break;
    case 291ULL: 
      s_reg_61 = (sc_uint<4> ) (Gaussian_Blur_Add_3Sx2U_4S_4_43_out1.read());
      break;
    case 295ULL: 
      switch( (sc_int<10>)(Gaussian_Blur_Add_9Sx9S_10S_4_67_out1.read()) ) {
      default:
        s_reg_61 = (sc_uint<4> ) (Gaussian_Blur_Add_3Sx2U_4S_4_43_out1.read());
        break;
      case 256LL: 
        if ( (!Gaussian_Blur_And_1Ux1U_1U_4_25_out1.read() && (254LL != 
             Gaussian_Blur_Add_32Sx2S_32S_1_66_out1.read())) ) {
          s_reg_61 = (sc_uint<4> ) (Gaussian_Blur_Add_3Sx2U_4S_4_43_out1.read())
          ;
        } 
        break;
      }
      break;
    case 296ULL: 
      if ( (!cycle2_state.read() && (!s_reg_64.read() && 
           Gaussian_Blur_LessThan_4Sx3S_1U_4_13_out1.read())) ) {
        s_reg_61 = (sc_uint<4> ) (Gaussian_Blur_Add_3Sx2U_4S_4_43_out1.read());
      } 
      break;
    }
    break;
  }
}
// resource: mux_4bx3i1c
// resource: regr_en_4
void Gaussian_Blur::drive_s_reg_62(){
  switch( (sc_uint<1>)(stall0.read()) ) {
  case 1ULL: 
    break;
  case 0ULL: 
    switch( (sc_uint<9>)(global_state.read()) ) {
    case 0ULL: 
      s_reg_62 = Gaussian_Blur_Mul_2Ux2U_4U_4_8_out1.read();
      break;
    case 2ULL: 
      if ( s_reg_64.read() );
      else {
        s_reg_62 = Gaussian_Blur_Mul_2Ux2U_4U_4_8_out1.read();
      }
      break;
    case 264ULL: 
      if ( ((3ULL == s_reg_63.read()) && !Gaussian_Blur_And_1Ux1U_1U_4_25_out1
           .read()) ) {
        s_reg_62 = 0ULL;
      } 
      break;
    case 272ULL: 
      if ( (3ULL == s_reg_63.read()) ) {
        s_reg_62 = 0ULL;
      } 
      break;
    case 291ULL: 
      s_reg_62 = 0ULL;
      break;
    case 295ULL: 
      switch( (sc_int<10>)(Gaussian_Blur_Add_9Sx9S_10S_4_67_out1.read()) ) {
      default:
        s_reg_62 = 0ULL;
        break;
      case 256LL: 
        if ( (!Gaussian_Blur_And_1Ux1U_1U_4_25_out1.read() && (254LL != 
             Gaussian_Blur_Add_32Sx2S_32S_1_66_out1.read())) ) {
          s_reg_62 = 0ULL;
        } 
        break;
      }
      break;
    case 296ULL: 
      if ( (!cycle2_state.read() && (!s_reg_64.read() && 
           Gaussian_Blur_LessThan_4Sx3S_1U_4_13_out1.read())) ) {
        s_reg_62 = s_reg_61.read();
      } 
      break;
    }
    break;
  }
}
// resource: mux_4bx9i2c
// resource: regr_en_4
void Gaussian_Blur::drive_s_reg_63(){
  switch( (sc_uint<1>)(stall0.read()) ) {
  case 1ULL: 
    break;
  case 0ULL: 
    switch( (sc_uint<9>)(global_state.read()) ) {
    case 0ULL: 
      s_reg_63 = 0ULL;
      break;
    case 1ULL: 
      s_reg_63 = (sc_uint<4> ) (Gaussian_Blur_Add_3Sx2U_4S_4_10_out1.read());
      break;
    case 2ULL: 
      if ( s_reg_64.read() );
      else {
        if ( Gaussian_Blur_LessThan_4Sx3S_1U_4_13_out1.read() ) {
          s_reg_63 = 0ULL;
        } else {
          s_reg_63 = 1ULL;
        }
      }
      break;
    case 4ULL: 
      if ( (256LL == Gaussian_Blur_Add_9Sx9S_10S_4_17_out1.read()) ) {
        if ( (3LL != Gaussian_Blur_Add_3Sx2U_4S_4_18_out1.read()) ) {
          s_reg_63 = (sc_uint<4> ) (Gaussian_Blur_Add_3Sx2U_4S_4_18_out1.read())
          ;
        } 
      } 
      break;
    case 262ULL: 
      s_reg_63 = (sc_uint<4> ) (Gaussian_Blur_Add_3Sx2U_4S_4_19_out1.read());
      break;
    case 264ULL: 
      switch( (sc_uint<4>)(s_reg_63.read()) ) {
      default:
        s_reg_63 = (sc_uint<4> ) (Gaussian_Blur_Add_3Sx2U_4S_4_19_out1.read());
        break;
      case 3ULL: 
        if ( Gaussian_Blur_And_1Ux1U_1U_4_25_out1.read() ) {
          s_reg_63 = (sc_uint<4> ) ((sc_int<2> )
                     Gaussian_Blur_N_Mux_2_2_0_4_29_out1.read());
        } 
        break;
      }
      break;
    case 266ULL: 
      switch( (sc_int<10>)(Gaussian_Blur_Add_9Sx9S_10S_4_32_out1.read()) ) {
      default:
        s_reg_63 = (sc_uint<4> ) ((sc_int<2> )s_reg_63.read());
        break;
      case 256LL: 
        s_reg_63 = 0ULL;
        break;
      }
      break;
    case 271ULL: 
      s_reg_63 = (sc_uint<4> ) (Gaussian_Blur_Add_3Sx2U_4S_4_42_out1.read());
      break;
    case 274ULL: 
      if ( (256ULL != s_reg_65.read()) ) {
        s_reg_63 = (sc_uint<4> ) ((sc_int<2> )s_reg_63.read());
      } 
      break;
    case 295ULL: 
      if ( (256LL == Gaussian_Blur_Add_9Sx9S_10S_4_67_out1.read()) ) {
        if ( Gaussian_Blur_And_1Ux1U_1U_4_25_out1.read() ) {
          s_reg_63 = (sc_uint<4> ) ((sc_int<2> )
                     Gaussian_Blur_N_Mux_2_2_0_4_29_out1.read());
        } else {
          if ( (254LL == Gaussian_Blur_Add_32Sx2S_32S_1_66_out1.read()) ) {
            s_reg_63 = (sc_uint<4> ) ((sc_int<2> )
                       Gaussian_Blur_N_Mux_2_2_0_4_29_out1.read());
          } 
        }
      } 
      break;
    case 296ULL: 
      if ( (!cycle2_state.read() && !s_reg_64.read()) ) {
        if ( drain.read() );
        else {
          s_reg_63 = (sc_uint<4> ) (u_u0_mi51.read());
        }
      } else {
        if ( cycle1_state.read() ) {
          if ( drain.read() );
          else {
            s_reg_63 = (sc_uint<4> ) (u_u0_mi51.read());
          }
        } else {
          if ( Gaussian_Blur_Equal_1Ux1U_1U_1_1_out1.read() );
          else {
            s_reg_63 = (sc_uint<4> ) (u_u0_mi51.read());
          }
        }
      }
      break;
    }
    break;
  }
}
// resource: regr_en_1
void Gaussian_Blur::drive_s_reg_64(){
  switch( (sc_uint<1>)(stall0.read()) ) {
  case 1ULL: 
    break;
  case 0ULL: 
    switch( (sc_uint<9>)(global_state.read()) ) {
    case 1ULL: 
      s_reg_64 = Gaussian_Blur_LessThan_4Sx3S_1U_4_12_out1.read();
      break;
    case 296ULL: 
      if ( (!cycle2_state.read() && !s_reg_64.read()) ) {
        } else {
        if ( cycle1_state.read() );
        else {
          s_reg_64 = Gaussian_Blur_LessThan_4Sx3S_1U_4_12_out1.read();
        }
      }
      break;
    }
    break;
  }
}
// resource: mux_10bx3i0c
// resource: regr_en_10
void Gaussian_Blur::drive_s_reg_65(){
  switch( (sc_uint<1>)(stall0.read()) ) {
  case 1ULL: 
    break;
  case 0ULL: 
    switch( (sc_uint<9>)(global_state.read()) ) {
    case 2ULL: case 262ULL: 
      s_reg_65 = Gaussian_Blur_Mul_9Ux2U_10U_4_14_out1.read();
      break;
    case 4ULL: 
      if ( ((256LL == Gaussian_Blur_Add_9Sx9S_10S_4_17_out1.read()) && (3LL != 
           Gaussian_Blur_Add_3Sx2U_4S_4_18_out1.read())) ) {
        s_reg_65 = Gaussian_Blur_Mul_9Ux2U_10U_4_14_out1.read();
      } 
      break;
    case 264ULL: 
      switch( (sc_uint<4>)(s_reg_63.read()) ) {
      default:
        s_reg_65 = Gaussian_Blur_Mul_9Ux2U_10U_4_14_out1.read();
        break;
      case 3ULL: 
        if ( Gaussian_Blur_And_1Ux1U_1U_4_25_out1.read() ) {
          s_reg_65 = (sc_uint<10> ) (Gaussian_Blur_Add_9Sx9S_10S_4_30_out1
                     .read());
        } 
        break;
      }
      break;
    case 274ULL: 
      if ( (256ULL != s_reg_65.read()) ) {
        s_reg_65 = (sc_uint<10> ) (Gaussian_Blur_Add_9Sx9S_10S_4_30_out1.read())
        ;
      } 
      break;
    case 295ULL: 
      if ( ((256LL == Gaussian_Blur_Add_9Sx9S_10S_4_67_out1.read()) && 
           Gaussian_Blur_And_1Ux1U_1U_4_25_out1.read()) ) {
        s_reg_65 = (sc_uint<10> ) (Gaussian_Blur_Add_9Sx9S_10S_4_30_out1.read())
        ;
      } 
      break;
    case 296ULL: 
      if ( (!cycle2_state.read() && (!s_reg_64.read() && !
           Gaussian_Blur_LessThan_4Sx3S_1U_4_13_out1.read())) ) {
        s_reg_65 = (sc_uint<10> ) (Gaussian_Blur_Add_9Sx9S_10S_4_58_out1.read())
        ;
      } 
      break;
    }
    break;
  }
}
// resource: mux_11bx2i0c
// resource: regr_en_11
void Gaussian_Blur::drive_s_reg_66(){
  switch( (sc_uint<1>)(stall0.read()) ) {
  case 1ULL: 
    break;
  case 0ULL: 
    switch( (sc_uint<9>)(global_state.read()) ) {
    case 2ULL: 
      s_reg_66 = (sc_uint<11> ) ((sc_int<10> )
                 Gaussian_Blur_Add_9Sx9S_10S_4_15_out1.read());
      break;
    case 4ULL: 
      switch( (sc_int<10>)(Gaussian_Blur_Add_9Sx9S_10S_4_17_out1.read()) ) {
      default:
        s_reg_66 = (sc_uint<11> ) ((sc_int<10> )
                   Gaussian_Blur_Add_9Sx9S_10S_4_15_out1.read());
        break;
      case 256LL: 
        if ( (3LL != Gaussian_Blur_Add_3Sx2U_4S_4_18_out1.read()) ) {
          s_reg_66 = (sc_uint<11> ) ((sc_int<10> )
                     Gaussian_Blur_Add_9Sx9S_10S_4_15_out1.read());
        } 
        break;
      }
      break;
    case 292ULL: 
      s_reg_66 = Gaussian_Blur_Div_11Ux2U_11U_4_61_out1.read();
      break;
    }
    break;
  }
}
// resource: mux_32bx2i1c
// resource: regr_en_32
void Gaussian_Blur::drive_s_reg_67(){
  switch( (sc_uint<1>)(stall0.read()) ) {
  case 1ULL: 
    break;
  case 0ULL: 
    switch( (sc_uint<9>)(global_state.read()) ) {
    case 264ULL: 
      if ( (3ULL == s_reg_63.read()) ) {
        s_reg_67 = 4294967295ULL;
      } 
      break;
    case 295ULL: 
      if ( (256LL == Gaussian_Blur_Add_9Sx9S_10S_4_67_out1.read()) ) {
        s_reg_67 = (sc_uint<32> ) (Gaussian_Blur_Add_32Sx2S_32S_1_66_out1.read()
                   );
      } 
      break;
    }
    break;
  }
}
// resource: mux_8bx5i1c
// resource: regr_en_8
void Gaussian_Blur::drive_s_reg_68_slice_slice(){
  switch( (sc_uint<1>)(stall0.read()) ) {
  case 1ULL: 
    break;
  case 0ULL: 
    switch( (sc_uint<9>)(global_state.read()) ) {
    case 2ULL: case 291ULL: 
      s_reg_68_slice1 = 0LL;
      break;
    case 4ULL: 
      switch( (sc_int<10>)(Gaussian_Blur_Add_9Sx9S_10S_4_17_out1.read()) ) {
      default:
        s_reg_68_slice1 = (sc_int<8> )Gaussian_Blur_Add_9Sx9S_10S_4_17_out1
                          .read();
        break;
      case 256LL: 
        if ( (3LL != Gaussian_Blur_Add_3Sx2U_4S_4_18_out1.read()) ) {
          s_reg_68_slice1 = 0LL;
        } 
        break;
      }
      break;
    case 264ULL: case 272ULL: 
      if ( (3ULL == s_reg_63.read()) ) {
        s_reg_68_slice1 = 0LL;
      } 
      break;
    case 266ULL: 
      if ( (256LL != Gaussian_Blur_Add_9Sx9S_10S_4_32_out1.read()) ) {
        s_reg_68_slice1 = (sc_int<8> )Gaussian_Blur_Add_9Sx9S_10S_4_32_out1
                          .read();
      } 
      break;
    case 274ULL: 
      if ( (256ULL != s_reg_65.read()) ) {
        s_reg_68_slice1 = (sc_int<8> )s_reg_65.read();
      } 
      break;
    case 295ULL: 
      switch( (sc_int<10>)(Gaussian_Blur_Add_9Sx9S_10S_4_67_out1.read()) ) {
      default:
        s_reg_68_slice1 = (sc_int<8> )Gaussian_Blur_Add_9Sx9S_10S_4_67_out1
                          .read();
        break;
      case 256LL: 
        s_reg_68_slice1 = 0LL;
        break;
      }
      break;
    }
    break;
  }
}
// resource: mux_9bx3i1c
// resource: regr_en_9
void Gaussian_Blur::drive_s_reg_69(){
  switch( (sc_uint<1>)(stall0.read()) ) {
  case 1ULL: 
    break;
  case 0ULL: 
    switch( (sc_uint<9>)(global_state.read()) ) {
    case 264ULL: 
      if ( ((3ULL == s_reg_63.read()) && !Gaussian_Blur_And_1Ux1U_1U_4_25_out1
           .read()) ) {
        s_reg_69 = 0ULL;
      } 
      break;
    case 267ULL: case 274ULL: case 280ULL: case 286ULL: 
      s_reg_69 = filter_out1.read();
      break;
    case 272ULL: 
      if ( (3ULL == s_reg_63.read()) ) {
        s_reg_69 = 0ULL;
      } 
      break;
    case 291ULL: 
      s_reg_69 = 0ULL;
      break;
    case 295ULL: 
      switch( (sc_int<10>)(Gaussian_Blur_Add_9Sx9S_10S_4_67_out1.read()) ) {
      default:
        s_reg_69 = 0ULL;
        break;
      case 256LL: 
        if ( (!Gaussian_Blur_And_1Ux1U_1U_4_25_out1.read() && (254LL != 
             Gaussian_Blur_Add_32Sx2S_32S_1_66_out1.read())) ) {
          s_reg_69 = 0ULL;
        } 
        break;
      }
      break;
    case 296ULL: 
      if ( (!cycle2_state.read() && !s_reg_64.read()) ) {
        s_reg_69 = Gaussian_Blur_Add_9Ux9U_9U_4_53_out1.read();
      } else {
        if ( cycle1_state.read() );
        else {
          if ( cycle2_state.read() );
          else {
            s_reg_69 = Gaussian_Blur_Add_9Ux9U_9U_4_53_out1.read();
          }
        }
      }
      break;
    }
    break;
  }
}
// resource: mux_9bx2i1c
// resource: regr_en_9
void Gaussian_Blur::drive_s_reg_70(){
  switch( (sc_uint<1>)(stall0.read()) ) {
  case 1ULL: 
    break;
  case 0ULL: 
    switch( (sc_uint<9>)(global_state.read()) ) {
    case 264ULL: 
      if ( ((3ULL == s_reg_63.read()) && !Gaussian_Blur_And_1Ux1U_1U_4_25_out1
           .read()) ) {
        s_reg_70 = 0ULL;
      } 
      break;
    case 272ULL: 
      if ( (3ULL == s_reg_63.read()) ) {
        s_reg_70 = 0ULL;
      } 
      break;
    case 291ULL: 
      s_reg_70 = 0ULL;
      break;
    case 295ULL: 
      switch( (sc_int<10>)(Gaussian_Blur_Add_9Sx9S_10S_4_67_out1.read()) ) {
      default:
        s_reg_70 = 0ULL;
        break;
      case 256LL: 
        if ( (!Gaussian_Blur_And_1Ux1U_1U_4_25_out1.read() && (254LL != 
             Gaussian_Blur_Add_32Sx2S_32S_1_66_out1.read())) ) {
          s_reg_70 = 0ULL;
        } 
        break;
      }
      break;
    case 296ULL: 
      if ( (!cycle2_state.read() && !s_reg_64.read()) ) {
        s_reg_70 = Gaussian_Blur_Add_9Ux9U_9U_4_54_out1.read();
      } else {
        if ( cycle1_state.read() );
        else {
          if ( cycle2_state.read() );
          else {
            s_reg_70 = Gaussian_Blur_Add_9Ux9U_9U_4_54_out1.read();
          }
        }
      }
      break;
    }
    break;
  }
}
// resource: mux_9bx2i1c
// resource: regr_en_9
void Gaussian_Blur::drive_s_reg_71(){
  switch( (sc_uint<1>)(stall0.read()) ) {
  case 1ULL: 
    break;
  case 0ULL: 
    switch( (sc_uint<9>)(global_state.read()) ) {
    case 264ULL: 
      if ( ((3ULL == s_reg_63.read()) && !Gaussian_Blur_And_1Ux1U_1U_4_25_out1
           .read()) ) {
        s_reg_71 = 0ULL;
      } 
      break;
    case 272ULL: 
      if ( (3ULL == s_reg_63.read()) ) {
        s_reg_71 = 0ULL;
      } 
      break;
    case 291ULL: 
      s_reg_71 = 0ULL;
      break;
    case 295ULL: 
      switch( (sc_int<10>)(Gaussian_Blur_Add_9Sx9S_10S_4_67_out1.read()) ) {
      default:
        s_reg_71 = 0ULL;
        break;
      case 256LL: 
        if ( (!Gaussian_Blur_And_1Ux1U_1U_4_25_out1.read() && (254LL != 
             Gaussian_Blur_Add_32Sx2S_32S_1_66_out1.read())) ) {
          s_reg_71 = 0ULL;
        } 
        break;
      }
      break;
    case 296ULL: 
      if ( (!cycle2_state.read() && !s_reg_64.read()) ) {
        s_reg_71 = Gaussian_Blur_Add_9Ux9U_9U_4_56_out1.read();
      } else {
        if ( cycle1_state.read() );
        else {
          if ( cycle2_state.read() );
          else {
            s_reg_71 = Gaussian_Blur_Add_9Ux9U_9U_4_56_out1.read();
          }
        }
      }
      break;
    }
    break;
  }
}
// resource: regr_en_4
void Gaussian_Blur::drive_s_reg_72(){
  switch( (sc_uint<1>)(stall0.read()) ) {
  case 1ULL: 
    break;
  case 0ULL: 
    s_reg_72 = (sc_uint<4> )Gaussian_Blur_Add_5Sx2U_5S_4_45_out1.read();
    break;
  }
}
// resource: mux_2bx2i1c
void Gaussian_Blur::drive_Gaussian_Blur_Add_3Sx2U_4S_4_6_in1(){
  if ( gs_ctrl0.read() ) {
    Gaussian_Blur_Add_3Sx2U_4S_4_6_in1 = (sc_uint<2> )s_reg_61.read();
  } else {
    Gaussian_Blur_Add_3Sx2U_4S_4_6_in1 = 0ULL;
  }
}
// resource: Gaussian_Blur_Add_3Sx2U_4S_4  instance: Gaussian_Blur_Add_3Sx2U_4S_4_6
void Gaussian_Blur::Gaussian_Blur_Add_3Sx2U_4S_4_6(){
  Gaussian_Blur_Add_3Sx2U_4S_4_6_out1 = (Gaussian_Blur_Add_3Sx2U_4S_4_6_in1
                                        .read() + 1LL);
}
// resource: Gaussian_Blur_Mul_2Ux2U_4U_4  instance: Gaussian_Blur_Mul_2Ux2U_4U_4_8
void Gaussian_Blur::Gaussian_Blur_Mul_2Ux2U_4U_4_8(){
  Gaussian_Blur_Mul_2Ux2U_4U_4_8_out1 = Gaussian_Blur_Add_3Sx2U_4S_4_6_in1
                                        .read() * 3ULL;
}
// resource: mux_4bx2i0c
void Gaussian_Blur::drive_Gaussian_Blur_Add_5Sx2U_5S_4_9_in2_slice(){
  if ( gs_ctrl0.read() ) {
    if ( s_reg_64.read() ) {
      Gaussian_Blur_Add_5Sx2U_5S_4_9_in2_slice = (sc_int<4> ) (s_reg_62.read());
    } else {
      Gaussian_Blur_Add_5Sx2U_5S_4_9_in2_slice = (sc_int<4> ) (Gaussian_Blur_Mul_2Ux2U_4U_4_8_out1
                                                 .read());
    }
  } else {
    Gaussian_Blur_Add_5Sx2U_5S_4_9_in2_slice = (sc_int<4> ) (Gaussian_Blur_Mul_2Ux2U_4U_4_8_out1
                                               .read());
  }
}
// resource: mux_2bx2i1c
void Gaussian_Blur::drive_Gaussian_Blur_Add_5Sx2U_5S_4_9_in1(){
  if ( gs_ctrl0.read() ) {
    if ( s_reg_64.read() ) {
      Gaussian_Blur_Add_5Sx2U_5S_4_9_in1 = (sc_uint<2> )s_reg_63.read();
    } else {
      Gaussian_Blur_Add_5Sx2U_5S_4_9_in1 = 0ULL;
    }
  } else {
    Gaussian_Blur_Add_5Sx2U_5S_4_9_in1 = 0ULL;
  }
}
// resource: Gaussian_Blur_Add_5Sx2U_5S_4  instance: Gaussian_Blur_Add_5Sx2U_5S_4_9
void Gaussian_Blur::Gaussian_Blur_Add_5Sx2U_5S_4_9(){
  Gaussian_Blur_Add_5Sx2U_5S_4_9_out1 = (( (sc_int<5> )(sc_bv<5>)((sc_bv<1>)(
                                        0ULL), 
                                        (sc_bv<4>)(
                                        Gaussian_Blur_Add_5Sx2U_5S_4_9_in2_slice
                                        .read())) ) + 
                                        Gaussian_Blur_Add_5Sx2U_5S_4_9_in1
                                        .read());
}
// resource: Gaussian_Blur_Add_3Sx2U_4S_4  instance: Gaussian_Blur_Add_3Sx2U_4S_4_10
void Gaussian_Blur::Gaussian_Blur_Add_3Sx2U_4S_4_10(){
  Gaussian_Blur_Add_3Sx2U_4S_4_10_out1 = ((sc_uint<2> )s_reg_63.read() + 1LL);
}
// resource: Gaussian_Blur_Add_5Sx2U_5S_4  instance: Gaussian_Blur_Add_5Sx2U_5S_4_11
void Gaussian_Blur::Gaussian_Blur_Add_5Sx2U_5S_4_11(){
  Gaussian_Blur_Add_5Sx2U_5S_4_11_out1 = ((sc_int<5> )s_reg_62.read() + (
                                         sc_uint<2> )s_reg_63.read());
}
// resource: Gaussian_Blur_LessThan_4Sx3S_1U_4  instance: Gaussian_Blur_LessThan_4Sx3S_1U_4_12
void Gaussian_Blur::Gaussian_Blur_LessThan_4Sx3S_1U_4_12(){
  Gaussian_Blur_LessThan_4Sx3S_1U_4_12_out1 = (/*imp*/sc_uint<1>)((sc_int<4> )Gaussian_Blur_Add_3Sx2U_4S_4_10_out1
                                              .read() < (sc_int<3> )3LL);
}
void Gaussian_Blur::drive_filter_const_in1(){
  filter_const_in1 = (sc_uint<4> )Gaussian_Blur_Add_5Sx2U_5S_4_9_out1.read();
}
// resource: mux_4bx15i9c
void Gaussian_Blur::drive_filter_in1(){
  switch( (sc_uint<4>)(gs_ctrl4.read()) ) {
  default:
    filter_in1 = (sc_uint<4> )Gaussian_Blur_Add_5Sx2U_5S_4_11_out1.read();
    break;
  case 1ULL: 
    filter_in1 = Gaussian_Blur_Add_3Ux2U_4U_4_37_out1.read();
    break;
  case 2ULL: 
    filter_in1 = (sc_uint<4> ) (Gaussian_Blur_Add_2Ux2U_3U_4_41_out1.read());
    break;
  case 3ULL: 
    filter_in1 = Gaussian_Blur_Add_3Ux2U_4U_4_40_out1.read();
    break;
  case 4ULL: 
    filter_in1 = (sc_uint<4> ) ((sc_uint<2> )s_reg_63.read());
    break;
  case 5ULL: 
    filter_in1 = 6ULL;
    break;
  case 6ULL: 
    filter_in1 = 3ULL;
    break;
  case 7ULL: 
    filter_in1 = 0ULL;
    break;
  case 8ULL: 
    filter_in1 = 7ULL;
    break;
  case 9ULL: 
    filter_in1 = 4ULL;
    break;
  case 10ULL: 
    filter_in1 = 1ULL;
    break;
  case 11ULL: 
    filter_in1 = 8ULL;
    break;
  case 12ULL: 
    filter_in1 = 5ULL;
    break;
  case 13ULL: 
    filter_in1 = 2ULL;
    break;
  case 14ULL: 
    filter_in1 = s_reg_72.read();
    break;
  }
}
// resource: mux_9bx3i0c
void Gaussian_Blur::drive_filter_DIN(){
  switch( (sc_uint<2>)(gs_ctrl5.read()) ) {
  default:
    filter_DIN = filter_const_out1.read();
    break;
  case 1ULL: 
    filter_DIN = filter_out1.read();
    break;
  case 2ULL: 
    filter_DIN = s_reg_69.read();
    break;
  }
}
// resource: mux_1bx2i2c
void Gaussian_Blur::drive_filter_CE(){
  if ( stall0.read() ) {
    filter_CE = 0ULL;
  } else {
    switch( (sc_uint<3>)(gs_ctrl6.read()) ) {
    default:
      filter_CE = 0ULL;
      break;
    case 1ULL: 
      filter_CE = 1ULL;
      break;
    case 2ULL: 
      if ( (256LL == Gaussian_Blur_Add_9Sx9S_10S_4_32_out1.read()) ) {
        filter_CE = 1ULL;
      } else {
        filter_CE = 0ULL;
      }
      break;
    case 3ULL: 
      if ( (3ULL != s_reg_63.read()) ) {
        filter_CE = 1ULL;
      } else {
        filter_CE = 0ULL;
      }
      break;
    case 4ULL: 
      if ( (256ULL == s_reg_65.read()) ) {
        filter_CE = 1ULL;
      } else {
        filter_CE = 0ULL;
      }
      break;
    case 5ULL: 
      if ( (!cycle2_state.read() && !s_reg_64.read()) ) {
        filter_CE = 0ULL;
      } else {
        if ( cycle1_state.read() ) {
          filter_CE = 0ULL;
        } else {
          filter_CE = 1ULL;
        }
      }
      break;
    }
  }
}
// resource: mux_1bx2i2c
void Gaussian_Blur::drive_filter_RW(){
  if ( stall0.read() ) {
    filter_RW = 0ULL;
  } else {
    if ( gs_ctrl7.read() ) {
      filter_RW = 1ULL;
    } else {
      filter_RW = 0ULL;
    }
  }
}
// resource: Gaussian_Blur_LessThan_4Sx3S_1U_4  instance: Gaussian_Blur_LessThan_4Sx3S_1U_4_13
void Gaussian_Blur::Gaussian_Blur_LessThan_4Sx3S_1U_4_13(){
  Gaussian_Blur_LessThan_4Sx3S_1U_4_13_out1 = (/*imp*/sc_uint<1>)((sc_int<4> )
                                              s_reg_61.read() < (sc_int<3> )3LL)
  ;
}
// resource: mux_2bx5i2c
void Gaussian_Blur::drive_Gaussian_Blur_Mul_9Ux2U_10U_4_14_in1(){
  switch( (sc_uint<3>)(gs_ctrl8.read()) ) {
  default:
    Gaussian_Blur_Mul_9Ux2U_10U_4_14_in1 = 1ULL;
    break;
  case 1ULL: 
    Gaussian_Blur_Mul_9Ux2U_10U_4_14_in1 = (sc_uint<2> )
                                           Gaussian_Blur_Add_3Sx2U_4S_4_18_out1
                                           .read();
    break;
  case 2ULL: 
    Gaussian_Blur_Mul_9Ux2U_10U_4_14_in1 = 0ULL;
    break;
  case 3ULL: 
    Gaussian_Blur_Mul_9Ux2U_10U_4_14_in1 = (sc_uint<2> )s_reg_63.read();
    break;
  case 4ULL: 
    Gaussian_Blur_Mul_9Ux2U_10U_4_14_in1 = (sc_uint<2> )s_reg_62.read();
    break;
  }
}
// resource: Gaussian_Blur_Mul_9Ux2U_10U_4  instance: Gaussian_Blur_Mul_9Ux2U_10U_4_14
void Gaussian_Blur::Gaussian_Blur_Mul_9Ux2U_10U_4_14(){
  Gaussian_Blur_Mul_9Ux2U_10U_4_14_out1 = Gaussian_Blur_Mul_9Ux2U_10U_4_14_in1
                                          .read() * 258ULL;
}
// resource: mux_8bx2i1c
void Gaussian_Blur::drive_Gaussian_Blur_Add_9Sx9S_10S_4_15_in2_slice(){
  if ( gs_ctrl9.read() ) {
    switch( (sc_int<10>)(Gaussian_Blur_Add_9Sx9S_10S_4_17_out1.read()) ) {
    default:
      Gaussian_Blur_Add_9Sx9S_10S_4_15_in2_slice = (sc_int<8> )Gaussian_Blur_Add_9Sx9S_10S_4_17_out1
                                                   .read();
      break;
    case 256LL: 
      Gaussian_Blur_Add_9Sx9S_10S_4_15_in2_slice = 0LL;
      break;
    }
  } else {
    Gaussian_Blur_Add_9Sx9S_10S_4_15_in2_slice = 0LL;
  }
}
// resource: Gaussian_Blur_Add_9Sx9S_10S_4  instance: Gaussian_Blur_Add_9Sx9S_10S_4_15
void Gaussian_Blur::Gaussian_Blur_Add_9Sx9S_10S_4_15(){
  Gaussian_Blur_Add_9Sx9S_10S_4_15_out1 = (( (sc_int<9> )(sc_bv<9>)((sc_bv<1>)(
                                          0ULL), 
                                          (sc_bv<8>)(Gaussian_Blur_Add_9Sx9S_10S_4_15_in2_slice
                                          .read())) ) + 1LL);
}
// resource: Gaussian_Blur_Add_10Ux10U_10U_4  instance: Gaussian_Blur_Add_10Ux10U_10U_4_16
void Gaussian_Blur::Gaussian_Blur_Add_10Ux10U_10U_4_16(){
  Gaussian_Blur_Add_10Ux10U_10U_4_16_out1 = (s_reg_65.read() + (sc_uint<10> )
                                            s_reg_66.read());
}
// resource: mux_10bx262i258c
void Gaussian_Blur::drive_rgb_buffer_in1(){
  switch( (sc_uint<9>)(global_state.read()) ) {
  default:
    rgb_buffer_in1 = Gaussian_Blur_Add_10Ux10U_10U_4_16_out1.read();
    break;
  case 4ULL: 
    /* state13 */
    rgb_buffer_in1 = 0ULL;
    break;
  case 5ULL: 
    rgb_buffer_in1 = 1ULL;
    break;
  case 6ULL: 
    rgb_buffer_in1 = 2ULL;
    break;
  case 7ULL: 
    rgb_buffer_in1 = 3ULL;
    break;
  case 8ULL: 
    rgb_buffer_in1 = 4ULL;
    break;
  case 9ULL: 
    rgb_buffer_in1 = 5ULL;
    break;
  case 10ULL: 
    rgb_buffer_in1 = 6ULL;
    break;
  case 11ULL: 
    rgb_buffer_in1 = 7ULL;
    break;
  case 12ULL: 
    rgb_buffer_in1 = 8ULL;
    break;
  case 13ULL: 
    rgb_buffer_in1 = 9ULL;
    break;
  case 14ULL: 
    rgb_buffer_in1 = 10ULL;
    break;
  case 15ULL: 
    rgb_buffer_in1 = 11ULL;
    break;
  case 16ULL: 
    rgb_buffer_in1 = 12ULL;
    break;
  case 17ULL: 
    rgb_buffer_in1 = 13ULL;
    break;
  case 18ULL: 
    rgb_buffer_in1 = 14ULL;
    break;
  case 19ULL: 
    rgb_buffer_in1 = 15ULL;
    break;
  case 20ULL: 
    rgb_buffer_in1 = 16ULL;
    break;
  case 21ULL: 
    rgb_buffer_in1 = 17ULL;
    break;
  case 22ULL: 
    rgb_buffer_in1 = 18ULL;
    break;
  case 23ULL: 
    rgb_buffer_in1 = 19ULL;
    break;
  case 24ULL: 
    rgb_buffer_in1 = 20ULL;
    break;
  case 25ULL: 
    rgb_buffer_in1 = 21ULL;
    break;
  case 26ULL: 
    rgb_buffer_in1 = 22ULL;
    break;
  case 27ULL: 
    rgb_buffer_in1 = 23ULL;
    break;
  case 28ULL: 
    rgb_buffer_in1 = 24ULL;
    break;
  case 29ULL: 
    rgb_buffer_in1 = 25ULL;
    break;
  case 30ULL: 
    rgb_buffer_in1 = 26ULL;
    break;
  case 31ULL: 
    rgb_buffer_in1 = 27ULL;
    break;
  case 32ULL: 
    rgb_buffer_in1 = 28ULL;
    break;
  case 33ULL: 
    rgb_buffer_in1 = 29ULL;
    break;
  case 34ULL: 
    rgb_buffer_in1 = 30ULL;
    break;
  case 35ULL: 
    rgb_buffer_in1 = 31ULL;
    break;
  case 36ULL: 
    rgb_buffer_in1 = 32ULL;
    break;
  case 37ULL: 
    rgb_buffer_in1 = 33ULL;
    break;
  case 38ULL: 
    rgb_buffer_in1 = 34ULL;
    break;
  case 39ULL: 
    rgb_buffer_in1 = 35ULL;
    break;
  case 40ULL: 
    rgb_buffer_in1 = 36ULL;
    break;
  case 41ULL: 
    rgb_buffer_in1 = 37ULL;
    break;
  case 42ULL: 
    rgb_buffer_in1 = 38ULL;
    break;
  case 43ULL: 
    rgb_buffer_in1 = 39ULL;
    break;
  case 44ULL: 
    rgb_buffer_in1 = 40ULL;
    break;
  case 45ULL: 
    rgb_buffer_in1 = 41ULL;
    break;
  case 46ULL: 
    rgb_buffer_in1 = 42ULL;
    break;
  case 47ULL: 
    rgb_buffer_in1 = 43ULL;
    break;
  case 48ULL: 
    rgb_buffer_in1 = 44ULL;
    break;
  case 49ULL: 
    rgb_buffer_in1 = 45ULL;
    break;
  case 50ULL: 
    rgb_buffer_in1 = 46ULL;
    break;
  case 51ULL: 
    rgb_buffer_in1 = 47ULL;
    break;
  case 52ULL: 
    rgb_buffer_in1 = 48ULL;
    break;
  case 53ULL: 
    rgb_buffer_in1 = 49ULL;
    break;
  case 54ULL: 
    rgb_buffer_in1 = 50ULL;
    break;
  case 55ULL: 
    rgb_buffer_in1 = 51ULL;
    break;
  case 56ULL: 
    rgb_buffer_in1 = 52ULL;
    break;
  case 57ULL: 
    rgb_buffer_in1 = 53ULL;
    break;
  case 58ULL: 
    rgb_buffer_in1 = 54ULL;
    break;
  case 59ULL: 
    rgb_buffer_in1 = 55ULL;
    break;
  case 60ULL: 
    rgb_buffer_in1 = 56ULL;
    break;
  case 61ULL: 
    rgb_buffer_in1 = 57ULL;
    break;
  case 62ULL: 
    rgb_buffer_in1 = 58ULL;
    break;
  case 63ULL: 
    rgb_buffer_in1 = 59ULL;
    break;
  case 64ULL: 
    rgb_buffer_in1 = 60ULL;
    break;
  case 65ULL: 
    rgb_buffer_in1 = 61ULL;
    break;
  case 66ULL: 
    rgb_buffer_in1 = 62ULL;
    break;
  case 67ULL: 
    rgb_buffer_in1 = 63ULL;
    break;
  case 68ULL: 
    rgb_buffer_in1 = 64ULL;
    break;
  case 69ULL: 
    rgb_buffer_in1 = 65ULL;
    break;
  case 70ULL: 
    rgb_buffer_in1 = 66ULL;
    break;
  case 71ULL: 
    rgb_buffer_in1 = 67ULL;
    break;
  case 72ULL: 
    rgb_buffer_in1 = 68ULL;
    break;
  case 73ULL: 
    rgb_buffer_in1 = 69ULL;
    break;
  case 74ULL: 
    rgb_buffer_in1 = 70ULL;
    break;
  case 75ULL: 
    rgb_buffer_in1 = 71ULL;
    break;
  case 76ULL: 
    rgb_buffer_in1 = 72ULL;
    break;
  case 77ULL: 
    rgb_buffer_in1 = 73ULL;
    break;
  case 78ULL: 
    rgb_buffer_in1 = 74ULL;
    break;
  case 79ULL: 
    rgb_buffer_in1 = 75ULL;
    break;
  case 80ULL: 
    rgb_buffer_in1 = 76ULL;
    break;
  case 81ULL: 
    rgb_buffer_in1 = 77ULL;
    break;
  case 82ULL: 
    rgb_buffer_in1 = 78ULL;
    break;
  case 83ULL: 
    rgb_buffer_in1 = 79ULL;
    break;
  case 84ULL: 
    rgb_buffer_in1 = 80ULL;
    break;
  case 85ULL: 
    rgb_buffer_in1 = 81ULL;
    break;
  case 86ULL: 
    rgb_buffer_in1 = 82ULL;
    break;
  case 87ULL: 
    rgb_buffer_in1 = 83ULL;
    break;
  case 88ULL: 
    rgb_buffer_in1 = 84ULL;
    break;
  case 89ULL: 
    rgb_buffer_in1 = 85ULL;
    break;
  case 90ULL: 
    rgb_buffer_in1 = 86ULL;
    break;
  case 91ULL: 
    rgb_buffer_in1 = 87ULL;
    break;
  case 92ULL: 
    rgb_buffer_in1 = 88ULL;
    break;
  case 93ULL: 
    rgb_buffer_in1 = 89ULL;
    break;
  case 94ULL: 
    rgb_buffer_in1 = 90ULL;
    break;
  case 95ULL: 
    rgb_buffer_in1 = 91ULL;
    break;
  case 96ULL: 
    rgb_buffer_in1 = 92ULL;
    break;
  case 97ULL: 
    rgb_buffer_in1 = 93ULL;
    break;
  case 98ULL: 
    rgb_buffer_in1 = 94ULL;
    break;
  case 99ULL: 
    rgb_buffer_in1 = 95ULL;
    break;
  case 100ULL: 
    rgb_buffer_in1 = 96ULL;
    break;
  case 101ULL: 
    rgb_buffer_in1 = 97ULL;
    break;
  case 102ULL: 
    rgb_buffer_in1 = 98ULL;
    break;
  case 103ULL: 
    rgb_buffer_in1 = 99ULL;
    break;
  case 104ULL: 
    rgb_buffer_in1 = 100ULL;
    break;
  case 105ULL: 
    rgb_buffer_in1 = 101ULL;
    break;
  case 106ULL: 
    rgb_buffer_in1 = 102ULL;
    break;
  case 107ULL: 
    rgb_buffer_in1 = 103ULL;
    break;
  case 108ULL: 
    rgb_buffer_in1 = 104ULL;
    break;
  case 109ULL: 
    rgb_buffer_in1 = 105ULL;
    break;
  case 110ULL: 
    rgb_buffer_in1 = 106ULL;
    break;
  case 111ULL: 
    rgb_buffer_in1 = 107ULL;
    break;
  case 112ULL: 
    rgb_buffer_in1 = 108ULL;
    break;
  case 113ULL: 
    rgb_buffer_in1 = 109ULL;
    break;
  case 114ULL: 
    rgb_buffer_in1 = 110ULL;
    break;
  case 115ULL: 
    rgb_buffer_in1 = 111ULL;
    break;
  case 116ULL: 
    rgb_buffer_in1 = 112ULL;
    break;
  case 117ULL: 
    rgb_buffer_in1 = 113ULL;
    break;
  case 118ULL: 
    rgb_buffer_in1 = 114ULL;
    break;
  case 119ULL: 
    rgb_buffer_in1 = 115ULL;
    break;
  case 120ULL: 
    rgb_buffer_in1 = 116ULL;
    break;
  case 121ULL: 
    rgb_buffer_in1 = 117ULL;
    break;
  case 122ULL: 
    rgb_buffer_in1 = 118ULL;
    break;
  case 123ULL: 
    rgb_buffer_in1 = 119ULL;
    break;
  case 124ULL: 
    rgb_buffer_in1 = 120ULL;
    break;
  case 125ULL: 
    rgb_buffer_in1 = 121ULL;
    break;
  case 126ULL: 
    rgb_buffer_in1 = 122ULL;
    break;
  case 127ULL: 
    rgb_buffer_in1 = 123ULL;
    break;
  case 128ULL: 
    rgb_buffer_in1 = 124ULL;
    break;
  case 129ULL: 
    rgb_buffer_in1 = 125ULL;
    break;
  case 130ULL: 
    rgb_buffer_in1 = 126ULL;
    break;
  case 131ULL: 
    rgb_buffer_in1 = 127ULL;
    break;
  case 132ULL: 
    rgb_buffer_in1 = 128ULL;
    break;
  case 133ULL: 
    rgb_buffer_in1 = 129ULL;
    break;
  case 134ULL: 
    rgb_buffer_in1 = 130ULL;
    break;
  case 135ULL: 
    rgb_buffer_in1 = 131ULL;
    break;
  case 136ULL: 
    rgb_buffer_in1 = 132ULL;
    break;
  case 137ULL: 
    rgb_buffer_in1 = 133ULL;
    break;
  case 138ULL: 
    rgb_buffer_in1 = 134ULL;
    break;
  case 139ULL: 
    rgb_buffer_in1 = 135ULL;
    break;
  case 140ULL: 
    rgb_buffer_in1 = 136ULL;
    break;
  case 141ULL: 
    rgb_buffer_in1 = 137ULL;
    break;
  case 142ULL: 
    rgb_buffer_in1 = 138ULL;
    break;
  case 143ULL: 
    rgb_buffer_in1 = 139ULL;
    break;
  case 144ULL: 
    rgb_buffer_in1 = 140ULL;
    break;
  case 145ULL: 
    rgb_buffer_in1 = 141ULL;
    break;
  case 146ULL: 
    rgb_buffer_in1 = 142ULL;
    break;
  case 147ULL: 
    rgb_buffer_in1 = 143ULL;
    break;
  case 148ULL: 
    rgb_buffer_in1 = 144ULL;
    break;
  case 149ULL: 
    rgb_buffer_in1 = 145ULL;
    break;
  case 150ULL: 
    rgb_buffer_in1 = 146ULL;
    break;
  case 151ULL: 
    rgb_buffer_in1 = 147ULL;
    break;
  case 152ULL: 
    rgb_buffer_in1 = 148ULL;
    break;
  case 153ULL: 
    rgb_buffer_in1 = 149ULL;
    break;
  case 154ULL: 
    rgb_buffer_in1 = 150ULL;
    break;
  case 155ULL: 
    rgb_buffer_in1 = 151ULL;
    break;
  case 156ULL: 
    rgb_buffer_in1 = 152ULL;
    break;
  case 157ULL: 
    rgb_buffer_in1 = 153ULL;
    break;
  case 158ULL: 
    rgb_buffer_in1 = 154ULL;
    break;
  case 159ULL: 
    rgb_buffer_in1 = 155ULL;
    break;
  case 160ULL: 
    rgb_buffer_in1 = 156ULL;
    break;
  case 161ULL: 
    rgb_buffer_in1 = 157ULL;
    break;
  case 162ULL: 
    rgb_buffer_in1 = 158ULL;
    break;
  case 163ULL: 
    rgb_buffer_in1 = 159ULL;
    break;
  case 164ULL: 
    rgb_buffer_in1 = 160ULL;
    break;
  case 165ULL: 
    rgb_buffer_in1 = 161ULL;
    break;
  case 166ULL: 
    rgb_buffer_in1 = 162ULL;
    break;
  case 167ULL: 
    rgb_buffer_in1 = 163ULL;
    break;
  case 168ULL: 
    rgb_buffer_in1 = 164ULL;
    break;
  case 169ULL: 
    rgb_buffer_in1 = 165ULL;
    break;
  case 170ULL: 
    rgb_buffer_in1 = 166ULL;
    break;
  case 171ULL: 
    rgb_buffer_in1 = 167ULL;
    break;
  case 172ULL: 
    rgb_buffer_in1 = 168ULL;
    break;
  case 173ULL: 
    rgb_buffer_in1 = 169ULL;
    break;
  case 174ULL: 
    rgb_buffer_in1 = 170ULL;
    break;
  case 175ULL: 
    rgb_buffer_in1 = 171ULL;
    break;
  case 176ULL: 
    rgb_buffer_in1 = 172ULL;
    break;
  case 177ULL: 
    rgb_buffer_in1 = 173ULL;
    break;
  case 178ULL: 
    rgb_buffer_in1 = 174ULL;
    break;
  case 179ULL: 
    rgb_buffer_in1 = 175ULL;
    break;
  case 180ULL: 
    rgb_buffer_in1 = 176ULL;
    break;
  case 181ULL: 
    rgb_buffer_in1 = 177ULL;
    break;
  case 182ULL: 
    rgb_buffer_in1 = 178ULL;
    break;
  case 183ULL: 
    rgb_buffer_in1 = 179ULL;
    break;
  case 184ULL: 
    rgb_buffer_in1 = 180ULL;
    break;
  case 185ULL: 
    rgb_buffer_in1 = 181ULL;
    break;
  case 186ULL: 
    rgb_buffer_in1 = 182ULL;
    break;
  case 187ULL: 
    rgb_buffer_in1 = 183ULL;
    break;
  case 188ULL: 
    rgb_buffer_in1 = 184ULL;
    break;
  case 189ULL: 
    rgb_buffer_in1 = 185ULL;
    break;
  case 190ULL: 
    rgb_buffer_in1 = 186ULL;
    break;
  case 191ULL: 
    rgb_buffer_in1 = 187ULL;
    break;
  case 192ULL: 
    rgb_buffer_in1 = 188ULL;
    break;
  case 193ULL: 
    rgb_buffer_in1 = 189ULL;
    break;
  case 194ULL: 
    rgb_buffer_in1 = 190ULL;
    break;
  case 195ULL: 
    rgb_buffer_in1 = 191ULL;
    break;
  case 196ULL: 
    rgb_buffer_in1 = 192ULL;
    break;
  case 197ULL: 
    rgb_buffer_in1 = 193ULL;
    break;
  case 198ULL: 
    rgb_buffer_in1 = 194ULL;
    break;
  case 199ULL: 
    rgb_buffer_in1 = 195ULL;
    break;
  case 200ULL: 
    rgb_buffer_in1 = 196ULL;
    break;
  case 201ULL: 
    rgb_buffer_in1 = 197ULL;
    break;
  case 202ULL: 
    rgb_buffer_in1 = 198ULL;
    break;
  case 203ULL: 
    rgb_buffer_in1 = 199ULL;
    break;
  case 204ULL: 
    rgb_buffer_in1 = 200ULL;
    break;
  case 205ULL: 
    rgb_buffer_in1 = 201ULL;
    break;
  case 206ULL: 
    rgb_buffer_in1 = 202ULL;
    break;
  case 207ULL: 
    rgb_buffer_in1 = 203ULL;
    break;
  case 208ULL: 
    rgb_buffer_in1 = 204ULL;
    break;
  case 209ULL: 
    rgb_buffer_in1 = 205ULL;
    break;
  case 210ULL: 
    rgb_buffer_in1 = 206ULL;
    break;
  case 211ULL: 
    rgb_buffer_in1 = 207ULL;
    break;
  case 212ULL: 
    rgb_buffer_in1 = 208ULL;
    break;
  case 213ULL: 
    rgb_buffer_in1 = 209ULL;
    break;
  case 214ULL: 
    rgb_buffer_in1 = 210ULL;
    break;
  case 215ULL: 
    rgb_buffer_in1 = 211ULL;
    break;
  case 216ULL: 
    rgb_buffer_in1 = 212ULL;
    break;
  case 217ULL: 
    rgb_buffer_in1 = 213ULL;
    break;
  case 218ULL: 
    rgb_buffer_in1 = 214ULL;
    break;
  case 219ULL: 
    rgb_buffer_in1 = 215ULL;
    break;
  case 220ULL: 
    rgb_buffer_in1 = 216ULL;
    break;
  case 221ULL: 
    rgb_buffer_in1 = 217ULL;
    break;
  case 222ULL: 
    rgb_buffer_in1 = 218ULL;
    break;
  case 223ULL: 
    rgb_buffer_in1 = 219ULL;
    break;
  case 224ULL: 
    rgb_buffer_in1 = 220ULL;
    break;
  case 225ULL: 
    rgb_buffer_in1 = 221ULL;
    break;
  case 226ULL: 
    rgb_buffer_in1 = 222ULL;
    break;
  case 227ULL: 
    rgb_buffer_in1 = 223ULL;
    break;
  case 228ULL: 
    rgb_buffer_in1 = 224ULL;
    break;
  case 229ULL: 
    rgb_buffer_in1 = 225ULL;
    break;
  case 230ULL: 
    rgb_buffer_in1 = 226ULL;
    break;
  case 231ULL: 
    rgb_buffer_in1 = 227ULL;
    break;
  case 232ULL: 
    rgb_buffer_in1 = 228ULL;
    break;
  case 233ULL: 
    rgb_buffer_in1 = 229ULL;
    break;
  case 234ULL: 
    rgb_buffer_in1 = 230ULL;
    break;
  case 235ULL: 
    rgb_buffer_in1 = 231ULL;
    break;
  case 236ULL: 
    rgb_buffer_in1 = 232ULL;
    break;
  case 237ULL: 
    rgb_buffer_in1 = 233ULL;
    break;
  case 238ULL: 
    rgb_buffer_in1 = 234ULL;
    break;
  case 239ULL: 
    rgb_buffer_in1 = 235ULL;
    break;
  case 240ULL: 
    rgb_buffer_in1 = 236ULL;
    break;
  case 241ULL: 
    rgb_buffer_in1 = 237ULL;
    break;
  case 242ULL: 
    rgb_buffer_in1 = 238ULL;
    break;
  case 243ULL: 
    rgb_buffer_in1 = 239ULL;
    break;
  case 244ULL: 
    rgb_buffer_in1 = 240ULL;
    break;
  case 245ULL: 
    rgb_buffer_in1 = 241ULL;
    break;
  case 246ULL: 
    rgb_buffer_in1 = 242ULL;
    break;
  case 247ULL: 
    rgb_buffer_in1 = 243ULL;
    break;
  case 248ULL: 
    rgb_buffer_in1 = 244ULL;
    break;
  case 249ULL: 
    rgb_buffer_in1 = 245ULL;
    break;
  case 250ULL: 
    rgb_buffer_in1 = 246ULL;
    break;
  case 251ULL: 
    rgb_buffer_in1 = 247ULL;
    break;
  case 252ULL: 
    rgb_buffer_in1 = 248ULL;
    break;
  case 253ULL: 
    rgb_buffer_in1 = 249ULL;
    break;
  case 254ULL: 
    rgb_buffer_in1 = 250ULL;
    break;
  case 255ULL: 
    rgb_buffer_in1 = 251ULL;
    break;
  case 256ULL: 
    rgb_buffer_in1 = 252ULL;
    break;
  case 257ULL: 
    rgb_buffer_in1 = 253ULL;
    break;
  case 258ULL: 
    rgb_buffer_in1 = 254ULL;
    break;
  case 259ULL: 
    rgb_buffer_in1 = 255ULL;
    break;
  case 260ULL: 
    rgb_buffer_in1 = 256ULL;
    break;
  case 261ULL: 
    rgb_buffer_in1 = 257ULL;
    break;
  case 262ULL: case 264ULL: 
    rgb_buffer_in1 = Gaussian_Blur_Mul_9Ux2U_10U_4_14_out1.read();
    break;
  case 263ULL: 
    rgb_buffer_in1 = Gaussian_Blur_Add_10Ux10U_10U_4_22_out1.read();
    break;
  case 265ULL: case 273ULL: case 296ULL: 
    rgb_buffer_in1 = Gaussian_Blur_Add_10Ux10U_10U_4_33_out1.read();
    break;
  }
}
// resource: mux_25bx2i1c
void Gaussian_Blur::drive_rgb_buffer_DIN(){
  if ( gs_ctrl10.read() ) {
    rgb_buffer_DIN = 0ULL;
  } else {
    rgb_buffer_DIN = (sc_uint<25> ) (i_rgb_data.read());
  }
}
// resource: mux_1bx2i2c
void Gaussian_Blur::drive_rgb_buffer_CE(){
  if ( stall0.read() ) {
    rgb_buffer_CE = 0ULL;
  } else {
    switch( (sc_uint<3>)(gs_ctrl11.read()) ) {
    default:
      rgb_buffer_CE = 0ULL;
      break;
    case 1ULL: 
      rgb_buffer_CE = 1ULL;
      break;
    case 2ULL: 
      if ( ((256LL == Gaussian_Blur_Add_9Sx9S_10S_4_17_out1.read()) && (3LL == 
           Gaussian_Blur_Add_3Sx2U_4S_4_18_out1.read())) ) {
        rgb_buffer_CE = 1ULL;
      } else {
        rgb_buffer_CE = 0ULL;
      }
      break;
    case 3ULL: 
      if ( (3ULL != s_reg_63.read()) ) {
        rgb_buffer_CE = 1ULL;
      } else {
        rgb_buffer_CE = 0ULL;
      }
      break;
    case 4ULL: 
      if ( (!cycle2_state.read() && !s_reg_64.read()) ) {
        rgb_buffer_CE = 0ULL;
      } else {
        if ( cycle1_state.read() ) {
          rgb_buffer_CE = 0ULL;
        } else {
          rgb_buffer_CE = 1ULL;
        }
      }
      break;
    }
  }
}
// resource: mux_1bx2i2c
void Gaussian_Blur::drive_rgb_buffer_RW(){
  if ( stall0.read() ) {
    rgb_buffer_RW = 0ULL;
  } else {
    switch( (sc_uint<2>)(gs_ctrl12.read()) ) {
    default:
      rgb_buffer_RW = 0ULL;
      break;
    case 1ULL: 
      rgb_buffer_RW = 1ULL;
      break;
    case 2ULL: 
      if ( ((256LL == Gaussian_Blur_Add_9Sx9S_10S_4_17_out1.read()) && (3LL == 
           Gaussian_Blur_Add_3Sx2U_4S_4_18_out1.read())) ) {
        rgb_buffer_RW = 1ULL;
      } else {
        rgb_buffer_RW = 0ULL;
      }
      break;
    case 3ULL: 
      if ( (3ULL != s_reg_63.read()) ) {
        rgb_buffer_RW = 1ULL;
      } else {
        rgb_buffer_RW = 0ULL;
      }
      break;
    }
  }
}
void Gaussian_Blur::drive_Gaussian_Blur_Add_9Sx9S_10S_4_17_in2(){
  Gaussian_Blur_Add_9Sx9S_10S_4_17_in2 = (sc_int<9> )((sc_uint<8> )
                                         s_reg_68_slice1.read());
}
// resource: Gaussian_Blur_Add_9Sx9S_10S_4  instance: Gaussian_Blur_Add_9Sx9S_10S_4_17
void Gaussian_Blur::Gaussian_Blur_Add_9Sx9S_10S_4_17(){
  Gaussian_Blur_Add_9Sx9S_10S_4_17_out1 = (Gaussian_Blur_Add_9Sx9S_10S_4_17_in2
                                          .read() + 1LL);
}
// resource: Gaussian_Blur_Add_3Sx2U_4S_4  instance: Gaussian_Blur_Add_3Sx2U_4S_4_18
void Gaussian_Blur::Gaussian_Blur_Add_3Sx2U_4S_4_18(){
  Gaussian_Blur_Add_3Sx2U_4S_4_18_out1 = ((sc_uint<2> )s_reg_63.read() + 1LL);
}
// resource: mux_2bx2i1c
void Gaussian_Blur::drive_Gaussian_Blur_Add_3Sx2U_4S_4_19_in1(){
  if ( gs_ctrl13.read() ) {
    Gaussian_Blur_Add_3Sx2U_4S_4_19_in1 = (sc_uint<2> )s_reg_63.read();
  } else {
    Gaussian_Blur_Add_3Sx2U_4S_4_19_in1 = 0ULL;
  }
}
// resource: Gaussian_Blur_Add_3Sx2U_4S_4  instance: Gaussian_Blur_Add_3Sx2U_4S_4_19
void Gaussian_Blur::Gaussian_Blur_Add_3Sx2U_4S_4_19(){
  Gaussian_Blur_Add_3Sx2U_4S_4_19_out1 = (Gaussian_Blur_Add_3Sx2U_4S_4_19_in1
                                         .read() + 1LL);
}
// resource: Gaussian_Blur_Add_10Ux10U_10U_4  instance: Gaussian_Blur_Add_10Ux10U_10U_4_22
void Gaussian_Blur::Gaussian_Blur_Add_10Ux10U_10U_4_22(){
  Gaussian_Blur_Add_10Ux10U_10U_4_22_out1 = (s_reg_65.read() + 257ULL);
}
// resource: mux_32bx2i1c
void Gaussian_Blur::drive_Gaussian_Blur_NotEQ_32Sx9S_1U_4_23_in2(){
  if ( gs_ctrl14.read() ) {
    Gaussian_Blur_NotEQ_32Sx9S_1U_4_23_in2 = Gaussian_Blur_Add_32Sx2S_32S_1_66_out1
                                             .read();
  } else {
    Gaussian_Blur_NotEQ_32Sx9S_1U_4_23_in2 = -1LL;
  }
}
// resource: Gaussian_Blur_NotEQ_32Sx9S_1U_4  instance: Gaussian_Blur_NotEQ_32Sx9S_1U_4_23
void Gaussian_Blur::Gaussian_Blur_NotEQ_32Sx9S_1U_4_23(){
  Gaussian_Blur_NotEQ_32Sx9S_1U_4_23_out1 = (Gaussian_Blur_NotEQ_32Sx9S_1U_4_23_in2
                                            .read() != 254LL);
}
// resource: Gaussian_Blur_NotEQ_32Sx1S_1U_4  instance: Gaussian_Blur_NotEQ_32Sx1S_1U_4_24
void Gaussian_Blur::Gaussian_Blur_NotEQ_32Sx1S_1U_4_24(){
  Gaussian_Blur_NotEQ_32Sx1S_1U_4_24_out1 = (Gaussian_Blur_NotEQ_32Sx9S_1U_4_23_in2
                                            .read() != -1LL);
}
// resource: Gaussian_Blur_And_1Ux1U_1U_4  instance: Gaussian_Blur_And_1Ux1U_1U_4_25
void Gaussian_Blur::Gaussian_Blur_And_1Ux1U_1U_4_25(){
  Gaussian_Blur_And_1Ux1U_1U_4_25_out1 = Gaussian_Blur_NotEQ_32Sx1S_1U_4_24_out1
                                         .read() & 
                                         Gaussian_Blur_NotEQ_32Sx9S_1U_4_23_out1
                                         .read();
}
// resource: Gaussian_Blur_Abs_32S_32U_1  instance: Gaussian_Blur_Abs_32S_32U_1_26
void Gaussian_Blur::Gaussian_Blur_Abs_32S_32U_1_26(){
  Gaussian_Blur_Abs_32S_32U_1_26_out1 = (/*ABS*/((sc_int<32> )( 
                                        Gaussian_Blur_NotEQ_32Sx9S_1U_4_23_in2
                                        .read() ))<0?(sc_uint<32> )-(( 
                                        Gaussian_Blur_NotEQ_32Sx9S_1U_4_23_in2
                                        .read() )):(sc_uint<32> )(( 
                                        Gaussian_Blur_NotEQ_32Sx9S_1U_4_23_in2
                                        .read() )));
}
// resource: Gaussian_Blur_Mod_32Ux2U_2U_4  instance: Gaussian_Blur_Mod_32Ux2U_2U_4_27
void Gaussian_Blur::Gaussian_Blur_Mod_32Ux2U_2U_4_27(){
  Gaussian_Blur_Mod_32Ux2U_2U_4_27_out1 = (/*cliff*/sc_uint<32>)((sc_uint<2> )
                                          3ULL == 0 ? ((sc_uint<2> ) -1) : (
                                          sc_uint<2> ) (
                                          Gaussian_Blur_Abs_32S_32U_1_26_out1
                                          .read() % (sc_uint<2> )3ULL));
}
// resource: Gaussian_Blur_Minus_2U_2S_4  instance: Gaussian_Blur_Minus_2U_2S_4_28
void Gaussian_Blur::Gaussian_Blur_Minus_2U_2S_4_28(){
  Gaussian_Blur_Minus_2U_2S_4_28_out1 = (/*cliff*/sc_int<32>)((sc_int<2> ) - 
                                        Gaussian_Blur_Mod_32Ux2U_2U_4_27_out1
                                        .read());
}
// resource: mux_1bx2i1c
void Gaussian_Blur::drive_Gaussian_Blur_N_Mux_2_2_0_4_29_ctrl1(){
  if ( gs_ctrl14.read() ) {
    Gaussian_Blur_N_Mux_2_2_0_4_29_ctrl1 = (sc_uint<1> ) (((/*imp*/sc_uint<1> ) Gaussian_Blur_Add_32Sx2S_32S_1_66_out1
                                           .read().range(31,31)));
  } else {
    Gaussian_Blur_N_Mux_2_2_0_4_29_ctrl1 = 1ULL;
  }
}
// resource: Gaussian_Blur_N_Mux_2_2_0_4
void Gaussian_Blur::Gaussian_Blur_N_Mux_2_2_0_4_29(){
  if ( Gaussian_Blur_N_Mux_2_2_0_4_29_ctrl1.read() ) {
    Gaussian_Blur_N_Mux_2_2_0_4_29_out1 = (sc_uint<2> ) (
                                          Gaussian_Blur_Minus_2U_2S_4_28_out1
                                          .read());
  } else {
    Gaussian_Blur_N_Mux_2_2_0_4_29_out1 = Gaussian_Blur_Mod_32Ux2U_2U_4_27_out1
                                          .read();
  }
}
// resource: mux_8bx2i1c
void Gaussian_Blur::drive_Gaussian_Blur_Add_9Sx9S_10S_4_30_in2_slice(){
  if ( gs_ctrl18.read() ) {
    Gaussian_Blur_Add_9Sx9S_10S_4_30_in2_slice = (sc_int<8> )s_reg_65.read();
  } else {
    Gaussian_Blur_Add_9Sx9S_10S_4_30_in2_slice = 0LL;
  }
}
// resource: Gaussian_Blur_Add_9Sx9S_10S_4  instance: Gaussian_Blur_Add_9Sx9S_10S_4_30
void Gaussian_Blur::Gaussian_Blur_Add_9Sx9S_10S_4_30(){
  Gaussian_Blur_Add_9Sx9S_10S_4_30_out1 = (( (sc_int<9> )(sc_bv<9>)((sc_bv<1>)(
                                          0ULL), 
                                          (sc_bv<8>)(Gaussian_Blur_Add_9Sx9S_10S_4_30_in2_slice
                                          .read())) ) + 1LL);
}
// resource: mux_2bx2i1c
void Gaussian_Blur::drive_Gaussian_Blur_Add_9Sx9S_10S_4_32_in1_slice(){
  if ( gs_ctrl19.read() ) {
    Gaussian_Blur_Add_9Sx9S_10S_4_32_in1_slice = (sc_int<2> )s_reg_63.read();
  } else {
    Gaussian_Blur_Add_9Sx9S_10S_4_32_in1_slice = 1LL;
  }
}
// resource: Gaussian_Blur_Add_9Sx9S_10S_4  instance: Gaussian_Blur_Add_9Sx9S_10S_4_32
void Gaussian_Blur::Gaussian_Blur_Add_9Sx9S_10S_4_32(){
  Gaussian_Blur_Add_9Sx9S_10S_4_32_out1 = (Gaussian_Blur_Add_9Sx9S_10S_4_17_in2
                                          .read() + ( (sc_int<9> )(sc_bv<9>)(
                                          (sc_bv<7>)(0ULL), 
                                          (sc_bv<2>)(Gaussian_Blur_Add_9Sx9S_10S_4_32_in1_slice
                                          .read())) ));
}
// resource: mux_10bx2i0c
void Gaussian_Blur::drive_Gaussian_Blur_Add_10Ux10U_10U_4_33_in1(){
  if ( gs_ctrl19.read() ) {
    Gaussian_Blur_Add_10Ux10U_10U_4_33_in1 = (sc_uint<10> ) ((sc_uint<9> )Gaussian_Blur_Add_9Sx9S_10S_4_32_out1
                                             .read());
  } else {
    Gaussian_Blur_Add_10Ux10U_10U_4_33_in1 = (sc_uint<10> ) (Gaussian_Blur_Add_9Sx9S_10S_4_32_out1
                                             .read());
  }
}
// resource: Gaussian_Blur_Add_10Ux10U_10U_4  instance: Gaussian_Blur_Add_10Ux10U_10U_4_33
void Gaussian_Blur::Gaussian_Blur_Add_10Ux10U_10U_4_33(){
  Gaussian_Blur_Add_10Ux10U_10U_4_33_out1 = (Gaussian_Blur_Mul_9Ux2U_10U_4_14_out1
                                            .read() + Gaussian_Blur_Add_10Ux10U_10U_4_33_in1
                                            .read());
}
// resource: mux_2bx2i1c
void Gaussian_Blur::drive_Gaussian_Blur_Add_3Ux2U_4U_4_37_in1(){
  if ( gs_ctrl21.read() ) {
    Gaussian_Blur_Add_3Ux2U_4U_4_37_in1 = (sc_uint<2> )s_reg_63.read();
  } else {
    Gaussian_Blur_Add_3Ux2U_4U_4_37_in1 = 0ULL;
  }
}
// resource: Gaussian_Blur_Add_3Ux2U_4U_4  instance: Gaussian_Blur_Add_3Ux2U_4U_4_37
void Gaussian_Blur::Gaussian_Blur_Add_3Ux2U_4U_4_37(){
  Gaussian_Blur_Add_3Ux2U_4U_4_37_out1 = (Gaussian_Blur_Add_3Ux2U_4U_4_37_in1
                                         .read() + 6ULL);
}
// resource: Gaussian_Blur_Add_2Ux2U_3U_4  instance: Gaussian_Blur_Add_2Ux2U_3U_4_41
void Gaussian_Blur::Gaussian_Blur_Add_2Ux2U_3U_4_41(){
  Gaussian_Blur_Add_2Ux2U_3U_4_41_out1 = ((sc_uint<2> )s_reg_63.read() + 3ULL);
}
// resource: Gaussian_Blur_Add_3Ux2U_4U_4  instance: Gaussian_Blur_Add_3Ux2U_4U_4_40
void Gaussian_Blur::Gaussian_Blur_Add_3Ux2U_4U_4_40(){
  Gaussian_Blur_Add_3Ux2U_4U_4_40_out1 = ((sc_uint<2> )s_reg_63.read() + 6ULL);
}
// resource: Gaussian_Blur_Add_3Sx2U_4S_4  instance: Gaussian_Blur_Add_3Sx2U_4S_4_42
void Gaussian_Blur::Gaussian_Blur_Add_3Sx2U_4S_4_42(){
  Gaussian_Blur_Add_3Sx2U_4S_4_42_out1 = ((sc_uint<2> )s_reg_63.read() + 1LL);
}
// resource: mux_2bx2i1c
void Gaussian_Blur::drive_Gaussian_Blur_Add_3Sx2U_4S_4_43_in1(){
  if ( gs_ctrl19.read() ) {
    Gaussian_Blur_Add_3Sx2U_4S_4_43_in1 = (sc_uint<2> )s_reg_61.read();
  } else {
    Gaussian_Blur_Add_3Sx2U_4S_4_43_in1 = 0ULL;
  }
}
// resource: Gaussian_Blur_Add_3Sx2U_4S_4  instance: Gaussian_Blur_Add_3Sx2U_4S_4_43
void Gaussian_Blur::Gaussian_Blur_Add_3Sx2U_4S_4_43(){
  Gaussian_Blur_Add_3Sx2U_4S_4_43_out1 = (Gaussian_Blur_Add_3Sx2U_4S_4_43_in1
                                         .read() + 1LL);
}
// resource: Gaussian_Blur_Mul_2Ux2U_4U_4  instance: Gaussian_Blur_Mul_2Ux2U_4U_4_44
void Gaussian_Blur::Gaussian_Blur_Mul_2Ux2U_4U_4_44(){
  Gaussian_Blur_Mul_2Ux2U_4U_4_44_out1 = (sc_uint<2> )s_reg_62.read() * 3ULL;
}
// resource: Gaussian_Blur_Add_5Sx2U_5S_4  instance: Gaussian_Blur_Add_5Sx2U_5S_4_45
void Gaussian_Blur::Gaussian_Blur_Add_5Sx2U_5S_4_45(){
  Gaussian_Blur_Add_5Sx2U_5S_4_45_out1 = ((sc_int<5> )
                                         Gaussian_Blur_Mul_2Ux2U_4U_4_44_out1
                                         .read() + (sc_uint<2> )u_u0_mi51.read()
                                         );
}
// resource: Gaussian_Blur_Mul_9Sx8U_9S_4  instance: Gaussian_Blur_Mul_9Sx8U_9S_4_51
void Gaussian_Blur::Gaussian_Blur_Mul_9Sx8U_9S_4_51(){
  Gaussian_Blur_Mul_9Sx8U_9S_4_51_out1 = (sc_int<9> )filter_out1.read() * (
                                         sc_uint<8> )rgb_buffer_out1.read();
}
void Gaussian_Blur::drive_Gaussian_Blur_Mul_9Sx8U_9S_4_52_in1(){
  Gaussian_Blur_Mul_9Sx8U_9S_4_52_in1 = (sc_uint<8> ) (rgb_buffer_out1.read()
                                        .range(15,8));
}
// resource: Gaussian_Blur_Mul_9Sx8U_9S_4  instance: Gaussian_Blur_Mul_9Sx8U_9S_4_52
void Gaussian_Blur::Gaussian_Blur_Mul_9Sx8U_9S_4_52(){
  Gaussian_Blur_Mul_9Sx8U_9S_4_52_out1 = (sc_int<9> )filter_out1.read() * 
                                         Gaussian_Blur_Mul_9Sx8U_9S_4_52_in1
                                         .read();
}
// resource: Gaussian_Blur_Add_9Ux9U_9U_4  instance: Gaussian_Blur_Add_9Ux9U_9U_4_53
void Gaussian_Blur::Gaussian_Blur_Add_9Ux9U_9U_4_53(){
  Gaussian_Blur_Add_9Ux9U_9U_4_53_out1 = ((sc_uint<9> )
                                         Gaussian_Blur_Mul_9Sx8U_9S_4_51_out1
                                         .read() + s_reg_69.read());
}
// resource: Gaussian_Blur_Add_9Ux9U_9U_4  instance: Gaussian_Blur_Add_9Ux9U_9U_4_54
void Gaussian_Blur::Gaussian_Blur_Add_9Ux9U_9U_4_54(){
  Gaussian_Blur_Add_9Ux9U_9U_4_54_out1 = ((sc_uint<9> )
                                         Gaussian_Blur_Mul_9Sx8U_9S_4_52_out1
                                         .read() + s_reg_70.read());
}
void Gaussian_Blur::drive_Gaussian_Blur_Mul_9Sx8U_9S_4_55_in1(){
  Gaussian_Blur_Mul_9Sx8U_9S_4_55_in1 = (sc_uint<8> ) (rgb_buffer_out1.read()
                                        .range(23,16));
}
// resource: Gaussian_Blur_Mul_9Sx8U_9S_4  instance: Gaussian_Blur_Mul_9Sx8U_9S_4_55
void Gaussian_Blur::Gaussian_Blur_Mul_9Sx8U_9S_4_55(){
  Gaussian_Blur_Mul_9Sx8U_9S_4_55_out1 = (sc_int<9> )filter_out1.read() * 
                                         Gaussian_Blur_Mul_9Sx8U_9S_4_55_in1
                                         .read();
}
// resource: Gaussian_Blur_Add_9Ux9U_9U_4  instance: Gaussian_Blur_Add_9Ux9U_9U_4_56
void Gaussian_Blur::Gaussian_Blur_Add_9Ux9U_9U_4_56(){
  Gaussian_Blur_Add_9Ux9U_9U_4_56_out1 = ((sc_uint<9> )
                                         Gaussian_Blur_Mul_9Sx8U_9S_4_55_out1
                                         .read() + s_reg_71.read());
}
// resource: Gaussian_Blur_Add_9Sx9S_10S_4  instance: Gaussian_Blur_Add_9Sx9S_10S_4_58
void Gaussian_Blur::Gaussian_Blur_Add_9Sx9S_10S_4_58(){
  Gaussian_Blur_Add_9Sx9S_10S_4_58_out1 = ((sc_int<9> )
                                          Gaussian_Blur_Add_9Ux9U_9U_4_53_out1
                                          .read() + (sc_int<9> )
                                          Gaussian_Blur_Add_9Ux9U_9U_4_54_out1
                                          .read());
}
// resource: Gaussian_Blur_Add_10Sx9S_11S_4  instance: Gaussian_Blur_Add_10Sx9S_11S_4_59
void Gaussian_Blur::Gaussian_Blur_Add_10Sx9S_11S_4_59(){
  Gaussian_Blur_Add_10Sx9S_11S_4_59_out1 = ((sc_int<10> )s_reg_65.read() + (
                                           sc_int<9> )s_reg_71.read());
}
// resource: Gaussian_Blur_Abs_11S_11U_4  instance: Gaussian_Blur_Abs_11S_11U_4_60
void Gaussian_Blur::Gaussian_Blur_Abs_11S_11U_4_60(){
  Gaussian_Blur_Abs_11S_11U_4_60_out1 = (/*ABS*/((sc_int<11> )( 
                                        Gaussian_Blur_Add_10Sx9S_11S_4_59_out1
                                        .read() ))<0?(sc_uint<11> )-(( 
                                        Gaussian_Blur_Add_10Sx9S_11S_4_59_out1
                                        .read() )):(sc_uint<11> )(( 
                                        Gaussian_Blur_Add_10Sx9S_11S_4_59_out1
                                        .read() )));
}
// resource: Gaussian_Blur_Div_11Ux2U_11U_4  instance: Gaussian_Blur_Div_11Ux2U_11U_4_61
void Gaussian_Blur::Gaussian_Blur_Div_11Ux2U_11U_4_61(){
  Gaussian_Blur_Div_11Ux2U_11U_4_61_out1 = ((sc_uint<2> )3ULL == 0 ? ((
                                           sc_uint<11> ) -1) : (sc_uint<11> ) (
                                           Gaussian_Blur_Abs_11S_11U_4_60_out1
                                           .read() / (sc_uint<2> )3ULL));
}
// resource: Gaussian_Blur_Add_9Sx9S_10S_4  instance: Gaussian_Blur_Add_9Sx9S_10S_4_62
void Gaussian_Blur::Gaussian_Blur_Add_9Sx9S_10S_4_62(){
  Gaussian_Blur_Add_9Sx9S_10S_4_62_out1 = ((sc_int<9> )s_reg_69.read() + (
                                          sc_int<9> )s_reg_70.read());
}
// resource: Gaussian_Blur_Minus_11U_11S_4  instance: Gaussian_Blur_Minus_11U_11S_4_63
void Gaussian_Blur::Gaussian_Blur_Minus_11U_11S_4_63(){
  Gaussian_Blur_Minus_11U_11S_4_63_out1 = ((sc_int<11> ) - s_reg_66.read());
}
// resource: Gaussian_Blur_Add_10Sx9S_11S_4  instance: Gaussian_Blur_Add_10Sx9S_11S_4_64
void Gaussian_Blur::Gaussian_Blur_Add_10Sx9S_11S_4_64(){
  Gaussian_Blur_Add_10Sx9S_11S_4_64_out1 = (
                                           Gaussian_Blur_Add_9Sx9S_10S_4_62_out1
                                           .read() + (sc_int<9> )s_reg_71.read()
                                           );
}
void Gaussian_Blur::drive_Gaussian_Blur_N_Mux_11_2_1_4_65_ctrl1(){
  Gaussian_Blur_N_Mux_11_2_1_4_65_ctrl1 = (sc_uint<1> ) (((/*imp*/sc_uint<1> ) 
                                          Gaussian_Blur_Add_10Sx9S_11S_4_64_out1
                                          .read().range(10,10)));
}
// resource: Gaussian_Blur_N_Mux_11_2_1_4
void Gaussian_Blur::Gaussian_Blur_N_Mux_11_2_1_4_65(){
  if ( Gaussian_Blur_N_Mux_11_2_1_4_65_ctrl1.read() ) {
    Gaussian_Blur_N_Mux_11_2_1_4_65_out1 = (sc_uint<11> ) (
                                           Gaussian_Blur_Minus_11U_11S_4_63_out1
                                           .read());
  } else {
    Gaussian_Blur_N_Mux_11_2_1_4_65_out1 = s_reg_66.read();
  }
}
// resource: Gaussian_Blur_Add_32Sx2S_32S_1  instance: Gaussian_Blur_Add_32Sx2S_32S_1_66
void Gaussian_Blur::Gaussian_Blur_Add_32Sx2S_32S_1_66(){
  Gaussian_Blur_Add_32Sx2S_32S_1_66_out1 = (/*cliff*/sc_int<32>)((sc_int<32> )
                                           s_reg_67.read() + 1LL);
}
// resource: Gaussian_Blur_Add_9Sx9S_10S_4  instance: Gaussian_Blur_Add_9Sx9S_10S_4_67
void Gaussian_Blur::Gaussian_Blur_Add_9Sx9S_10S_4_67(){
  Gaussian_Blur_Add_9Sx9S_10S_4_67_out1 = (Gaussian_Blur_Add_9Sx9S_10S_4_17_in2
                                          .read() + 1LL);
}
// resource: Gaussian_Blur_Equal_1Ux1U_1U_1  instance: Gaussian_Blur_Equal_1Ux1U_1U_1_1
void Gaussian_Blur::Gaussian_Blur_Equal_1Ux1U_1U_1_1(){
  Gaussian_Blur_Equal_1Ux1U_1U_1_1_out1 = !Gaussian_Blur_LessThan_4Sx3S_1U_4_12_out1
                                          .read();
}
// resource: mux_1bx3i1c
// resource: regr_en_1
void Gaussian_Blur::drive_cycle1_state(){
  switch( (sc_uint<1>)(stall0.read()) ) {
  case 1ULL: 
    break;
  case 0ULL: 
    switch( (sc_uint<9>)(global_state.read()) ) {
    case 264ULL: 
      if ( ((3ULL == s_reg_63.read()) && !Gaussian_Blur_And_1Ux1U_1U_4_25_out1
           .read()) ) {
        cycle1_state = 1ULL;
      } 
      break;
    case 272ULL: 
      if ( (3ULL == s_reg_63.read()) ) {
        cycle1_state = 1ULL;
      } 
      break;
    case 291ULL: 
      cycle1_state = 1ULL;
      break;
    case 295ULL: 
      switch( (sc_int<10>)(Gaussian_Blur_Add_9Sx9S_10S_4_67_out1.read()) ) {
      default:
        cycle1_state = 1ULL;
        break;
      case 256LL: 
        if ( (!Gaussian_Blur_And_1Ux1U_1U_4_25_out1.read() && (254LL != 
             Gaussian_Blur_Add_32Sx2S_32S_1_66_out1.read())) ) {
          cycle1_state = 1ULL;
        } 
        break;
      }
      break;
    case 296ULL: 
      if ( (!cycle2_state.read() && !s_reg_64.read()) ) {
        cycle1_state = (sc_uint<1> ) (drain.read());
      } else {
        if ( cycle1_state.read() ) {
          cycle1_state = (sc_uint<1> ) (drain.read());
        } else {
          cycle1_state = Gaussian_Blur_Equal_1Ux1U_1U_1_1_out1.read();
        }
      }
      break;
    }
    break;
  }
}
// resource: mux_1bx2i1c
// resource: regr_en_1
void Gaussian_Blur::drive_cycle2_state(){
  switch( (sc_uint<1>)(stall0.read()) ) {
  case 1ULL: 
    break;
  case 0ULL: 
    switch( (sc_uint<9>)(global_state.read()) ) {
    case 264ULL: 
      if ( ((3ULL == s_reg_63.read()) && !Gaussian_Blur_And_1Ux1U_1U_4_25_out1
           .read()) ) {
        cycle2_state = 1ULL;
      } 
      break;
    case 272ULL: 
      if ( (3ULL == s_reg_63.read()) ) {
        cycle2_state = 1ULL;
      } 
      break;
    case 291ULL: 
      cycle2_state = 1ULL;
      break;
    case 295ULL: 
      switch( (sc_int<10>)(Gaussian_Blur_Add_9Sx9S_10S_4_67_out1.read()) ) {
      default:
        cycle2_state = 1ULL;
        break;
      case 256LL: 
        if ( (!Gaussian_Blur_And_1Ux1U_1U_4_25_out1.read() && (254LL != 
             Gaussian_Blur_Add_32Sx2S_32S_1_66_out1.read())) ) {
          cycle2_state = 1ULL;
        } 
        break;
      }
      break;
    case 296ULL: 
      if ( (!cycle2_state.read() && !s_reg_64.read()) ) {
        cycle2_state = 1ULL;
      } else {
        cycle2_state = cycle1_state.read();
      }
      break;
    }
    break;
  }
}
// resource: regr_en_sc_9
void Gaussian_Blur::drive_global_state(){
  if ( (i_rst.read() == 0ULL) ) {
    global_state = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    case 0ULL: 
      global_state = global_state_next.read();
      break;
    }
  }
}
// resource: mux_9bx9i8c
void Gaussian_Blur::drive_global_state_next(){
  switch( (sc_uint<9>)(global_state.read()) ) {
  default:
    global_state_next = (global_state.read() + 1ULL);
    break;
  case 2ULL: 
    if ( s_reg_64.read() ) {
      global_state_next = 1ULL;
    } else {
      if ( Gaussian_Blur_LessThan_4Sx3S_1U_4_13_out1.read() ) {
        global_state_next = 1ULL;
      } else {
        global_state_next = (global_state.read() + 1ULL);
      }
    }
    break;
  case 4ULL: 
    switch( (sc_int<10>)(Gaussian_Blur_Add_9Sx9S_10S_4_17_out1.read()) ) {
    default:
      global_state_next = 3ULL;
      break;
    case 256LL: 
      switch( (sc_int<4>)(Gaussian_Blur_Add_3Sx2U_4S_4_18_out1.read()) ) {
      default:
        global_state_next = 3ULL;
        break;
      case 3LL: 
        global_state_next = (global_state.read() + 1ULL);
        break;
      }
      break;
    }
    break;
  case 264ULL: 
    switch( (sc_uint<4>)(s_reg_63.read()) ) {
    default:
      global_state_next = 263ULL;
      break;
    case 3ULL: 
      if ( Gaussian_Blur_And_1Ux1U_1U_4_25_out1.read() ) {
        global_state_next = 273ULL;
      } else {
        global_state_next = 296ULL;
      }
      break;
    }
    break;
  case 266ULL: 
    switch( (sc_int<10>)(Gaussian_Blur_Add_9Sx9S_10S_4_32_out1.read()) ) {
    default:
      global_state_next = 265ULL;
      break;
    case 256LL: 
      global_state_next = (global_state.read() + 1ULL);
      break;
    }
    break;
  case 272ULL: 
    switch( (sc_uint<4>)(s_reg_63.read()) ) {
    default:
      global_state_next = 267ULL;
      break;
    case 3ULL: 
      global_state_next = 296ULL;
      break;
    }
    break;
  case 274ULL: 
    switch( (sc_uint<10>)(s_reg_65.read()) ) {
    default:
      global_state_next = 273ULL;
      break;
    case 256ULL: 
      global_state_next = (global_state.read() + 1ULL);
      break;
    }
    break;
  case 291ULL: 
    global_state_next = 296ULL;
    break;
  case 295ULL: 
    switch( (sc_int<10>)(Gaussian_Blur_Add_9Sx9S_10S_4_67_out1.read()) ) {
    default:
      global_state_next = (global_state.read() + 1ULL);
      break;
    case 256LL: 
      if ( Gaussian_Blur_And_1Ux1U_1U_4_25_out1.read() ) {
        global_state_next = 273ULL;
      } else {
        switch( (sc_int<32>)(Gaussian_Blur_Add_32Sx2S_32S_1_66_out1.read()) ) {
        default:
          global_state_next = (global_state.read() + 1ULL);
          break;
        case 254LL: 
          global_state_next = 265ULL;
          break;
        }
      }
      break;
    }
    break;
  case 296ULL: 
    if ( (!cycle2_state.read() && !s_reg_64.read()) ) {
      if ( Gaussian_Blur_LessThan_4Sx3S_1U_4_13_out1.read() ) {
        global_state_next = 296ULL;
      } else {
        global_state_next = 292ULL;
      }
    } else {
      global_state_next = 296ULL;
    }
    break;
  }
}
// resource: mux_1bx2i2c
// resource: regr_en_sc_1
void Gaussian_Blur::drive_gs_ctrl0(){
  if ( (i_rst.read() == 0ULL) ) {
    gs_ctrl0 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    case 0ULL: 
      switch( (sc_uint<9>)(global_state_next.read()) ) {
      default:
        gs_ctrl0 = 0ULL;
        break;
      case 2ULL: 
        gs_ctrl0 = 1ULL;
        break;
      }
      break;
    }
  }
}
// resource: mux_4bx15i15c
// resource: regr_en_sc_4
void Gaussian_Blur::drive_gs_ctrl4(){
  if ( (i_rst.read() == 0ULL) ) {
    gs_ctrl4 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    case 0ULL: 
      switch( (sc_uint<9>)(global_state_next.read()) ) {
      default:
        gs_ctrl4 = 0ULL;
        break;
      case 266ULL: case 272ULL: 
        gs_ctrl4 = 1ULL;
        break;
      case 267ULL: case 270ULL: 
        gs_ctrl4 = 2ULL;
        break;
      case 268ULL: 
        gs_ctrl4 = 3ULL;
        break;
      case 269ULL: case 271ULL: 
        gs_ctrl4 = 4ULL;
        break;
      case 273ULL: case 275ULL: 
        gs_ctrl4 = 5ULL;
        break;
      case 274ULL: case 277ULL: 
        gs_ctrl4 = 6ULL;
        break;
      case 276ULL: case 278ULL: 
        gs_ctrl4 = 7ULL;
        break;
      case 279ULL: case 281ULL: 
        gs_ctrl4 = 8ULL;
        break;
      case 280ULL: case 283ULL: 
        gs_ctrl4 = 9ULL;
        break;
      case 282ULL: case 284ULL: 
        gs_ctrl4 = 10ULL;
        break;
      case 285ULL: case 287ULL: 
        gs_ctrl4 = 11ULL;
        break;
      case 286ULL: case 289ULL: 
        gs_ctrl4 = 12ULL;
        break;
      case 288ULL: case 290ULL: 
        gs_ctrl4 = 13ULL;
        break;
      case 296ULL: 
        gs_ctrl4 = 14ULL;
        break;
      }
      break;
    }
  }
}
// resource: mux_2bx3i3c
// resource: regr_en_sc_2
void Gaussian_Blur::drive_gs_ctrl5(){
  if ( (i_rst.read() == 0ULL) ) {
    gs_ctrl5 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    case 0ULL: 
      switch( (sc_uint<9>)(global_state_next.read()) ) {
      default:
        gs_ctrl5 = 0ULL;
        break;
      case 268ULL: case 270ULL: case 275ULL: case 277ULL: case 281ULL: case 
      283ULL: case 287ULL: case 289ULL: 
        gs_ctrl5 = 1ULL;
        break;
      case 271ULL: case 278ULL: case 284ULL: case 290ULL: 
        gs_ctrl5 = 2ULL;
        break;
      }
      break;
    }
  }
}
// resource: mux_3bx6i6c
// resource: regr_en_sc_3
void Gaussian_Blur::drive_gs_ctrl6(){
  if ( (i_rst.read() == 0ULL) ) {
    gs_ctrl6 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    case 0ULL: 
      switch( (sc_uint<9>)(global_state_next.read()) ) {
      default:
        gs_ctrl6 = 0ULL;
        break;
      case 1ULL: case 267ULL: case 268ULL: case 269ULL: case 270ULL: case 271ULL
      : case 273ULL: case 275ULL: case 276ULL: case 277ULL: case 278ULL: case 
      279ULL: case 280ULL: case 281ULL: case 282ULL: case 283ULL: case 284ULL: 
      case 285ULL: case 286ULL: case 287ULL: case 288ULL: case 289ULL: case 
      290ULL: 
        gs_ctrl6 = 1ULL;
        break;
      case 266ULL: 
        gs_ctrl6 = 2ULL;
        break;
      case 272ULL: 
        gs_ctrl6 = 3ULL;
        break;
      case 274ULL: 
        gs_ctrl6 = 4ULL;
        break;
      case 296ULL: 
        gs_ctrl6 = 5ULL;
        break;
      }
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_en_sc_1
void Gaussian_Blur::drive_gs_ctrl7(){
  if ( (i_rst.read() == 0ULL) ) {
    gs_ctrl7 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    case 0ULL: 
      switch( (sc_uint<9>)(global_state_next.read()) ) {
      default:
        gs_ctrl7 = 0ULL;
        break;
      case 1ULL: case 268ULL: case 270ULL: case 271ULL: case 275ULL: case 277ULL
      : case 278ULL: case 281ULL: case 283ULL: case 284ULL: case 287ULL: case 
      289ULL: case 290ULL: 
        gs_ctrl7 = 1ULL;
        break;
      }
      break;
    }
  }
}
// resource: mux_3bx5i5c
// resource: regr_en_sc_3
void Gaussian_Blur::drive_gs_ctrl8(){
  if ( (i_rst.read() == 0ULL) ) {
    gs_ctrl8 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    case 0ULL: 
      switch( (sc_uint<9>)(global_state_next.read()) ) {
      default:
        gs_ctrl8 = 0ULL;
        break;
      case 4ULL: 
        gs_ctrl8 = 1ULL;
        break;
      case 262ULL: 
        gs_ctrl8 = 2ULL;
        break;
      case 264ULL: case 265ULL: case 273ULL: 
        gs_ctrl8 = 3ULL;
        break;
      case 296ULL: 
        gs_ctrl8 = 4ULL;
        break;
      }
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_en_sc_1
void Gaussian_Blur::drive_gs_ctrl9(){
  if ( (i_rst.read() == 0ULL) ) {
    gs_ctrl9 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    case 0ULL: 
      switch( (sc_uint<9>)(global_state_next.read()) ) {
      default:
        gs_ctrl9 = 0ULL;
        break;
      case 4ULL: 
        gs_ctrl9 = 1ULL;
        break;
      }
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_en_sc_1
void Gaussian_Blur::drive_gs_ctrl10(){
  if ( (i_rst.read() == 0ULL) ) {
    gs_ctrl10 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    case 0ULL: 
      switch( (sc_uint<9>)(global_state_next.read()) ) {
      default:
        gs_ctrl10 = 0ULL;
        break;
      case 4ULL: case 5ULL: case 6ULL: case 7ULL: case 8ULL: case 9ULL: case 
      10ULL: case 11ULL: case 12ULL: case 13ULL: case 14ULL: case 15ULL: case 
      16ULL: case 17ULL: case 18ULL: case 19ULL: case 20ULL: case 21ULL: case 
      22ULL: case 23ULL: case 24ULL: case 25ULL: case 26ULL: case 27ULL: case 
      28ULL: case 29ULL: case 30ULL: case 31ULL: case 32ULL: case 33ULL: case 
      34ULL: case 35ULL: case 36ULL: case 37ULL: case 38ULL: case 39ULL: case 
      40ULL: case 41ULL: case 42ULL: case 43ULL: case 44ULL: case 45ULL: case 
      46ULL: case 47ULL: case 48ULL: case 49ULL: case 50ULL: case 51ULL: case 
      52ULL: case 53ULL: case 54ULL: case 55ULL: case 56ULL: case 57ULL: case 
      58ULL: case 59ULL: case 60ULL: case 61ULL: case 62ULL: case 63ULL: case 
      64ULL: case 65ULL: case 66ULL: case 67ULL: case 68ULL: case 69ULL: case 
      70ULL: case 71ULL: case 72ULL: case 73ULL: case 74ULL: case 75ULL: case 
      76ULL: case 77ULL: case 78ULL: case 79ULL: case 80ULL: case 81ULL: case 
      82ULL: case 83ULL: case 84ULL: case 85ULL: case 86ULL: case 87ULL: case 
      88ULL: case 89ULL: case 90ULL: case 91ULL: case 92ULL: case 93ULL: case 
      94ULL: case 95ULL: case 96ULL: case 97ULL: case 98ULL: case 99ULL: case 
      100ULL: case 101ULL: case 102ULL: case 103ULL: case 104ULL: case 105ULL: 
      case 106ULL: case 107ULL: case 108ULL: case 109ULL: case 110ULL: case 
      111ULL: case 112ULL: case 113ULL: case 114ULL: case 115ULL: case 116ULL: 
      case 117ULL: case 118ULL: case 119ULL: case 120ULL: case 121ULL: case 
      122ULL: case 123ULL: case 124ULL: case 125ULL: case 126ULL: case 127ULL: 
      case 128ULL: case 129ULL: case 130ULL: case 131ULL: 
        gs_ctrl10 = 1ULL;
        break;
      case 132ULL: case 133ULL: case 134ULL: case 135ULL: case 136ULL: case 
      137ULL: case 138ULL: case 139ULL: case 140ULL: case 141ULL: case 142ULL: 
      case 143ULL: case 144ULL: case 145ULL: case 146ULL: case 147ULL: case 
      148ULL: case 149ULL: case 150ULL: case 151ULL: case 152ULL: case 153ULL: 
      case 154ULL: case 155ULL: case 156ULL: case 157ULL: case 158ULL: case 
      159ULL: case 160ULL: case 161ULL: case 162ULL: case 163ULL: case 164ULL: 
      case 165ULL: case 166ULL: case 167ULL: case 168ULL: case 169ULL: case 
      170ULL: case 171ULL: case 172ULL: case 173ULL: case 174ULL: case 175ULL: 
      case 176ULL: case 177ULL: case 178ULL: case 179ULL: case 180ULL: case 
      181ULL: case 182ULL: case 183ULL: case 184ULL: case 185ULL: case 186ULL: 
      case 187ULL: case 188ULL: case 189ULL: case 190ULL: case 191ULL: case 
      192ULL: case 193ULL: case 194ULL: case 195ULL: case 196ULL: case 197ULL: 
      case 198ULL: case 199ULL: case 200ULL: case 201ULL: case 202ULL: case 
      203ULL: case 204ULL: case 205ULL: case 206ULL: case 207ULL: case 208ULL: 
      case 209ULL: case 210ULL: case 211ULL: case 212ULL: case 213ULL: case 
      214ULL: case 215ULL: case 216ULL: case 217ULL: case 218ULL: case 219ULL: 
      case 220ULL: case 221ULL: case 222ULL: case 223ULL: case 224ULL: case 
      225ULL: case 226ULL: case 227ULL: case 228ULL: case 229ULL: case 230ULL: 
      case 231ULL: case 232ULL: case 233ULL: case 234ULL: case 235ULL: case 
      236ULL: case 237ULL: case 238ULL: case 239ULL: case 240ULL: case 241ULL: 
      case 242ULL: case 243ULL: case 244ULL: case 245ULL: case 246ULL: case 
      247ULL: case 248ULL: case 249ULL: case 250ULL: case 251ULL: case 252ULL: 
      case 253ULL: case 254ULL: case 255ULL: case 256ULL: case 257ULL: case 
      258ULL: case 259ULL: 
        gs_ctrl10 = 1ULL;
        break;
      case 260ULL: case 261ULL: case 262ULL: case 263ULL: case 264ULL: case 
      265ULL: 
        gs_ctrl10 = 1ULL;
        break;
      }
      break;
    }
  }
}
// resource: mux_3bx5i5c
// resource: regr_en_sc_3
void Gaussian_Blur::drive_gs_ctrl11(){
  if ( (i_rst.read() == 0ULL) ) {
    gs_ctrl11 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    case 0ULL: 
      switch( (sc_uint<9>)(global_state_next.read()) ) {
      default:
        gs_ctrl11 = 0ULL;
        break;
      case 3ULL: case 5ULL: case 6ULL: case 7ULL: case 8ULL: case 9ULL: case 
      10ULL: case 11ULL: case 12ULL: case 13ULL: case 14ULL: case 15ULL: case 
      16ULL: case 17ULL: case 18ULL: case 19ULL: case 20ULL: case 21ULL: case 
      22ULL: case 23ULL: case 24ULL: case 25ULL: case 26ULL: case 27ULL: case 
      28ULL: case 29ULL: case 30ULL: case 31ULL: case 32ULL: case 33ULL: case 
      34ULL: case 35ULL: case 36ULL: case 37ULL: case 38ULL: case 39ULL: case 
      40ULL: case 41ULL: case 42ULL: case 43ULL: case 44ULL: case 45ULL: case 
      46ULL: case 47ULL: case 48ULL: case 49ULL: case 50ULL: case 51ULL: case 
      52ULL: case 53ULL: case 54ULL: case 55ULL: case 56ULL: case 57ULL: case 
      58ULL: case 59ULL: case 60ULL: case 61ULL: case 62ULL: case 63ULL: case 
      64ULL: case 65ULL: case 66ULL: case 67ULL: case 68ULL: case 69ULL: case 
      70ULL: case 71ULL: case 72ULL: case 73ULL: case 74ULL: case 75ULL: case 
      76ULL: case 77ULL: case 78ULL: case 79ULL: case 80ULL: case 81ULL: case 
      82ULL: case 83ULL: case 84ULL: case 85ULL: case 86ULL: case 87ULL: case 
      88ULL: case 89ULL: case 90ULL: case 91ULL: case 92ULL: case 93ULL: case 
      94ULL: case 95ULL: case 96ULL: case 97ULL: case 98ULL: case 99ULL: case 
      100ULL: case 101ULL: case 102ULL: case 103ULL: case 104ULL: case 105ULL: 
      case 106ULL: case 107ULL: case 108ULL: case 109ULL: case 110ULL: case 
      111ULL: case 112ULL: case 113ULL: case 114ULL: case 115ULL: case 116ULL: 
      case 117ULL: case 118ULL: case 119ULL: case 120ULL: case 121ULL: case 
      122ULL: case 123ULL: case 124ULL: case 125ULL: case 126ULL: case 127ULL: 
      case 128ULL: case 129ULL: case 130ULL: case 131ULL: 
        gs_ctrl11 = 1ULL;
        break;
      case 132ULL: case 133ULL: case 134ULL: case 135ULL: case 136ULL: case 
      137ULL: case 138ULL: case 139ULL: case 140ULL: case 141ULL: case 142ULL: 
      case 143ULL: case 144ULL: case 145ULL: case 146ULL: case 147ULL: case 
      148ULL: case 149ULL: case 150ULL: case 151ULL: case 152ULL: case 153ULL: 
      case 154ULL: case 155ULL: case 156ULL: case 157ULL: case 158ULL: case 
      159ULL: case 160ULL: case 161ULL: case 162ULL: case 163ULL: case 164ULL: 
      case 165ULL: case 166ULL: case 167ULL: case 168ULL: case 169ULL: case 
      170ULL: case 171ULL: case 172ULL: case 173ULL: case 174ULL: case 175ULL: 
      case 176ULL: case 177ULL: case 178ULL: case 179ULL: case 180ULL: case 
      181ULL: case 182ULL: case 183ULL: case 184ULL: case 185ULL: case 186ULL: 
      case 187ULL: case 188ULL: case 189ULL: case 190ULL: case 191ULL: case 
      192ULL: case 193ULL: case 194ULL: case 195ULL: case 196ULL: case 197ULL: 
      case 198ULL: case 199ULL: case 200ULL: case 201ULL: case 202ULL: case 
      203ULL: case 204ULL: case 205ULL: case 206ULL: case 207ULL: case 208ULL: 
      case 209ULL: case 210ULL: case 211ULL: case 212ULL: case 213ULL: case 
      214ULL: case 215ULL: case 216ULL: case 217ULL: case 218ULL: case 219ULL: 
      case 220ULL: case 221ULL: case 222ULL: case 223ULL: case 224ULL: case 
      225ULL: case 226ULL: case 227ULL: case 228ULL: case 229ULL: case 230ULL: 
      case 231ULL: case 232ULL: case 233ULL: case 234ULL: case 235ULL: case 
      236ULL: case 237ULL: case 238ULL: case 239ULL: case 240ULL: case 241ULL: 
      case 242ULL: case 243ULL: case 244ULL: case 245ULL: case 246ULL: case 
      247ULL: case 248ULL: case 249ULL: case 250ULL: case 251ULL: case 252ULL: 
      case 253ULL: case 254ULL: case 255ULL: case 256ULL: case 257ULL: case 
      258ULL: case 259ULL: 
        gs_ctrl11 = 1ULL;
        break;
      case 260ULL: case 261ULL: case 262ULL: case 263ULL: case 265ULL: case 
      273ULL: 
        gs_ctrl11 = 1ULL;
        break;
      case 4ULL: 
        gs_ctrl11 = 2ULL;
        break;
      case 264ULL: 
        gs_ctrl11 = 3ULL;
        break;
      case 296ULL: 
        gs_ctrl11 = 4ULL;
        break;
      }
      break;
    }
  }
}
// resource: mux_2bx4i4c
// resource: regr_en_sc_2
void Gaussian_Blur::drive_gs_ctrl12(){
  if ( (i_rst.read() == 0ULL) ) {
    gs_ctrl12 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    case 0ULL: 
      switch( (sc_uint<9>)(global_state_next.read()) ) {
      default:
        gs_ctrl12 = 0ULL;
        break;
      case 3ULL: case 5ULL: case 6ULL: case 7ULL: case 8ULL: case 9ULL: case 
      10ULL: case 11ULL: case 12ULL: case 13ULL: case 14ULL: case 15ULL: case 
      16ULL: case 17ULL: case 18ULL: case 19ULL: case 20ULL: case 21ULL: case 
      22ULL: case 23ULL: case 24ULL: case 25ULL: case 26ULL: case 27ULL: case 
      28ULL: case 29ULL: case 30ULL: case 31ULL: case 32ULL: case 33ULL: case 
      34ULL: case 35ULL: case 36ULL: case 37ULL: case 38ULL: case 39ULL: case 
      40ULL: case 41ULL: case 42ULL: case 43ULL: case 44ULL: case 45ULL: case 
      46ULL: case 47ULL: case 48ULL: case 49ULL: case 50ULL: case 51ULL: case 
      52ULL: case 53ULL: case 54ULL: case 55ULL: case 56ULL: case 57ULL: case 
      58ULL: case 59ULL: case 60ULL: case 61ULL: case 62ULL: case 63ULL: case 
      64ULL: case 65ULL: case 66ULL: case 67ULL: case 68ULL: case 69ULL: case 
      70ULL: case 71ULL: case 72ULL: case 73ULL: case 74ULL: case 75ULL: case 
      76ULL: case 77ULL: case 78ULL: case 79ULL: case 80ULL: case 81ULL: case 
      82ULL: case 83ULL: case 84ULL: case 85ULL: case 86ULL: case 87ULL: case 
      88ULL: case 89ULL: case 90ULL: case 91ULL: case 92ULL: case 93ULL: case 
      94ULL: case 95ULL: case 96ULL: case 97ULL: case 98ULL: case 99ULL: case 
      100ULL: case 101ULL: case 102ULL: case 103ULL: case 104ULL: case 105ULL: 
      case 106ULL: case 107ULL: case 108ULL: case 109ULL: case 110ULL: case 
      111ULL: case 112ULL: case 113ULL: case 114ULL: case 115ULL: case 116ULL: 
      case 117ULL: case 118ULL: case 119ULL: case 120ULL: case 121ULL: case 
      122ULL: case 123ULL: case 124ULL: case 125ULL: case 126ULL: case 127ULL: 
      case 128ULL: case 129ULL: case 130ULL: case 131ULL: 
        gs_ctrl12 = 1ULL;
        break;
      case 132ULL: case 133ULL: case 134ULL: case 135ULL: case 136ULL: case 
      137ULL: case 138ULL: case 139ULL: case 140ULL: case 141ULL: case 142ULL: 
      case 143ULL: case 144ULL: case 145ULL: case 146ULL: case 147ULL: case 
      148ULL: case 149ULL: case 150ULL: case 151ULL: case 152ULL: case 153ULL: 
      case 154ULL: case 155ULL: case 156ULL: case 157ULL: case 158ULL: case 
      159ULL: case 160ULL: case 161ULL: case 162ULL: case 163ULL: case 164ULL: 
      case 165ULL: case 166ULL: case 167ULL: case 168ULL: case 169ULL: case 
      170ULL: case 171ULL: case 172ULL: case 173ULL: case 174ULL: case 175ULL: 
      case 176ULL: case 177ULL: case 178ULL: case 179ULL: case 180ULL: case 
      181ULL: case 182ULL: case 183ULL: case 184ULL: case 185ULL: case 186ULL: 
      case 187ULL: case 188ULL: case 189ULL: case 190ULL: case 191ULL: case 
      192ULL: case 193ULL: case 194ULL: case 195ULL: case 196ULL: case 197ULL: 
      case 198ULL: case 199ULL: case 200ULL: case 201ULL: case 202ULL: case 
      203ULL: case 204ULL: case 205ULL: case 206ULL: case 207ULL: case 208ULL: 
      case 209ULL: case 210ULL: case 211ULL: case 212ULL: case 213ULL: case 
      214ULL: case 215ULL: case 216ULL: case 217ULL: case 218ULL: case 219ULL: 
      case 220ULL: case 221ULL: case 222ULL: case 223ULL: case 224ULL: case 
      225ULL: case 226ULL: case 227ULL: case 228ULL: case 229ULL: case 230ULL: 
      case 231ULL: case 232ULL: case 233ULL: case 234ULL: case 235ULL: case 
      236ULL: case 237ULL: case 238ULL: case 239ULL: case 240ULL: case 241ULL: 
      case 242ULL: case 243ULL: case 244ULL: case 245ULL: case 246ULL: case 
      247ULL: case 248ULL: case 249ULL: case 250ULL: case 251ULL: case 252ULL: 
      case 253ULL: case 254ULL: case 255ULL: case 256ULL: case 257ULL: case 
      258ULL: case 259ULL: 
        gs_ctrl12 = 1ULL;
        break;
      case 260ULL: case 261ULL: case 262ULL: case 263ULL: case 265ULL: case 
      273ULL: 
        gs_ctrl12 = 1ULL;
        break;
      case 4ULL: 
        gs_ctrl12 = 2ULL;
        break;
      case 264ULL: 
        gs_ctrl12 = 3ULL;
        break;
      }
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_en_sc_1
void Gaussian_Blur::drive_gs_ctrl13(){
  if ( (i_rst.read() == 0ULL) ) {
    gs_ctrl13 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    case 0ULL: 
      switch( (sc_uint<9>)(global_state_next.read()) ) {
      default:
        gs_ctrl13 = 0ULL;
        break;
      case 264ULL: 
        gs_ctrl13 = 1ULL;
        break;
      }
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_en_sc_1
void Gaussian_Blur::drive_gs_ctrl14(){
  if ( (i_rst.read() == 0ULL) ) {
    gs_ctrl14 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    case 0ULL: 
      switch( (sc_uint<9>)(global_state_next.read()) ) {
      default:
        gs_ctrl14 = 0ULL;
        break;
      case 295ULL: 
        gs_ctrl14 = 1ULL;
        break;
      }
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_en_sc_1
void Gaussian_Blur::drive_gs_ctrl18(){
  if ( (i_rst.read() == 0ULL) ) {
    gs_ctrl18 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    case 0ULL: 
      switch( (sc_uint<9>)(global_state_next.read()) ) {
      default:
        gs_ctrl18 = 0ULL;
        break;
      case 274ULL: 
        gs_ctrl18 = 1ULL;
        break;
      }
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_en_sc_1
void Gaussian_Blur::drive_gs_ctrl19(){
  if ( (i_rst.read() == 0ULL) ) {
    gs_ctrl19 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    case 0ULL: 
      switch( (sc_uint<9>)(global_state_next.read()) ) {
      default:
        gs_ctrl19 = 0ULL;
        break;
      case 296ULL: 
        gs_ctrl19 = 1ULL;
        break;
      }
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_en_sc_1
void Gaussian_Blur::drive_gs_ctrl21(){
  if ( (i_rst.read() == 0ULL) ) {
    gs_ctrl21 = 0ULL;
  } else {
    switch( (sc_uint<1>)(stall0.read()) ) {
    case 1ULL: 
      break;
    case 0ULL: 
      switch( (sc_uint<9>)(global_state_next.read()) ) {
      default:
        gs_ctrl21 = 0ULL;
        break;
      case 272ULL: 
        gs_ctrl21 = 1ULL;
        break;
      }
      break;
    }
  }
}
void Gaussian_Blur::drive_i_rgb_busy(){
  i_rgb_busy = (sc_uint<1> ) (((/*imp*/sc_uint<1> ) 
               Gaussian_Blur_gen_busy_r_4_70_out1.read().range(2,2)));
}
// resource: Gaussian_Blur_gen_busy_r_4  instance: Gaussian_Blur_gen_busy_r_4_70
void Gaussian_Blur::Gaussian_Blur_gen_busy_r_4_70_p8(){
  Gaussian_Blur_gen_busy_r_4_70_out1 = (sc_uint<3> ) (( (sc_biguint<3> )
                                       (sc_bv<3>)((sc_bv<1>)(
                                       Gaussian_Blur_gen_busy_r_4_70_gnew_req
                                       .read()), 
                                       (sc_bv<2>)(( (sc_biguint<2> )(sc_bv<2>)(
                                       (sc_bv<1>)(
                                       Gaussian_Blur_gen_busy_r_4_70_gdiv.read()
                                       ), 
                                       (sc_bv<1>)(Gaussian_Blur_gen_busy_r_4_70_gen_busy_i_rgb_m_data_is_invalid_next
                                       .read())) ))) ));
}
// resource: Gaussian_Blur_gen_busy_r_4  instance: Gaussian_Blur_gen_busy_r_4_70
void Gaussian_Blur::Gaussian_Blur_gen_busy_r_4_70_p7(){
  Gaussian_Blur_gen_busy_r_4_70_gen_busy_i_rgb_m_data_is_invalid_next = ~(sc_uint<1>)Gaussian_Blur_gen_busy_r_4_70_gdiv
                                                                        .read();
}
// resource: Gaussian_Blur_gen_busy_r_4  instance: Gaussian_Blur_gen_busy_r_4_70
void Gaussian_Blur::Gaussian_Blur_gen_busy_r_4_70_p6(){
  Gaussian_Blur_gen_busy_r_4_70_gdiv = (sc_uint<1> ) (i_rgb_vld.read() & !
                                       Gaussian_Blur_gen_busy_r_4_70_gnew_req
                                       .read());
}
// resource: Gaussian_Blur_gen_busy_r_4  instance: Gaussian_Blur_gen_busy_r_4_70
void Gaussian_Blur::Gaussian_Blur_gen_busy_r_4_70_p5(){
  Gaussian_Blur_gen_busy_r_4_70_gnew_req = (sc_uint<1> ) (i_rgb_m_busy_req_0
                                           .read() & ( i_rgb_m_unvalidated_req
                                           .read() | (sc_uint<1> )i_rgb_vld
                                           .read() ));
}
// resource: regr_ss_1
void Gaussian_Blur::drive_i_rgb_m_unvalidated_req(){
  if ( (i_rst.read() == 0ULL) ) {
    i_rgb_m_unvalidated_req = 1ULL;
  } else {
    i_rgb_m_unvalidated_req = (sc_uint<1> ) (Gaussian_Blur_N_Muxb_1_2_2_4_4_out1
                              .read());
  }
}
// resource: Gaussian_Blur_N_Muxb_1_2_2_4
void Gaussian_Blur::Gaussian_Blur_N_Muxb_1_2_2_4_4(){
  if ( i_rgb_m_busy_req_0.read() ) {
    Gaussian_Blur_N_Muxb_1_2_2_4_4_out1 = (sc_uint<1> ) (i_rgb_m_unvalidated_req
                                          .read());
  } else {
    Gaussian_Blur_N_Muxb_1_2_2_4_4_out1 = (sc_uint<1> ) (i_rgb_vld.read());
  }
}
void Gaussian_Blur::drive_o_result_vld(){
  o_result_vld = (sc_uint<1> ) (Gaussian_Blur_Or_1Ux1U_1U_4_2_out1.read());
}
// resource: Gaussian_Blur_Or_1Ux1U_1U_4  instance: Gaussian_Blur_Or_1Ux1U_1U_4_2
void Gaussian_Blur::Gaussian_Blur_Or_1Ux1U_1U_4_2(){
  Gaussian_Blur_Or_1Ux1U_1U_4_2_out1 = (sc_uint<1> ) (o_result_m_unacked_req
                                       .read() | (sc_uint<1>)
                                       Gaussian_Blur_Xor_1Ux1U_1U_1_1_out1
                                       .read());
}
// resource: regr_sc_1
void Gaussian_Blur::drive_o_result_m_unacked_req(){
  if ( (i_rst.read() == 0ULL) ) {
    o_result_m_unacked_req = 0ULL;
  } else {
    o_result_m_unacked_req = (sc_uint<1> ) (Gaussian_Blur_And_1Ux1U_1U_4_68_out1
                             .read());
  }
}
// resource: Gaussian_Blur_And_1Ux1U_1U_4  instance: Gaussian_Blur_And_1Ux1U_1U_4_68
void Gaussian_Blur::Gaussian_Blur_And_1Ux1U_1U_4_68(){
  Gaussian_Blur_And_1Ux1U_1U_4_68_out1 = o_result_busy.read() & o_result_vld
                                         .read();
}
// resource: Gaussian_Blur_Xor_1Ux1U_1U_1  instance: Gaussian_Blur_Xor_1Ux1U_1U_1_1
void Gaussian_Blur::Gaussian_Blur_Xor_1Ux1U_1U_1_1(){
  Gaussian_Blur_Xor_1Ux1U_1U_1_1_out1 = (sc_uint<1> ) (o_result_m_req_m_trig_req
                                        .read() ^ o_result_m_req_m_prev_trig_req
                                        .read());
}
// resource: regr_sc_1
void Gaussian_Blur::drive_o_result_m_req_m_prev_trig_req(){
  if ( (i_rst.read() == 0ULL) ) {
    o_result_m_req_m_prev_trig_req = 0ULL;
  } else {
    o_result_m_req_m_prev_trig_req = o_result_m_req_m_trig_req.read();
  }
}
// resource: Gaussian_Blur_Not_1U_1U_1  instance: Gaussian_Blur_Not_1U_1U_1_3
void Gaussian_Blur::Gaussian_Blur_Not_1U_1U_1_3(){
  Gaussian_Blur_Not_1U_1U_1_3_out1 = !o_result_m_req_m_trig_req.read();
}
void Gaussian_Blur::drive_o_result_data(){
  o_result_data = (sc_int<32> ) (o_result_data_slice.read());
}
